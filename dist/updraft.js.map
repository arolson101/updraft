{"version":3,"sources":["assign.ts","Text.ts","verify.ts","Column.ts","Database.ts","Mutate.ts","Table.ts","Store.ts","index.ts","Query.ts","SQLiteWrapper.ts","WebsqlWrapper.ts"],"names":[],"mappings":"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","file":"dist/updraft.js","sourcesContent":["\"use strict\";\r\n\r\nnamespace Updraft {\r\n\t/* istanbul ignore next */\r\n\tfunction toObject(val: any) {\r\n\t\tif (val === null || val === undefined) {\r\n\t\t\tthrow new TypeError(\"Object.assign cannot be called with null or undefined\");\r\n\t\t}\r\n\t\treturn Object(val);\r\n\t}\r\n\t\r\n\t/* istanbul ignore next */\r\n\tlet ObjectAssign = (<any>Object).assign || function (target: Object, source: Object) {\r\n\t\tconst hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\t\tconst propIsEnumerable = Object.prototype.propertyIsEnumerable;\r\n\t\tlet from: Object;\r\n\t\tlet to = toObject(target);\r\n\t\tlet symbols: any[];\r\n\t\r\n\t\tfor (let s = 1; s < arguments.length; s++) {\r\n\t\t\tfrom = Object(arguments[s]);\r\n\t\r\n\t\t\tfor (let key in from) {\r\n\t\t\t\tif (hasOwnProperty.call(from, key)) {\r\n\t\t\t\t\tto[key] = from[key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\tif ((<any>Object).getOwnPropertySymbols) {\r\n\t\t\t\tsymbols = (<any>Object).getOwnPropertySymbols(from);\r\n\t\t\t\tfor (let i = 0; i < symbols.length; i++) {\r\n\t\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\r\n\t\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn to;\r\n\t};\r\n\t\r\n\texport var assign = ObjectAssign;\r\n}\r\n","\"use strict\";\r\n\r\nnamespace Updraft {\r\n  function reviver(key: string, value: any): any {\r\n    if (typeof value === \"string\") {\r\n      let regexp = /^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d.\\d\\d\\dZ$/.exec(value);\r\n      if (regexp) {\r\n        return new Date(value);\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n  \r\n  export function toText(o: any): string {\r\n    return JSON.stringify(o);\r\n  }\r\n  \r\n  export function fromText(text: string): any {\r\n    return JSON.parse(text, reviver);\r\n  }\r\n}\r\n","\"use strict\";\r\n\r\nnamespace Updraft {\r\n  /* istanbul ignore next */\r\n  function makePrintable(x: any): string {\r\n    if (Array.isArray(x) || (x && typeof x === \"object\")) {\r\n      return JSON.stringify(x);\r\n    }\r\n    else {\r\n      return x;\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * Use verify() to assert state which your program assumes to be true.\r\n  *\r\n  * Provide sprintf-style format (only %s is supported) and arguments\r\n  * to provide information about what broke and what you were\r\n  * expecting.\r\n  */\r\n  export function verify(condition: any, format: string, ...args: any[]) {\r\n    /* istanbul ignore next */\r\n    if (!condition) {\r\n      let argIndex = 0;\r\n      let error = new Error(\r\n        format.replace(/%s/g, function() { return makePrintable(args[argIndex++]); })\r\n      );\r\n  \r\n      (<any>error).framesToPop = 1; // we don't care about verify's own frame\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n","///<reference path=\"./Text\"/>\r\n///<reference path=\"./verify\"/>\r\n\"use strict\";\r\n\r\nnamespace Updraft {\r\n\r\n\texport enum ColumnType {\r\n\t\tint,\r\n\t\treal,\r\n\t\tbool,\r\n\t\ttext,\r\n\t\tenum,\r\n\t\tdate,\r\n\t\tdatetime,\r\n\t\tjson,\r\n\t\tset\r\n\t}\r\n\t\r\n\t/** A typescript enum class will have string keys resolving to the enum values */\r\n\texport interface TypeScriptEnum {\r\n\t\t[enumValue: number]: string;\r\n\t}\r\n\t\r\n\texport interface EnumValue {\r\n\t\ttoString(): string;\r\n\t}\r\n\t\r\n\t/** An enum class (e.g. (this one)[https://github.com/adrai/enum]) should provide a static method 'get' to resolve strings into enum values */\r\n\texport interface EnumClass {\r\n\t\tget(value: string | number): EnumValue;\r\n\t}\r\n\t\r\n\texport type Serializable = string | number;\r\n\t\r\n\t/**\r\n\t* Column in db.  Use static methods to create columns.\r\n\t*/\r\n\texport class Column {\r\n\t\tpublic isKey: boolean;\r\n\t\tpublic isIndex: boolean;\r\n\t\tpublic type: ColumnType;\r\n\t\t//public setTable: ClassTemplate<any>;\r\n\t\tpublic defaultValue: number | boolean | string;\r\n\t\tpublic enum: EnumClass | TypeScriptEnum;\r\n\t\tpublic element: Column;\r\n\t\r\n\t\tconstructor(type: ColumnType) {\r\n\t\t\tthis.type = type;\r\n\t\t\tif (type == ColumnType.bool) {\r\n\t\t\t\tthis.defaultValue = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t/**\r\n\t\t\t* Column is the primary key.  Only one column can have this set.\r\n\t\t\t*/\r\n\t\tKey(): Column {\r\n\t\t\tthis.isKey = true;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\r\n\t\t/**\r\n\t\t\t* Create an index for this column for faster queries.\r\n\t\t\t*/\r\n\t\tIndex(): Column {\r\n\t\t\tthis.isIndex = true;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\r\n\t\t/**\r\n\t\t\t* Set a default value for the column\r\n\t\t\t*/\r\n\t\t// TODO\r\n\t\tDefault(value: number | boolean | string): Column {\r\n\t\t\tif (this.type == ColumnType.bool) {\r\n\t\t\t\tvalue = value ? true : false;\r\n\t\t\t}\r\n\t\t\tthis.defaultValue = value;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\t\r\n\t\tdeserialize(value: Serializable): any {\r\n\t\t\tswitch (this.type) {\r\n\t\t\t\tcase ColumnType.int:\r\n\t\t\t\tcase ColumnType.real:\r\n\t\t\t\tcase ColumnType.text:\r\n\t\t\t\t\treturn value;\r\n\t\r\n\t\t\t\tcase ColumnType.bool:\r\n\t\t\t\t\treturn value ? true : false;\r\n\t\r\n\t\t\t\tcase ColumnType.json:\r\n\t\t\t\t\treturn fromText(<string>value);\r\n\t\r\n\t\t\t\tcase ColumnType.enum:\r\n\t\t\t\t\tif (typeof (<EnumClass>this.enum).get === \"function\") {\r\n\t\t\t\t\t\tlet enumValue = (<EnumClass>this.enum).get(value);\r\n\t\t\t\t\t\tverify(!value || enumValue, \"error getting enum value %s\", value);\r\n\t\t\t\t\t\treturn enumValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tverify(value in this.enum, \"enum value %s not in %s\", value, this.enum);\r\n\t\t\t\t\treturn this.enum[value];\r\n\t\r\n\t\t\t\tcase ColumnType.date:\r\n\t\t\t\tcase ColumnType.datetime:\r\n\t\t\t\t\tverify(!value || parseFloat(<string>value) == value, \"expected date to be stored as a number: %s\", value);\r\n\t\t\t\t\treturn value ? new Date(parseFloat(<string>value) * 1000) : undefined;\r\n\t\t\t\t\t\r\n\t\t\t\tcase ColumnType.set:\r\n\t\t\t\t\tverify(<any>value instanceof Set, \"value should already be a set\");\r\n\t\t\t\t\treturn value;\r\n\t\r\n\t\t\t\t/* istanbul ignore next */\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"unsupported column type \" + ColumnType[this.type]);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tserialize(value: any): Serializable {\r\n\t\t\tswitch (this.type) {\r\n\t\t\t\tcase ColumnType.int:\r\n\t\t\t\tcase ColumnType.real:\r\n\t\t\t\tcase ColumnType.text:\r\n\t\t\t\t\treturn value;\r\n\t\r\n\t\t\t\tcase ColumnType.bool:\r\n\t\t\t\t\treturn value ? 1 : 0;\r\n\t\r\n\t\t\t\tcase ColumnType.json:\r\n\t\t\t\t\treturn toText(value);\r\n\t\r\n\t\t\t\tcase ColumnType.enum:\r\n\t\t\t\t\t/* istanbul ignore if: safe to store these in db, though it's probably an error to be anything other than a number/object */\r\n\t\t\t\t\tif (typeof value === \"string\" || typeof value === undefined || value === null) {\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (typeof value === \"number\") {\r\n\t\t\t\t\t\tverify(value in this.enum, \"enum doesn't contain %s\", value);\r\n\t\t\t\t\t\treturn (<TypeScriptEnum>this.enum)[value];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tverify(typeof value.toString === \"function\", \"expected an enum value supporting toString(); got %s\", value);\r\n\t\t\t\t\treturn value.toString();\r\n\t\r\n\t\t\t\tcase ColumnType.date:\r\n\t\t\t\tcase ColumnType.datetime:\r\n\t\t\t\t\tverify(value == undefined || value instanceof Date, \"expected a date, got %s\", value);\r\n\t\t\t\t\tlet date = (value == undefined) ? null : ((<Date>value).getTime() / 1000);\r\n\t\t\t\t\treturn date;\r\n\t\r\n\t\t\t\t/* istanbul ignore next */\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"unsupported column type \" + ColumnType[this.type]);\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t/** create a column with \"INTEGER\" affinity */\r\n\t\tstatic Int(): Column {\r\n\t\t\treturn new Column(ColumnType.int);\r\n\t\t}\r\n\t\r\n\t\t/** create a column with \"REAL\" affinity */\r\n\t\tstatic Real(): Column {\r\n\t\t\treturn new Column(ColumnType.real);\r\n\t\t}\r\n\t\r\n\t\t/** create a column with \"BOOL\" affinity */\r\n\t\tstatic Bool(): Column {\r\n\t\t\treturn new Column(ColumnType.bool);\r\n\t\t}\r\n\t\r\n\t\t/** create a column with \"TEXT\" affinity */\r\n\t\tstatic Text(): Column {\r\n\t\t\treturn new Column(ColumnType.text);\r\n\t\t}\r\n\t\r\n\t\t/** create a column with \"TEXT\" affinity */\r\n\t\tstatic String(): Column {\r\n\t\t\treturn new Column(ColumnType.text);\r\n\t\t}\r\n\t\r\n\t\t/** a typescript enum or javascript object with instance method \"toString\" and class method \"get\" (e.g. {@link https://github.com/adrai/enum}). */\r\n\t\tstatic Enum(enum_: EnumClass | TypeScriptEnum): Column {\r\n\t\t\tlet c = new Column(ColumnType.enum);\r\n\t\t\tc.enum = enum_;\r\n\t\t\treturn c;\r\n\t\t}\r\n\t\r\n\t\t/** a javascript Date objct, stored in db as seconds since Unix epoch (time_t) [note: precision is seconds] */\r\n\t\tstatic Date(): Column {\r\n\t\t\treturn new Column(ColumnType.date);\r\n\t\t}\r\n\t\r\n\t\t/** a javascript Date objct, stored in db as seconds since Unix epoch (time_t) [note: precision is seconds] */\r\n\t\tstatic DateTime(): Column {\r\n\t\t\treturn new Column(ColumnType.datetime);\r\n\t\t}\r\n\t\r\n\t\t/** object will be serialized & restored as JSON text */\r\n\t\tstatic JSON(): Column {\r\n\t\t\treturn new Column(ColumnType.json);\r\n\t\t}\r\n\t\r\n\t\t/** unordered collection */\r\n\t\tstatic Set(type: ColumnType): Column {\r\n\t\t\tlet c = new Column(ColumnType.set);\r\n\t\t\tc.element = new Column(type);\r\n\t\t\treturn c;\r\n\t\t}\r\n\t\r\n\t\r\n\t\tstatic sql(val: Column): string {\r\n\t\t\tlet stmt = \"\";\r\n\t\t\tswitch (val.type) {\r\n\t\t\t\tcase ColumnType.int:\r\n\t\t\t\t\tstmt = \"INTEGER\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ColumnType.bool:\r\n\t\t\t\t\tstmt = \"BOOLEAN NOT NULL\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ColumnType.real:\r\n\t\t\t\t\tstmt = \"REAL\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ColumnType.text:\r\n\t\t\t\t\tstmt = \"TEXT\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ColumnType.json:\r\n\t\t\t\t\tstmt = \"CLOB\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ColumnType.enum:\r\n\t\t\t\t\tstmt = \"CHARACTER(20)\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ColumnType.date:\r\n\t\t\t\t\tstmt = \"DATE\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ColumnType.datetime:\r\n\t\t\t\t\tstmt = \"DATETIME\";\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t/* istanbul ignore next */\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"unsupported type \" + ColumnType[val.type]);\r\n\t\t\t}\r\n\t\r\n\t\t\tif (\"defaultValue\" in val) {\r\n\t\t\t\tlet escape = function(x: string | number | boolean): string {\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif (typeof x === \"number\") {\r\n\t\t\t\t\t\treturn <any>x;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (typeof x === \"string\") {\r\n\t\t\t\t\t\treturn \"'\" + (<string>x).replace(/'/g, \"''\") + \"'\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tverify(false, \"default value (%s) must be number or string\", x);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tstmt += \" DEFAULT \" + escape(val.serialize(val.defaultValue));\r\n\t\t\t}\r\n\t\r\n\t\t\treturn stmt;\r\n\t\t}\r\n\t\r\n\t\tstatic fromSql(text: string): Column {\r\n\t\t\tlet parts: string[] = text.split(\" \");\r\n\t\t\tlet col: Column = null;\r\n\t\t\tswitch (parts[0]) {\r\n\t\t\t\tcase \"INTEGER\":\r\n\t\t\t\t\tcol = Column.Int();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"BOOLEAN\":\r\n\t\t\t\t\tcol = Column.Bool();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"REAL\":\r\n\t\t\t\t\tcol = Column.Real();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"TEXT\":\r\n\t\t\t\t\tcol = Column.Text();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"CLOB\":\r\n\t\t\t\t\tcol = Column.JSON();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"CHARACTER(20)\":\r\n\t\t\t\t\tcol = new Column(ColumnType.enum);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"DATE\":\r\n\t\t\t\t\tcol = Column.Date();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"DATETIME\":\r\n\t\t\t\t\tcol = Column.DateTime();\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t/* istanbul ignore next */\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"unsupported type: \" + ColumnType[parts[0]]);\r\n\t\t\t}\r\n\t\r\n\t\t\tlet match = text.match(/DEFAULT\\s+'((?:[^']|'')*)'/i);\r\n\t\t\tif (match) {\r\n\t\t\t\tlet val: any = match[1].replace(/''/g, \"'\");\r\n\t\t\t\tcol.Default(val);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmatch = text.match(/DEFAULT\\s+(\\S+)/i);\r\n\t\t\t\tif (match) {\r\n\t\t\t\t\tlet val: any = match[1];\r\n\t\t\t\t\tlet valnum = parseFloat(val);\r\n\t\t\t\t\t/* istanbul ignore else: unlikely to be anything but a number */\r\n\t\t\t\t\tif (val == valnum) {\r\n\t\t\t\t\t\tval = valnum;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcol.Default(val);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\treturn col;\r\n\t\t}\r\n\t\r\n\t\tstatic equal(a: Column, b: Column): boolean {\r\n\t\t\tif (a.type != b.type) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif ((a.defaultValue || b.defaultValue) && (a.defaultValue != b.defaultValue)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t/* istanbul ignore next: I don't think this is possible */\r\n\t\t\tif ((a.isKey || b.isKey) && (a.isKey != b.isKey)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\t\r\n\texport interface ColumnSet {\r\n\t\t[name: string]: Column;\r\n\t}\r\n}\r\n","namespace Updraft {\r\n\texport interface Rejector {\r\n\t\t(err: Error): void;\r\n\t}\r\n\t\r\n\texport interface DbStatement {\r\n\t\tsql: string;\r\n\t\tparams?: (string | number)[];\r\n\t}\r\n\t\r\n\texport function DbExecuteSequence(transaction: DbTransaction, statements: DbStatement[], nextCallback: DbTransactionCallback) {\r\n\t\tlet i = 0;\r\n\t\tlet act = (tx: DbTransaction): void => {\r\n\t\t\tif (i < statements.length) {\r\n\t\t\t\tlet which = statements[i];\r\n\t\t\t\ti++;\r\n\t\t\t\ttx.executeSql(which.sql, which.params, act);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnextCallback(tx);\r\n\t\t\t}\r\n\t\t};\r\n\t\tact(transaction);\r\n\t}\r\n\t\r\n\texport interface DbErrorCallback {\r\n\t\t(error: Error): void;\r\n\t}\r\n\t\r\n\texport interface DbWrapper {\r\n\t\ttransaction(callback: DbTransactionCallback, errorCallback: DbErrorCallback): void;\r\n\t\treadTransaction(callback: DbTransactionCallback, errorCallback: DbErrorCallback): void;\r\n\t}\r\n\t\r\n\texport interface DbTransactionCallback {\r\n\t\t(transaction: DbTransaction): void;\r\n\t}\r\n  \r\n  export interface DbCommitCallback {\r\n    (): void;\r\n  }\r\n\t\r\n\texport interface DbTransaction {\r\n\t\texecuteSql(sql: string, params: (string | number)[], callback: DbResultsCallback): void;\r\n\t\teach(sql: string, params: (string | number)[], callback: DbEachResultCallback, final: DbTransactionCallback): void;\r\n    commit(callback: DbCommitCallback): void;\r\n\t}\r\n\t\r\n\texport interface DbResultsCallback {\r\n\t\t(transaction: DbTransaction, results: any[]): void;\r\n\t}\r\n\t\r\n\texport interface DbEachResultCallback {\r\n\t\t(transaction: DbTransaction, result: any): void;\r\n\t}\r\n\t\r\n\texport interface DbCallback<Result> {\r\n\t\t(transaction: DbTransaction, result: Result): void;\r\n\t}\r\n}\r\n","// written to React\"s immutability helpers spec\r\n// see https://facebook.github.io/react/docs/update.html\r\n\r\n///<reference path=\"../typings/tsd.d.ts\"/>\r\n///<reference path=\"./assign\"/>\r\n///<reference path=\"./verify\"/>\r\n\"use strict\";\r\n\r\nnamespace Updraft {\r\n  export namespace Mutate {\r\n    export interface setter<T> {\r\n      $set: T;\r\n    }\r\n    \r\n    export interface increment {\r\n      $inc: number;\r\n    }\r\n    \r\n    export interface push<T> {\r\n      $push: Array<T>;\r\n    }\r\n    \r\n    export interface unshift<T> {\r\n      $unshift: Array<T>;\r\n    }\r\n    \r\n    export interface splice<T> {\r\n      // array.splice(start, deleteCount[, item1[, item2[, ...]]])\r\n      $splice: Array<Array<number | T>>;\r\n    }\r\n    \r\n    export interface merge<T> {\r\n      $merge: T;\r\n    }\r\n    \r\n    export interface add<T> {\r\n      $add: Array<T>;\r\n    }\r\n    \r\n    export interface deleter<T> {\r\n      $delete: Array<T>;\r\n    }\r\n    \r\n    export type primitive<T> =\r\n      setter<T>;\r\n    \r\n    export type none = void;\r\n    export type bool = primitive<boolean>;\r\n    export type num = primitive<number> | increment;\r\n    export type str = primitive<string>;\r\n    export type date = setter<Date>;\r\n    export type obj = primitive<Object> | merge<Object> | deleter<string>;\r\n    export type enm<T> = primitive<T>;\r\n    \r\n    export type array<T> =\r\n      setter<Array<T>> |\r\n      push<T> |\r\n      unshift<T> |\r\n      splice<T> |\r\n      merge<T>;\r\n    \r\n    export type strArray = array<string>;\r\n    export type numArray = array<number>;\r\n    export type objArray = array<Object>;\r\n    \r\n    export type set<T> =\r\n      setter<Set<T>> |\r\n      add<T> |\r\n      deleter<T>;\r\n    \r\n    export type strSet = set<string>;\r\n  }\r\n  \r\n  export function shallowCopy<T>(x: T): T {\r\n    /* istanbul ignore else: not sure about this one */\r\n    if (Array.isArray(x)) {\r\n      return (<any>x).concat();\r\n    }\r\n    else if (x instanceof Set) {\r\n      return <any>new Set<T>(<any>x);\r\n    }\r\n    else if (typeof x === \"object\") {\r\n      return assign(new (<any>x).constructor(), x);\r\n    }\r\n    else {\r\n      /* istanbul ignore next: correct AFAIK but unreachable */\r\n      return x;\r\n    }\r\n  }\r\n  \r\n  export function shallowEqual<T>(a: T, b: T): boolean {\r\n    if (Array.isArray(a) && Array.isArray(b)) {\r\n      let aa: any[] = <any>a;\r\n      let bb: any[] = <any>b;\r\n      if (aa.length == bb.length) {\r\n        for (let i = 0; i < aa.length; i++) {\r\n          if (aa[i] != bb[i]) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n    else if (a instanceof Set && b instanceof Set) {\r\n      let aa: Set<any> = <any>a;\r\n      let bb: Set<any> = <any>b;\r\n      if (aa.size == bb.size) {\r\n        let equal = true;\r\n        aa.forEach((elt) => {\r\n          if (equal && !bb.has(elt)) {\r\n            equal = false;\r\n          }\r\n        });\r\n        return equal;\r\n      }\r\n      return false;\r\n    }\r\n    else if (a instanceof Date && b instanceof Date) {\r\n      return (<Date><any>a).getTime() == (<Date><any>b).getTime();\r\n    }\r\n    else if (a && typeof a == \"object\" && b && typeof b == \"object\") {\r\n      let akeys = Object.keys(a);\r\n      let bkeys = Object.keys(b);\r\n      if (akeys.length == bkeys.length) {\r\n        for (let key of akeys) {\r\n          if (!(key in b) || a[key] != b[key]) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n    return a == b;\r\n  }\r\n  \r\n  \r\n  export let hasOwnProperty = {}.hasOwnProperty;\r\n  export function keyOf(obj: Object) { return Object.keys(obj)[0]; }\r\n  \r\n  let command = {\r\n    set: keyOf({$set: null}),\r\n    increment: keyOf({$inc: null}),\r\n    push: keyOf({$push: null}),\r\n    unshift: keyOf({$unshift: null}),\r\n    splice: keyOf({$splice: null}),\r\n    merge: keyOf({$merge: null}),\r\n    add: keyOf({$add: null}),\r\n    deleter: keyOf({$delete: null}),\r\n  };\r\n  \r\n  \r\n  function verifyArrayCase(value: any, spec: any, c: string) {\r\n    verify(\r\n      Array.isArray(value),\r\n      \"mutate(): expected target of %s to be an array; got %s.\",\r\n      c,\r\n      value\r\n    );\r\n    let specValue = spec[c];\r\n    verify(\r\n      Array.isArray(specValue),\r\n      \"mutate(): expected spec of %s to be an array; got %s. \" +\r\n      \"Did you forget to wrap your parameter in an array?\",\r\n      c,\r\n      specValue\r\n    );\r\n  }\r\n  \r\n  function verifySetCase(value: any, spec: any, c: string) {\r\n    verify(\r\n      value instanceof Set,\r\n      \"mutate(): expected target of %s to be a set; got %s.\",\r\n      c,\r\n      value\r\n    );\r\n    let specValue = spec[c];\r\n    verify(\r\n      Array.isArray(specValue),\r\n      \"mutate(): expected spec of %s to be an array; got %s. \" +\r\n      \"Did you forget to wrap your parameter in an array?\",\r\n      c,\r\n      specValue\r\n    );\r\n  }\r\n  \r\n  export function mutate<Element, Mutator>(value: Element, spec: Mutator): Element {\r\n    verify(\r\n      typeof spec === \"object\",\r\n      \"mutate(): You provided a key path to mutate() that did not contain one \" +\r\n      \"of %s. Did you forget to include {%s: ...}?\",\r\n      Object.keys(command).join(\", \"),\r\n      command.set\r\n    );\r\n  \r\n    // verify(\r\n    // \tObject.keys(spec).reduce( function(previousValue: boolean, currentValue: string): boolean {\r\n    // \t\treturn previousValue && (keyOf(spec[currentValue]) in command);\r\n    // \t}, true),\r\n    // \t\"mutate(): argument has an unknown key; supported keys are (%s).  mutator: %s\",\r\n    // \tObject.keys(command).join(\", \"),\r\n    // \tspec\r\n    // );\r\n  \r\n    if (hasOwnProperty.call(spec, command.set)) {\r\n      verify(\r\n        Object.keys(spec).length === 1,\r\n        \"Cannot have more than one key in an object with %s\",\r\n        command.set\r\n      );\r\n  \r\n      return shallowEqual(value, spec[command.set]) ? value : spec[command.set];\r\n    }\r\n  \r\n    if (hasOwnProperty.call(spec, command.increment)) {\r\n      verify(\r\n        typeof(value) === \"number\" && typeof(spec[command.increment]) === \"number\",\r\n        \"Source (%s) and argument (%s) to %s must be numbers\",\r\n        value,\r\n        spec[command.increment],\r\n        command.increment\r\n      );\r\n  \r\n      return value + spec[command.increment];\r\n    }\r\n  \r\n    let changed = false;\r\n  \r\n    if (hasOwnProperty.call(spec, command.merge)) {\r\n      let mergeObj = spec[command.merge];\r\n      let nextValue = <any>shallowCopy(value);\r\n      verify(\r\n        mergeObj && typeof mergeObj === \"object\",\r\n        \"mutate(): %s expects a spec of type 'object'; got %s\",\r\n        command.merge,\r\n        mergeObj\r\n      );\r\n      verify(\r\n        nextValue && typeof nextValue === \"object\",\r\n        \"mutate(): %s expects a target of type 'object'; got %s\",\r\n        command.merge,\r\n        nextValue\r\n      );\r\n      assign(nextValue, spec[command.merge]);\r\n      return shallowEqual(value, nextValue) ? value : nextValue;\r\n    }\r\n  \r\n    if (hasOwnProperty.call(spec, command.deleter) && (typeof value === \"object\") && !(value instanceof Set)) {\r\n      let keys = <any[]>spec[command.deleter];\r\n      verify(\r\n        keys && Array.isArray(keys),\r\n        \"mutate(): %s expects a spec of type 'array'; got %s\",\r\n        command.deleter,\r\n        keys\r\n      );\r\n      let nextValue = <any>shallowCopy(value);\r\n      changed = false;\r\n      keys.forEach((key: string) => {\r\n        if (key in value) {\r\n          delete nextValue[key];\r\n          changed = true;\r\n        }\r\n      });\r\n      return changed ? <any>nextValue : value;\r\n    }\r\n  \r\n    if (hasOwnProperty.call(spec, command.push)) {\r\n      let nextValue: any[] = <any>shallowCopy(value) || [];\r\n      verifyArrayCase(nextValue, spec, command.push);\r\n      if (spec[command.push].length) {\r\n        nextValue.push.apply(nextValue, spec[command.push]);\r\n        return <any>nextValue;\r\n      }\r\n      else {\r\n        return value;\r\n      }\r\n    }\r\n  \r\n    if (hasOwnProperty.call(spec, command.unshift)) {\r\n      verifyArrayCase(value, spec, command.unshift);\r\n      if (spec[command.unshift].length) {\r\n        let nextValue: any[] = <any>shallowCopy(value);\r\n        nextValue.unshift.apply(nextValue, spec[command.unshift]);\r\n        return <any>nextValue;\r\n      }\r\n      else {\r\n        return value;\r\n      }\r\n    }\r\n  \r\n    if (hasOwnProperty.call(spec, command.splice)) {\r\n      let nextValue: any = <any>shallowCopy(value);\r\n      verify(\r\n        Array.isArray(value),\r\n        \"Expected %s target to be an array; got %s\",\r\n        command.splice,\r\n        value\r\n      );\r\n      verify(\r\n        Array.isArray(spec[command.splice]),\r\n        \"mutate(): expected spec of %s to be an array of arrays; got %s. \" +\r\n        \"Did you forget to wrap your parameters in an array?\",\r\n        command.splice,\r\n        spec[command.splice]\r\n      );\r\n      spec[command.splice].forEach(function(args: any) {\r\n        verify(\r\n          Array.isArray(args),\r\n          \"mutate(): expected spec of %s to be an array of arrays; got %s. \" +\r\n          \"Did you forget to wrap your parameters in an array?\",\r\n          command.splice,\r\n          spec[command.splice]\r\n        );\r\n        (<any>nextValue).splice.apply(nextValue, args);\r\n      });\r\n      return shallowEqual(nextValue, value) ? value : nextValue;\r\n    }\r\n  \r\n    if (hasOwnProperty.call(spec, command.add)) {\r\n      let nextValue: Set<any> = <any>shallowCopy(value) || new Set<any>();\r\n      verifySetCase(nextValue, spec, command.add);\r\n      spec[command.add].forEach(function(item: any) {\r\n        if (!nextValue.has(item)) {\r\n          nextValue.add(item);\r\n          changed = true;\r\n        }\r\n      });\r\n      return changed ? <any>nextValue : value;\r\n    }\r\n  \r\n    if (hasOwnProperty.call(spec, command.deleter) && (value instanceof Set)) {\r\n      let nextValue: Set<any> = <any>shallowCopy(value);\r\n      verifySetCase(value, spec, command.deleter);\r\n      spec[command.deleter].forEach(function(item: any) {\r\n        if (nextValue.delete(item)) {\r\n          changed = true;\r\n        }\r\n      });\r\n      return changed ? <any>nextValue : value;\r\n    }\r\n  \r\n    let nextValue: any;\r\n    for (let k in spec) {\r\n      if (typeof value === \"object\" && !(command.hasOwnProperty(k))) {\r\n        let oldValue = value[k];\r\n        let newValue = mutate(oldValue, spec[k]);\r\n        if (oldValue !== newValue) {\r\n          if (!nextValue) {\r\n            nextValue = <any>shallowCopy(value);\r\n          }\r\n          nextValue[k] = newValue;\r\n          changed = true;\r\n        }\r\n      }\r\n    }\r\n  \r\n    return changed ? nextValue : value;\r\n  }\r\n  \r\n  \r\n  export function isMutated<Element>(a: Element, b: Element): boolean {\r\n    return a !== b;\r\n  }\r\n}\r\n","///<reference path=\"./Column\"/>\r\n///<reference path=\"./verify\"/>\r\n\"use strict\";\r\n\r\nnamespace Updraft {\r\n\texport type KeyType = string | number;\r\n\t\r\n\texport interface TableChange<Element, Mutator> {\r\n\t\ttable?: Table<Element, Mutator, any>;\r\n\t\ttime?: number;\r\n\t\tdelete?: KeyType;\r\n\t\tchange?: Mutator;\r\n\t\tsave?: Element;\r\n\t}\r\n\t\r\n\texport interface TableSpec<Element, Mutator, Query> {\r\n\t\tname: string;\r\n\t\tcolumns: ColumnSet;\r\n\t\trenamedColumns?: RenamedColumnSet;\r\n\t\tindices?: string[][];\r\n\t\tclazz?: new (props: Element) => Element; \r\n\t}\r\n\t\r\n\texport interface RenamedColumnSet {\r\n\t\t\t[oldColumnName: string]: string;\r\n\t}\r\n\t\r\n\texport enum OrderBy {\r\n\t\tASC,\r\n\t\tDESC\r\n\t}\r\n\t\r\n\texport interface OrderBySpec {\r\n\t\t[name: string]: OrderBy;\r\n\t}\r\n\t\r\n\texport interface FieldSpec {\r\n\t\t[fieldName: string]: boolean;\r\n\t}\r\n\t\r\n\texport interface FindOpts {\r\n\t\tfields?: FieldSpec;\r\n\t\torderBy?: OrderBySpec;\r\n\t\toffset?: number;\r\n\t\tlimit?: number;\r\n\t\tcount?: boolean;\r\n\t}\r\n\t\r\n\texport class Table<Element, Mutator, Query> {\r\n\t\tspec: TableSpec<Element, Mutator, Query>;\r\n\t\tkey: KeyType;\r\n\t\r\n\t\tconstructor(spec: TableSpec<Element, Mutator, Query>) {\r\n\t\t\tthis.spec = spec;\r\n\t\t\tthis.key = tableKey(spec);\r\n\t\t}\r\n\t\r\n\t\tkeyValue(element: Element | Mutator): KeyType {\r\n\t\t\tverify(this.key in element, \"object does not have key field '%s' set: %s\", this.key, element);\r\n\t\t\treturn element[this.key];\r\n\t\t}\r\n\t\r\n\t\tfind: (query: Query, opts?: FindOpts) => Promise<Element[]>;\r\n\t\tadd: (...changes: TableChange<Element, Mutator>[]) => Promise<any>;\r\n\t}\r\n\t\r\n\t\r\n\texport function tableKey(spec: TableSpec<any, any, any>): KeyType {\r\n\t\tlet key: KeyType = null;\r\n\t\tfor (let name in spec.columns) {\r\n\t\t\tlet column = spec.columns[name];\r\n\t\t\tverify(column, \"column '%s' is not in %s\", name, spec);\r\n\t\t\tif (column.isKey) {\r\n\t\t\t\tverify(!key, \"Table %s has more than one key- %s and %s\", spec.name, key, name);\r\n\t\t\t\tkey = name;\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\tverify(key, \"Table %s does not have a key\", spec.name);\r\n\t\treturn key;\r\n\t}\r\n}\r\n","///<reference path=\"./Mutate\"/>\r\n///<reference path=\"./Column\"/>\r\n///<reference path=\"./Database\"/>\r\n///<reference path=\"./Table\"/>\r\n///<reference path=\"./Text\"/>\r\n///<reference path=\"./assign\"/>\r\n///<reference path=\"./verify\"/>\r\n\"use strict\";\r\n\r\nnamespace Updraft {\r\n\r\n\tfunction startsWith(str: string, val: string) {\r\n\t\treturn str.lastIndexOf(val, 0) === 0;\r\n\t}\r\n\t\r\n\texport type TableSpecAny = TableSpec<any, any, any>;\r\n\texport type TableAny = Table<any, any, any>;\r\n\t\r\n\texport interface CreateStoreParams {\r\n\t\tdb: DbWrapper;\r\n\t}\r\n\t\r\n\texport interface Schema {\r\n\t\t[table: string]: TableSpecAny;\r\n\t}\r\n\t\r\n\tinterface Resolver<T> {\r\n\t\t(param: T): void;\r\n\t}\r\n\t\r\n\tinterface SqliteMasterRow {\r\n\t\ttype: string;\r\n\t\tname: string;\r\n\t\ttbl_name: string;\r\n\t\tsql: string;\r\n\t}\r\n\t\r\n\tinterface BaselineInfo<Element> {\r\n\t\telement: Element;\r\n\t\ttime: number;\r\n\t\trowid: number;\r\n\t}\r\n\t\r\n\tinterface ChangeTableRow {\r\n\t\tkey?: KeyType;\r\n\t\ttime?: number;\r\n\t\tchange?: string;\r\n\t}\r\n\t\r\n\tinterface SetTableRow {\r\n\t\tkey?: KeyType;\r\n\t\ttime?: number;\r\n\t\tvalue?: string;\r\n\t}\r\n\r\n\tinterface KeyValue {\r\n\t\tkey?: string;\r\n\t\tvalue?: any; // stored as JSON\r\n\t}\r\n\t\r\n\tinterface KeyValueMap {\r\n\t\t[key: string]: any;\r\n\t}\r\n\r\n\tconst ROWID = \"rowid\";\r\n\tconst COUNT = \"COUNT(*)\";\r\n\tconst internal_prefix = \"updraft_\";\r\n\tconst internal_column_deleted = internal_prefix + \"deleted\";\r\n\tconst internal_column_time = internal_prefix + \"time\";\r\n\tconst internal_column_latest = internal_prefix + \"latest\";\r\n\tconst internal_column_composed = internal_prefix + \"composed\";\r\n\tconst internalColumn: ColumnSet = {};\r\n\tinternalColumn[internal_column_deleted] = Column.Bool();\r\n\tinternalColumn[internal_column_time] = Column.Int().Key();\r\n\tinternalColumn[internal_column_latest] = Column.Bool();\r\n\tinternalColumn[internal_column_composed] = Column.Bool();\r\n\t\r\n\tconst deleteRow_action = { [internal_column_deleted]: { $set: true } };\r\n\t\r\n\tconst keyValueTableSpec: TableSpec<KeyValue, any, any> = {\r\n\t\tname: internal_prefix + \"keyValues\",\r\n\t\tcolumns: {\r\n\t\t\tkey: Column.String().Key(),\r\n\t\t\tvalue: Column.JSON(),\r\n\t\t}\r\n\t};\r\n\t\r\n\texport class Store {\r\n\t\tprivate params: CreateStoreParams;\r\n\t\tprivate tables: TableSpecAny[];\r\n\t\tprivate db: DbWrapper;\r\n\t\tprivate keyValueTable: Table<KeyValue, any, any>;\r\n\t\tprivate keyValues: KeyValueMap;\r\n\t\r\n\t\tconstructor(params: CreateStoreParams) {\r\n\t\t\tthis.params = params;\r\n\t\t\tthis.tables = [];\r\n\t\t\tthis.db = null;\r\n\t\t\tverify(this.params.db, \"must pass a DbWrapper\");\r\n\t\t\tthis.keyValueTable = this.createTable<KeyValue, any, any>(keyValueTableSpec);\r\n\t\t}\r\n\t\r\n\t\tcreateTable<Element, Mutator, Query>(tableSpec: TableSpec<Element, Mutator, Query>): Table<Element, Mutator, Query> {\r\n\t\t\tverify(!this.db, \"createTable() can only be added before open()\");\r\n\t\t\tif (tableSpec !== keyValueTableSpec) {\r\n\t\t\t\tverify(!startsWith(tableSpec.name, internal_prefix), \"table name %s cannot begin with %s\", tableSpec.name, internal_prefix);\r\n\t\t\t}\r\n\t\t\tfor (let col in tableSpec.columns) {\r\n\t\t\t\tverify(!startsWith(col, internal_prefix), \"table %s column %s cannot begin with %s\", tableSpec.name, col, internal_prefix);\r\n\t\t\t}\r\n\t\t\tlet table = new Table<Element, Mutator, Query>(tableSpec);\r\n\t\t\ttable.add = (...changes: TableChange<Element, Mutator>[]): Promise<any> => {\r\n\t\t\t\tchanges.forEach(change => change.table = table);\r\n\t\t\t\treturn this.add(...changes);\r\n\t\t\t};\r\n\t\t\ttable.find = (query: Query, opts?: FindOpts): Promise<Element[]> => {\r\n\t\t\t\treturn this.find(table, query, opts);\r\n\t\t\t};\r\n\t\t\tthis.tables.push(...createInternalTableSpecs(table));\r\n\t\t\tthis.tables.push(createChangeTableSpec(table));\r\n\t\t\treturn table;\r\n\t\t}\r\n\t\r\n\t\topen(): Promise<any> {\r\n\t\t\tverify(!this.db, \"open() called more than once!\");\r\n\t\t\tverify(this.tables.length, \"open() called before any tables were added\");\r\n\t\r\n\t\t\tthis.db = this.params.db;\r\n\t\r\n\t\t\treturn Promise.resolve()\r\n\t\t\t\t.then(() => this.readSchema())\r\n\t\t\t\t.then((schema) => {\r\n\t\t\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\t\t\tlet i = 0;\r\n\t\t\t\t\t\tlet act = (transaction: DbTransaction) => {\r\n\t\t\t\t\t\t\tif (i < this.tables.length) {\r\n\t\t\t\t\t\t\t\tlet table = this.tables[i];\r\n\t\t\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\t\t\tthis.syncTable(transaction, schema, table, act);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tthis.loadKeyValues(transaction, () => {\r\n                  transaction.commit(resolve);\r\n                });\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tthis.db.transaction(act, reject);\r\n\t\t\t\t\t});\r\n\t\t\t\t})\r\n\t\t\t\t;\r\n\t\t}\r\n\t\r\n\t\treadSchema(): Promise<Schema> {\r\n\t\t\tverify(this.db, \"readSchema(): not opened\");\r\n\t\t\t\r\n\t\t\treturn new Promise((resolve: Resolver<Schema>, reject: DbErrorCallback) => {\r\n\t\t\t\tthis.db.readTransaction((transaction: DbTransaction) => {\r\n\t\t\t\t\treturn transaction.executeSql(\"SELECT name, tbl_name, type, sql FROM sqlite_master\", [], (tx: DbTransaction, resultSet: any[]) => {\r\n\t\t\t\t\t\tlet schema: Schema = {};\r\n\t\t\t\t\t\tfor (let i = 0; i < resultSet.length; i++) {\r\n\t\t\t\t\t\t\tlet row = <SqliteMasterRow>resultSet[i];\r\n\t\t\t\t\t\t\tif (row.name[0] != \"_\" && !startsWith(row.name, \"sqlite\")) {\r\n\t\t\t\t\t\t\t\tswitch (row.type) {\r\n\t\t\t\t\t\t\t\t\tcase \"table\":\r\n\t\t\t\t\t\t\t\t\t\tschema[row.name] = tableFromSql(row.name, row.sql);\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"index\":\r\n\t\t\t\t\t\t\t\t\t\tlet index = indexFromSql(row.sql);\r\n\t\t\t\t\t\t\t\t\t\tif (index.length == 1) {\r\n\t\t\t\t\t\t\t\t\t\t\tlet col = index[0];\r\n\t\t\t\t\t\t\t\t\t\t\tverify(row.tbl_name in schema, \"table %s used by index %s should have been returned first\", row.tbl_name, row.name);\r\n\t\t\t\t\t\t\t\t\t\t\tverify(col in schema[row.tbl_name].columns, \"table %s does not have column %s used by index %s\", row.tbl_name, col, row.name);\r\n\t\t\t\t\t\t\t\t\t\t\tschema[row.tbl_name].columns[col].isIndex = true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tschema[row.tbl_name].indices.push(index);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t// case \"trigger\":\r\n\t\t\t\t\t\t\t\t\t// \tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\ttransaction.commit(() => resolve(schema));\r\n\t\t\t\t\t});\r\n\t\t\t\t}, reject);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tprivate syncTable(transaction: DbTransaction, schema: Schema, spec: TableSpecAny, nextCallback: DbTransactionCallback): void {\r\n\t\t\tif (spec.name in schema) {\r\n\t\t\t\tlet oldColumns = schema[spec.name].columns;\r\n\t\t\t\tlet newColumns = spec.columns;\r\n\t\t\t\tlet recreateTable: boolean = false;\r\n\t\r\n\t\t\t\tfor (let colName in oldColumns) {\r\n\t\t\t\t\tif (!(colName in newColumns)) {\r\n\t\t\t\t\t\trecreateTable = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tlet oldCol = oldColumns[colName];\r\n\t\t\t\t\tlet newCol = newColumns[colName];\r\n\t\t\t\t\tif (!Column.equal(oldCol, newCol)) {\r\n\t\t\t\t\t\trecreateTable = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tlet renamedColumns = shallowCopy(spec.renamedColumns) || {};\r\n\t\t\t\tfor (let colName in renamedColumns) {\r\n\t\t\t\t\tif (colName in oldColumns) {\r\n\t\t\t\t\t\trecreateTable = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tdelete renamedColumns[colName];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tlet addedColumns: ColumnSet = {};\r\n\t\t\t\tif (!recreateTable) {\r\n\t\t\t\t\tfor (let colName of selectableColumns(spec, newColumns)) {\r\n\t\t\t\t\t\tif (!(colName in oldColumns)) {\r\n\t\t\t\t\t\t\taddedColumns[colName] = newColumns[colName];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif (recreateTable) {\r\n\t\t\t\t\t// recreate and migrate data\r\n\t\r\n\t\t\t\t\tlet tempTableName = \"temp_\" + spec.name;\r\n\t\t\t\t\tlet changeTableName = getChangeTableName(spec.name);\r\n\t\r\n\t\t\t\t\tdropTable(transaction, tempTableName, (tx2: DbTransaction) => {\r\n\t\t\t\t\t\tcreateTable(tx2, tempTableName, spec.columns, (tx3: DbTransaction) => {\r\n\t\t\t\t\t\t\tcopyData(tx3, spec.name, tempTableName, oldColumns, newColumns, renamedColumns, (tx4: DbTransaction) => {\r\n\t\t\t\t\t\t\t\tdropTable(tx4, spec.name, (tx5: DbTransaction) => {\r\n\t\t\t\t\t\t\t\t\trenameTable(tx5, tempTableName, spec.name, (tx6: DbTransaction) => {\r\n\t\t\t\t\t\t\t\t\t\tmigrateChangeTable(tx6, changeTableName, oldColumns, newColumns, renamedColumns, (tx7: DbTransaction) => {\r\n\t\t\t\t\t\t\t\t\t\t\tcreateIndices(tx7, schema, spec, true, nextCallback);\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse if (!isEmpty(addedColumns)) {\r\n\t\t\t\t\t// alter table, add columns\r\n\t\t\t\t\tlet stmts: DbStatement[] = [];\r\n\t\t\t\t\tObject.keys(addedColumns).forEach((colName) => {\r\n\t\t\t\t\t\tlet col: Column = spec.columns[colName];\r\n\t\t\t\t\t\tlet columnDecl = colName + \" \" + Column.sql(col);\r\n\t\t\t\t\t\tstmts.push({sql: \"ALTER TABLE \" + spec.name + \" ADD COLUMN \" + columnDecl});\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tDbExecuteSequence(transaction, stmts, (tx2: DbTransaction) => {\r\n\t\t\t\t\t\tcreateIndices(tx2, schema, spec, false, nextCallback);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// no table modification is required\r\n\t\t\t\t\tcreateIndices(transaction, schema, spec, false, nextCallback);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// create new table\r\n\t\t\t\tcreateTable(transaction, spec.name, spec.columns, (tx2: DbTransaction) => {\r\n\t\t\t\t\tcreateIndices(tx2, schema, spec, true, nextCallback);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tprivate loadKeyValues(transaction: DbTransaction, nextCallback: DbTransactionCallback): void {\r\n\t\t\treturn runQuery(transaction, this.keyValueTable, {}, undefined, undefined, (tx2: DbTransaction, rows: KeyValue[]) => {\r\n\t\t\t\tthis.keyValues = {};\r\n\t\t\t\trows.forEach((row: KeyValue) => {\r\n\t\t\t\t\tthis.keyValues[row.key] = row.value;\r\n\t\t\t\t});\r\n\t\t\t\tnextCallback(tx2);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tgetValue(key: string): any {\r\n\t\t\treturn this.keyValues[key];\r\n\t\t}\r\n\t\t\r\n\t\tsetValue(key: string, value: any): Promise<any> {\r\n\t\t\tthis.keyValues[key] = value;\r\n\t\t\treturn this.keyValueTable.add({save: {key, value}});\r\n\t\t}\r\n\t\r\n\t\tadd(...changes: TableChange<any, any>[]): Promise<any> {\r\n\t\t\tverify(this.db, \"apply(): not opened\");\r\n\t\t\t\r\n\t\t\tinterface ResolveKey {\r\n\t\t\t\ttable: TableAny;\r\n\t\t\t\tkey: KeyType;\r\n\t\t\t}\r\n\r\n      interface TableKeySet {\r\n        table: TableAny;\r\n        keys: Set<KeyType>;\r\n        duplicateKeys: Set<KeyType>;\r\n        existingKeys: Set<KeyType>;\r\n      }\r\n\r\n\t\t\treturn new Promise((promiseResolve, reject) => {\r\n        const tableKeySet: TableKeySet[] = [];\r\n        changes.forEach(change => {\r\n          if (change.save) {\r\n            const key = change.table.keyValue(change.save);\r\n            let keys: Set<KeyType> = null;\r\n            let duplicateKeys: Set<KeyType> = null;\r\n            for (let j = 0; j < tableKeySet.length; j++) {\r\n              if (tableKeySet[j].table === change.table) {\r\n                keys = tableKeySet[j].keys;\r\n                break;\r\n              }\r\n            }\r\n            if (keys == null) {\r\n              keys = new Set<KeyType>();\r\n              duplicateKeys = new Set<KeyType>();\r\n              tableKeySet.push({ table: change.table, keys, duplicateKeys, existingKeys: new Set<KeyType>() });\r\n            }\r\n            if (keys.has(key)) {\r\n              duplicateKeys.add(key);\r\n            }\r\n            keys.add(key);\r\n          }\r\n        });\r\n        let findIdx = 0;\r\n \t\t\t\tlet changeIdx = 0;\r\n\t\t\t\tlet toResolve = new Set<ResolveKey>();\r\n        let findExistingIds: DbTransactionCallback = null;\r\n\t\t\t\tlet insertNextChange: DbTransactionCallback = null;\r\n\t\t\t\tlet resolveChanges: DbTransactionCallback = null;\r\n\r\n        findExistingIds = (transaction: DbTransaction) => {\r\n          if (findIdx < tableKeySet.length) {\r\n            const table = tableKeySet[findIdx].table;\r\n            const keys = tableKeySet[findIdx].keys;\r\n            const duplicateKeys = tableKeySet[findIdx].duplicateKeys;\r\n            const existingKeys = tableKeySet[findIdx].existingKeys;\r\n            findIdx++;\r\n            const notDuplicatedValues: KeyValue[] = [];\r\n            keys.forEach(key => {\r\n              if (!duplicateKeys.has(key)) {\r\n                notDuplicatedValues.push(key);\r\n              }\r\n            });\r\n            const query: any = { [table.key]: { $in: notDuplicatedValues } };\r\n            const opts: FindOpts = { fields: { [table.key]: true } };\r\n            runQuery(transaction, table, query, opts, null, (tx: DbTransaction, rows: any[]) => {\r\n              for (let row of rows) {\r\n                existingKeys.add(row[table.key]);\r\n              }\r\n              findExistingIds(transaction);\r\n            });\r\n          }\r\n          else {\r\n            insertNextChange(transaction);\r\n          }\r\n        };\r\n\r\n\t\t\t\tinsertNextChange = (transaction: DbTransaction) => {\r\n\t\t\t\t\tif (changeIdx < changes.length) {\r\n\t\t\t\t\t\tlet change = changes[changeIdx];\r\n\t\t\t\t\t\tchangeIdx++;\r\n\t\t\t\t\t\tconst table = change.table;\r\n\t\t\t\t\t\tverify(table, \"change must specify table\");\r\n\t\t\t\t\t\tlet changeTable = getChangeTableName(table.spec.name);\r\n\t\t\t\t\t\tlet time = change.time || Date.now();\r\n\t\t\t\t\t\tverify((change.save ? 1 : 0) + (change.change ? 1 : 0) + (change.delete ? 1 : 0) === 1, \"change (%s) must specify exactly one action at a time\", change);\r\n            let existingKeys: Set<KeyType> = null;\r\n            tableKeySet.some((tk): boolean => {\r\n              if (tk.table === table) {\r\n                existingKeys = tk.existingKeys;\r\n                return true;\r\n              }\r\n              else {\r\n                /* istanbul ignore next */\r\n                return false;\r\n              }\r\n            });\r\n\r\n\t\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\t\tif (change.save) {\r\n\t\t\t\t\t\t\t// append internal column values\r\n\t\t\t\t\t\t\tlet element = assign(\r\n\t\t\t\t\t\t\t\t{},\r\n\t\t\t\t\t\t\t\tchange.save,\r\n\t\t\t\t\t\t\t\t{ [internal_column_time]: time }\r\n\t\t\t\t\t\t\t);\r\n             const key = table.keyValue(element);\r\n             // optimization: don't resolve elements that aren't already in the db- just mark them as latest\r\n              if (existingKeys.has(key)) {\r\n                toResolve.add({ table, key });\r\n              }\r\n              else {\r\n                element[internal_column_latest] = true;\r\n              }\r\n\t\t\t\t\t\t\tinsertElement(transaction, table, element, insertNextChange);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (change.change || change.delete) {\r\n\t\t\t\t\t\t\tlet changeRow: ChangeTableRow = {\r\n\t\t\t\t\t\t\t\tkey: null,\r\n\t\t\t\t\t\t\t\ttime: time,\r\n\t\t\t\t\t\t\t\tchange: null\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tif (change.change) {\r\n\t\t\t\t\t\t\t\t// store changes\r\n\t\t\t\t\t\t\t\tlet mutator = shallowCopy(change.change);\r\n\t\t\t\t\t\t\t\tchangeRow.key = table.keyValue(mutator);\r\n\t\t\t\t\t\t\t\tdelete mutator[table.key];\r\n\t\t\t\t\t\t\t\tchangeRow.change = serializeChange(mutator, table.spec);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t// mark deleted\r\n\t\t\t\t\t\t\t\tchangeRow.key = change.delete;\r\n\t\t\t\t\t\t\t\tchangeRow.change = serializeChange(deleteRow_action, table.spec);\r\n\t\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\t\t// insert into change table\r\n\t\t\t\t\t\t\tlet columns = Object.keys(changeRow);\r\n\t\t\t\t\t\t\tlet values: any[] = columns.map(k => changeRow[k]);\r\n\t\t\t\t\t\t\ttoResolve.add({table, key: changeRow.key});\r\n\t\t\t\t\t\t\tinsert(transaction, changeTable, columns, values, insertNextChange);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t/* istanbul ignore next */\r\n\t\t\t\t\t\t\tthrow new Error(\"no operation specified for change- should be one of save, change, or delete\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tresolveChanges(transaction);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tresolveChanges = (transaction: DbTransaction) => {\r\n\t\t\t\t\tlet j = 0;\r\n\t\t\t\t\tlet toResolveArray: ResolveKey[] = [];\r\n\t\t\t\t\ttoResolve.forEach((keyValue: ResolveKey) => toResolveArray.push(keyValue));\r\n\t\t\t\t\tlet resolveNextChange = (tx2: DbTransaction) => {\r\n\t\t\t\t\t\tif (j < toResolveArray.length) {\r\n\t\t\t\t\t\t\tlet keyValue = toResolveArray[j];\r\n\t\t\t\t\t\t\tj++;\r\n\t\t\t\t\t\t\tresolve(tx2, keyValue.table, keyValue.key, resolveNextChange);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ttx2.commit(promiseResolve);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tresolveNextChange(transaction);\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tthis.db.transaction(findExistingIds, reject);\r\n\t\t\t});\r\n\t\t}\r\n\t\r\n\t\tfind<Element, Query>(table: Table<Element, any, Query>, query: Query, opts?: FindOpts): Promise<Element[]> {\r\n\t\t\treturn new Promise((resolve: Resolver<Element[]>, reject: DbErrorCallback) => {\r\n\t\t\t\tthis.db.readTransaction((transaction: DbTransaction) => {\r\n\t\t\t\t\tlet q = assign({}, query, {\r\n\t\t\t\t\t\t[internal_column_deleted]: false,\r\n\t\t\t\t\t\t[internal_column_latest]: true,\r\n\t\t\t\t\t});\r\n\t\t\t\t\trunQuery(transaction, table, q, opts, table.spec.clazz, (tx2: DbTransaction, results: Element[]) => {\r\n            tx2.commit(() => resolve(results));\r\n\t\t\t\t\t});\r\n\t\t\t\t}, reject);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction getChangeTableName(name: string): string {\r\n\t\treturn internal_prefix + \"changes_\" + name;\r\n\t}\r\n\t\r\n\tfunction getSetTableName(tableName: string, col: string): string {\r\n\t\treturn internal_prefix + \"set_\" + tableName + \"_\" + col;\r\n\t}\r\n\t\r\n\tfunction buildIndices(spec: TableSpecAny) {\r\n\t\tspec.indices = shallowCopy(spec.indices) || [];\r\n\t\tfor (let col in spec.columns) {\r\n\t\t\tif (spec.columns[col].isIndex) {\r\n\t\t\t\tspec.indices.push([col]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction createInternalTableSpecs(table: Table<any, any, any>): TableSpecAny[] {\r\n\t\tlet newSpec = shallowCopy(table.spec);\r\n\t\tnewSpec.columns = shallowCopy(table.spec.columns);\r\n\t\tfor (let col in internalColumn) {\r\n\t\t\tverify(!table.spec.columns[col], \"table %s cannot have reserved column name %s\", table.spec.name, col);\r\n\t\t\tnewSpec.columns[col] = internalColumn[col];\r\n\t\t}\r\n\t\tbuildIndices(newSpec);\r\n\t\treturn [newSpec, ...createSetTableSpecs(newSpec, verifyGetValue(newSpec.columns, table.key))];\r\n\t}\r\n\t\r\n\tfunction createChangeTableSpec(table: Table<any, any, any>): TableSpecAny {\r\n\t\tlet newSpec = <TableSpecAny>{\r\n\t\t\tname: getChangeTableName(table.spec.name),\r\n\t\t\tcolumns: {\r\n\t\t\t\tkey: Column.Int().Key(),\r\n\t\t\t\ttime: Column.DateTime().Key(),\r\n\t\t\t\tchange: Column.JSON(),\r\n\t\t\t}\r\n\t\t};\r\n\t\tbuildIndices(newSpec);\r\n\t\treturn newSpec;\r\n\t}\r\n\t\r\n\tfunction createSetTableSpecs(spec: TableSpecAny, keyColumn: Column): TableSpecAny[] {\r\n\t\tlet newSpecs: TableSpecAny[] = [];\r\n\t\tfor (let col in spec.columns) {\r\n\t\t\tlet column = spec.columns[col];\r\n\t\t\tif (column.type == ColumnType.set) {\r\n\t\t\t\tlet newSpec = <TableSpecAny>{\r\n\t\t\t\t\tname: getSetTableName(spec.name, col),\r\n\t\t\t\t\tcolumns: {\r\n\t\t\t\t\t\tkey: keyColumn,\r\n\t\t\t\t\t\tvalue: new Column(column.element.type).Key(),\r\n\t\t\t\t\t\ttime: Column.Int().Key()\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tbuildIndices(newSpec);\r\n\t\t\t\tnewSpecs.push(newSpec);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn newSpecs;\r\n\t}\r\n\t\r\n\tfunction tableFromSql(name: string, sql: string): TableSpecAny {\r\n\t\tlet table = <TableSpecAny>{ name: name, columns: {}, indices: [], triggers: {} };\r\n\t\tlet matches = sql.match(/\\((.*)\\)/);\r\n\t\t/* istanbul ignore else */\r\n\t\tif (matches) {\r\n\t\t\tlet pksplit: string[] = matches[1].split(/PRIMARY KEY/i);\r\n\t\t\tlet fields = pksplit[0].split(\",\");\r\n\t\t\tfor (let i = 0; i < fields.length; i++) {\r\n\t\t\t\tverify(!fields[i].match(/^\\s*(primary|foreign)\\s+key/i), \"unexpected column modifier (primary or foreign key) on %s\", fields[i]);\r\n\t\t\t\tlet quotedName = /\"(.+)\"\\s+(.*)/;\r\n\t\t\t\tlet unquotedName = /(\\w+)\\s+(.*)/;\r\n\t\t\t\tlet parts = fields[i].match(quotedName);\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (!parts) {\r\n\t\t\t\t\tparts = fields[i].match(unquotedName);\r\n\t\t\t\t}\r\n\t\t\t\tif (parts) {\r\n\t\t\t\t\ttable.columns[parts[1]] = Column.fromSql(parts[2]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (pksplit.length > 1) {\r\n\t\t\t\tlet pk = pksplit[1].match(/\\((.*)\\)/);\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (pk) {\r\n\t\t\t\t\tlet keys = pk[1].split(\",\");\r\n\t\t\t\t\tfor (let i = 0; i < keys.length; i++) {\r\n\t\t\t\t\t\tlet key = keys[i].trim();\r\n\t\t\t\t\t\ttable.columns[key].isKey = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn table;\r\n\t}\r\n\t\r\n\tfunction indexFromSql(sql: string): string[] {\r\n\t\tlet regex = /\\((.*)\\)/;\r\n\t\tlet matches = regex.exec(sql);\r\n\t\tverify(matches, \"bad format on index- couldn't determine column names from sql: %s\", sql);\r\n\t\treturn matches[1].split(\",\").map((x: string) => x.trim());\r\n\t}\r\n\t\r\n\tfunction createTable(transaction: DbTransaction, name: string, columns: ColumnSet, nextCallback: DbTransactionCallback): void {\r\n\t\tlet cols: string[] = [];\r\n\t\tlet pk: string[] = [];\r\n\t\tfor (let col in columns) {\r\n\t\t\tlet attrs: Column = columns[col];\r\n\t\t\tlet decl: string;\r\n\t\t\tswitch (attrs.type) {\r\n\t\t\t\tcase ColumnType.set:\r\n\t\t\t\t\t// ignore this column; values go into a separate table\r\n\t\t\t\t\tverify(!attrs.isKey, \"table %s cannot have a key on set column %s\", name, col);\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tdecl = col + \" \" + Column.sql(attrs);\r\n\t\t\t\t\tcols.push(decl);\r\n\t\t\t\t\tif (attrs.isKey) {\r\n\t\t\t\t\t\tpk.push(col);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tverify(pk.length, \"table %s has no keys\", name);\r\n\t\tcols.push(\"PRIMARY KEY(\" + pk.join(\", \")  + \")\");\r\n\t\ttransaction.executeSql(\"CREATE TABLE \" + name + \" (\" + cols.join(\", \") + \")\", [], nextCallback);\r\n\t}\r\n\t\r\n\tfunction renameTable(transaction: DbTransaction, oldName: string, newName: string, nextCallback: DbTransactionCallback): void {\r\n\t\ttransaction.executeSql(\"ALTER TABLE \" + oldName + \" RENAME TO \" + newName, [], nextCallback);\r\n\t}\r\n\r\n\tfunction dropTable(transaction: DbTransaction, name: string, nextCallback: DbTransactionCallback): void {\r\n\t\ttransaction.executeSql(\"DROP TABLE IF EXISTS \" + name, [], nextCallback);\r\n\t}\r\n\t\r\n\tfunction createIndices(transaction: DbTransaction, schema: Schema, spec: TableSpecAny, force: boolean, nextCallback: DbTransactionCallback): void {\r\n\t\tlet indicesEqual = function(a: string[], b: string[]) {\r\n\t\t\tif (a.length != b.length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tfor (let i = 0; i < a.length; i++) {\r\n\t\t\t\tif (a[i] != b[i]) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\tlet oldIndices = (spec.name in schema) ? schema[spec.name].indices : [];\r\n\t\tlet newIndices = spec.indices;\r\n\t\tlet getIndexName = function(indices: string[]): string {\r\n\t\t\t\treturn \"index_\" + spec.name + \"__\" + indices.join(\"_\");\r\n\t\t};\r\n\r\n\t\tlet stmts: DbStatement[] = [];\r\n\t\toldIndices.forEach((value: string[], i: number) => {\r\n\t\t\tlet drop = true;\r\n\t\r\n\t\t\tfor (let j = 0; j < newIndices.length; j++) {\r\n\t\t\t\tif (indicesEqual(oldIndices[i], newIndices[j])) {\r\n\t\t\t\t\tdrop = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\tif (drop) {\r\n\t\t\t\tstmts.push({ sql: \"DROP INDEX IF EXISTS \" + getIndexName(oldIndices[i]) });\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tnewIndices.forEach((value: string[], j: number) => {\r\n\t\t\tlet create = true;\r\n\t\r\n\t\t\tfor (let i = 0; i < oldIndices.length; i++) {\r\n\t\t\t\tif (indicesEqual(oldIndices[i], newIndices[j])) {\r\n\t\t\t\t\tcreate = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\tif (create || force) {\r\n\t\t\t\tlet index = newIndices[j];\r\n\t\t\t\tstmts.push({ sql: \"CREATE INDEX IF NOT EXISTS \" + getIndexName(index) + \" ON \" + spec.name + \" (\" + index.join(\", \") + \")\" });\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tDbExecuteSequence(transaction, stmts, nextCallback);\r\n\t}\r\n\t\r\n\tfunction copyData(transaction: DbTransaction, oldName: string, newName: string, oldColumns: ColumnSet, newColumns: ColumnSet, renamedColumns: RenamedColumnSet, nextCallback: DbTransactionCallback): void {\r\n\t\tlet oldTableColumns = Object.keys(oldColumns).filter(col => (col in newColumns) || (col in renamedColumns));\r\n\t\tlet newTableColumns = oldTableColumns.map(col => (col in renamedColumns) ? renamedColumns[col] : col);\r\n\t\t/* istanbul ignore else */\r\n\t\tif (oldTableColumns.length && newTableColumns.length) {\r\n\t\t\tlet stmt = \"INSERT INTO \" + newName + \" (\" + newTableColumns.join(\", \") + \") \";\r\n\t\t\tstmt += \"SELECT \" + oldTableColumns.join(\", \") + \" FROM \" + oldName + \";\";\r\n\t\t\ttransaction.executeSql(stmt, [], nextCallback);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tnextCallback(transaction);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction migrateChangeTable(transaction: DbTransaction, changeTableName: string, oldColumns: ColumnSet, newColumns: ColumnSet, renamedColumns: RenamedColumnSet, nextCallback: DbTransactionCallback): void {\r\n\t\tlet deletedColumns = Object.keys(oldColumns).filter(col => !(col in newColumns) && !(col in renamedColumns));\r\n\t\t/* istanbul ignore else */\r\n\t\tif (!isEmpty(renamedColumns) || deletedColumns) {\r\n\t\t\ttransaction.each(\r\n\t\t\t\t\"SELECT \" + ROWID + \", change\"\r\n\t\t\t\t+ \" FROM \" + changeTableName,\r\n\t\t\t\t[],\r\n\t\t\t\t(selectChangeTransaction: DbTransaction, row: any) => {\r\n\t\t\t\t\tlet change = fromText(row.change);\r\n\t\t\t\t\tlet changed = false;\r\n\t\t\t\t\tfor (let oldCol in renamedColumns) {\r\n\t\t\t\t\t\tlet newCol = renamedColumns[oldCol];\r\n\t\t\t\t\t\tif (oldCol in change) {\r\n\t\t\t\t\t\t\tchange[newCol] = change[oldCol];\r\n\t\t\t\t\t\t\tdelete change[oldCol];\r\n\t\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (let oldCol of deletedColumns) {\r\n\t\t\t\t\t\tif (oldCol in change) {\r\n\t\t\t\t\t\t\tdelete change[oldCol];\r\n\t\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (changed) {\r\n\t\t\t\t\t\tif (!isEmpty(change)) {\r\n\t\t\t\t\t\t\tselectChangeTransaction.executeSql(\r\n\t\t\t\t\t\t\t\t\"UPDATE \" + changeTableName\r\n\t\t\t\t\t\t\t\t+ \" SET change=?\"\r\n\t\t\t\t\t\t\t\t+ \" WHERE \" + ROWID + \"=?\",\r\n\t\t\t\t\t\t\t\t[toText(change), row[ROWID]],\r\n\t\t\t\t\t\t\t\t() => {}\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tselectChangeTransaction.executeSql(\r\n\t\t\t\t\t\t\t\t\"DELETE FROM \" + changeTableName\r\n\t\t\t\t\t\t\t\t+ \" WHERE \" + ROWID + \"=?\",\r\n\t\t\t\t\t\t\t\t[row[ROWID]],\r\n\t\t\t\t\t\t\t\t() => {}\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tnextCallback\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction verifyGetValue(element: any, field: string | number): any {\r\n\t\tverify(field in element, \"element does not contain field %s: %s\", field, element);\r\n\t\treturn element[field];\r\n\t}\r\n\t\r\n\tfunction insert(transaction: DbTransaction, tableName: string, columns: string[], values: any[], nextCallback: DbTransactionCallback): void {\r\n\t\tlet questionMarks = values.map(v => \"?\");\r\n\t\tverify(columns.indexOf(ROWID) == -1, \"should not insert with rowid column\");\r\n\t\ttransaction.executeSql(\"INSERT OR REPLACE INTO \" + tableName + \" (\" + columns.join(\", \") + \") VALUES (\" + questionMarks.join(\", \") + \")\", values, nextCallback);\r\n\t}\r\n\t\r\n\tfunction insertElement<Element>(transaction: DbTransaction, table: Table<Element, any, any>, element: Element, nextCallback: DbTransactionCallback): void {\r\n\t\tlet keyValue = table.keyValue(element);\r\n\t\tlet columns = selectableColumns(table.spec, element);\r\n\t\tlet values: any[] = columns.map(col => serializeValue(table.spec, col, element[col]));\r\n\t\tlet time = verifyGetValue(element, internal_column_time);\r\n\t\t\r\n\t\tinsert(transaction, table.spec.name, columns, values, (tx2: DbTransaction) => {\r\n\t\t\t// insert set values\r\n\t\t\tlet stmts: DbStatement[] = [];\r\n\t\t\tObject.keys(table.spec.columns).forEach(function insertElementEachColumn(col: string) {\r\n\t\t\t\tlet column = table.spec.columns[col];\r\n\t\t\t\tif (column.type == ColumnType.set && (col in element)) {\r\n\t\t\t\t\tlet set: Set<any> = element[col];\r\n\t\t\t\t\tif (set.size) {\r\n\t\t\t\t\t\tset.forEach((value: any) => {\r\n\t\t\t\t\t\t\tstmts.push({\r\n\t\t\t\t\t\t\t\tsql: \"INSERT INTO \" + getSetTableName(table.spec.name, col)\r\n\t\t\t\t\t\t\t\t\t+ \" (time, key, value)\"\r\n\t\t\t\t\t\t\t\t\t+ \" VALUES (?, ?, ?)\",\r\n\t\t\t\t\t\t\t\tparams: [time, table.keyValue(element), column.element.serialize(value)]\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tDbExecuteSequence(tx2, stmts, nextCallback);\r\n\t\t});\r\n\t}\r\n\t\r\n\tfunction resolve<Element>(transaction: DbTransaction, table: Table<Element, any, any>, keyValue: KeyType, nextCallback: DbTransactionCallback): void {\r\n\t\tselectBaseline(transaction, table, keyValue, (tx2: DbTransaction, baseline: BaselineInfo<Element>) => {\r\n\t\t\tgetChanges(tx2, table, baseline, (tx3: DbTransaction, changes: ChangeTableRow[]) => {\r\n\t\t\t\tlet mutation = applyChanges(baseline, changes, table.spec);\r\n\t\t\t\tlet promises: Promise<any>[] = [];\r\n\t\t\t\tif (!mutation.isChanged) {\r\n\t\t\t\t\t// mark it as latest (and others as not)\r\n\t\t\t\t\tsetLatest(tx3, table, keyValue, baseline.rowid, nextCallback);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// invalidate old latest rows\r\n\t\t\t\t\t// insert new latest row\r\n\t\t\t\t\tlet element = mutate(mutation.element, {\r\n\t\t\t\t\t\t[internal_column_latest]: {$set: true},\r\n\t\t\t\t\t\t[internal_column_time]: {$set: mutation.time},\r\n\t\t\t\t\t\t[internal_column_composed]: {$set: true}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tinvalidateLatest(tx3, table, keyValue, (tx4: DbTransaction) => {\r\n\t\t\t\t\t\tinsertElement(tx4, table, element, nextCallback);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\t\r\n\tfunction runQuery<Element, Query>(transaction: DbTransaction, table: Table<Element, any, Query>, query: Query, opts: FindOpts, clazz: new (props: Element) => Element, resultCallback: DbCallback<number | Element[]>): void {\r\n\t\topts = opts || {};\r\n\t\r\n\t\tconst numericConditions = {\r\n\t\t\t$gt: \">\",\r\n\t\t\t$gte: \">=\",\r\n\t\t\t$lt: \"<\",\r\n\t\t\t$lte: \"<=\"\r\n\t\t};\r\n\t\r\n\t\tconst inCondition = keyOf({ $in: false });\r\n\t\tconst hasCondition = keyOf({ $has: false });\r\n\t\tconst hasAnyCondition = keyOf({ $hasAny: false });\r\n\t\tconst hasAllConditions = keyOf({ $hasAll: false });\r\n\t\r\n\t\tlet conditions: string[] = [];\r\n\t\tlet values: (string | number)[] = [];\r\n\t\r\n\t\tObject.keys(query).forEach((col: string) => {\r\n\t\t\tverify((col in table.spec.columns) || (col in internalColumn), \"attempting to query based on column '%s' not in schema (%s)\", col, table.spec.columns);\r\n\t\t\tlet column: Column = (col in internalColumn) ? internalColumn[col] : table.spec.columns[col];\r\n\t\t\tlet spec = query[col];\r\n\t\t\tlet found = false;\r\n\t\r\n\t\t\tfor (let condition in numericConditions) {\r\n\t\t\t\tif (hasOwnProperty.call(spec, condition)) {\r\n\t\t\t\t\tconditions.push(\"(\" + col + numericConditions[condition] + \"?)\");\r\n\t\t\t\t\tlet value = spec[condition];\r\n\t\t\t\t\tverify(parseInt(value, 10) == value, \"condition %s must have a numeric argument: %s\", condition, value);\r\n\t\t\t\t\tvalues.push(value);\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\tif (!found) {\r\n\t\t\t\tif (hasOwnProperty.call(spec, inCondition)) {\r\n\t\t\t\t\tverify(Array.isArray(spec[inCondition]), \"must be an array: %s\", spec[inCondition]);\r\n\t\t\t\t\tconditions.push(col + \" IN (\" + spec[inCondition].map((x: any) => \"?\").join(\", \") + \")\");\r\n\t\t\t\t\tlet inValues: any[] = spec[inCondition];\r\n\t\t\t\t\tinValues = inValues.map(val => column.serialize(val));\r\n\t\t\t\t\tvalues.push(...inValues);\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!found) {\r\n\t\t\t\tlet has = hasOwnProperty.call(spec, hasCondition);\r\n\t\t\t\tlet hasAny = hasOwnProperty.call(spec, hasAnyCondition);\r\n\t\t\t\tlet hasAll = hasOwnProperty.call(spec, hasAllConditions);\r\n\t\t\t\tif (has || hasAny || hasAll) {\r\n\t\t\t\t\tlet existsSetValues = function(setValues: any[], args: (string | number)[]): string {\r\n\t\t\t\t\t\tlet escapedValues = setValues.map(value => column.element.serialize(value));\r\n\t\t\t\t\t\targs.push(...escapedValues);\r\n\t\t\t\t\t\treturn \"EXISTS (\"\r\n\t\t\t\t\t\t\t+ \"SELECT 1 FROM \" + getSetTableName(table.spec.name, col)\r\n\t\t\t\t\t\t\t+ \" WHERE value IN (\" + setValues.map(x => \"?\").join(\", \") + \")\"\r\n\t\t\t\t\t\t\t+ \" AND key=\" + table.spec.name + \".\" + table.key\r\n\t\t\t\t\t\t\t+ \" AND time=\" + table.spec.name + \".\" + internal_column_time\r\n\t\t\t\t\t\t\t+ \")\";\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif (has) {\r\n\t\t\t\t\t\tlet hasValue = spec[hasCondition];\r\n\t\t\t\t\t\tverify(!Array.isArray(hasValue), \"must not be an array: %s\", hasValue);\r\n\t\t\t\t\t\tlet condition = existsSetValues([hasValue], values);\r\n\t\t\t\t\t\tconditions.push(condition);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (hasAny) {\r\n\t\t\t\t\t\tlet hasAnyValues: any[] = spec[hasAnyCondition];\r\n\t\t\t\t\t\tverify(Array.isArray(hasAnyValues), \"must be an array: %s\", hasAnyValues);\r\n\t\t\t\t\t\tlet condition = existsSetValues(hasAnyValues, values);\r\n\t\t\t\t\t\tconditions.push(condition);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (hasAll) {\r\n\t\t\t\t\t\tlet hasAllValues: any[] = spec[hasAllConditions];\r\n\t\t\t\t\t\tverify(Array.isArray(hasAllValues), \"must be an array: %s\", hasAllValues);\r\n\t\t\t\t\t\tfor (let hasValue of hasAllValues) {\r\n\t\t\t\t\t\t\tlet condition = existsSetValues([hasValue], values);\r\n\t\t\t\t\t\t\tconditions.push(condition);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\tif (!found) {\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (column.type == ColumnType.bool) {\r\n\t\t\t\t\tconditions.push(col + (spec ? \"!=0\" : \"=0\"));\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t}\r\n\t\t\t\telse if (typeof spec === \"number\" || typeof spec === \"string\") {\r\n\t\t\t\t\tconditions.push(\"(\" + col + \"=?)\");\r\n\t\t\t\t\tvalues.push(spec);\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t}\r\n        else if (typeof spec === \"object\") {\r\n          const likeKey = keyOf({ $like: false });\r\n          const notLikeKey = keyOf({ $notLike: false });\r\n  \t\t\t\t/* istanbul ignore else */\r\n          if (hasOwnProperty.call(spec, likeKey)) {\r\n            conditions.push(\"(\" + col + \" LIKE ? ESCAPE '\\\\')\");\r\n            values.push(spec[likeKey]);\r\n            found = true;\r\n          }\r\n          else if (hasOwnProperty.call(spec, notLikeKey)) {\r\n            conditions.push(\"(\" + col + \" NOT LIKE ? ESCAPE '\\\\')\");\r\n            values.push(spec[notLikeKey]);\r\n            found = true;\r\n          }\r\n        }\r\n\t\r\n\t\t\t\tverify(found, \"unknown query condition for %s: %s\", col, spec);\r\n\t\t\t}\r\n\t\t});\r\n\t\r\n\t\tlet fields: FieldSpec = assign({}, opts.fields || table.spec.columns, {[internal_column_time]: true});\r\n\t\tlet columns: string[] = selectableColumns(table.spec, fields);\r\n\t\tlet stmt = \"SELECT \" + (opts.count ? COUNT : columns.join(\", \"));\r\n\t\tstmt += \" FROM \" + table.spec.name;\r\n\t\tif (conditions.length) {\r\n\t\t\tstmt += \" WHERE \" + conditions.join(\" AND \");\r\n\t\t}\r\n\t\r\n\t\tif (opts.orderBy) {\r\n\t\t\tlet col = keyOf(opts.orderBy);\r\n\t\t\tlet order = opts.orderBy[col];\r\n\t\t\tstmt += \" ORDER BY \" + col + \" \" + (order == OrderBy.ASC ? \"ASC\" : \"DESC\");\r\n\t\t}\r\n\t\r\n\t\tif (opts.limit) {\r\n\t\t\tstmt += \" LIMIT \" + opts.limit;\r\n\t\t}\r\n\t\r\n\t\tif (opts.offset) {\r\n\t\t\tstmt += \" OFFSET \" + opts.offset;\r\n\t\t}\r\n\t\r\n\t\ttransaction.executeSql(stmt, values, (tx2: DbTransaction, rows: any[]) => {\r\n\t\t\tif (opts.count) {\r\n\t\t\t\tlet count = parseInt(rows[0][COUNT], 10);\r\n\t\t\t\tresultCallback(transaction, count);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tloadAllExternals(transaction, rows, table, opts.fields, (tx3: DbTransaction) => {\r\n\t\t\t\t\tlet results: Element[] = [];\r\n\t\t\t\t\tfor (let i = 0; i < rows.length; i++) {\r\n\t\t\t\t\t\tlet row = deserializeRow<Element>(table.spec, rows[i]);\r\n\t\t\t\t\t\tfor (let col in internalColumn) {\r\n\t\t\t\t\t\t\tif (!opts.fields || !(col in opts.fields)) {\r\n\t\t\t\t\t\t\t\tdelete row[col];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet obj = clazz ? new clazz(row) : row;\r\n\t\t\t\t\t\tresults.push(obj);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresultCallback(tx3, results);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\tfunction popValue<Element>(element: Element, field: string) {\r\n\t\tlet ret = verifyGetValue(element, field);\r\n\t\tdelete element[field];\r\n\t\treturn ret;\r\n\t}\r\n\t\r\n\tfunction selectBaseline<Element, Query>(transaction: DbTransaction, table: Table<Element, any, any>, keyValue: KeyType, resultCallback: DbCallback<BaselineInfo<Element>>): void {\r\n\t\tlet fieldSpec = <FieldSpec>{\r\n\t\t\t[ROWID]: true,\r\n\t\t\t[internal_column_time]: true,\r\n\t\t\t[internal_column_deleted]: true,\r\n\t\t};\r\n\t\tObject.keys(table.spec.columns).forEach(col => fieldSpec[col] = true);\r\n\t\r\n\t\tlet query = <Query>{\r\n\t\t\t[table.key]: keyValue,\r\n\t\t\t[internal_column_composed]: false\r\n\t\t};\r\n\t\r\n\t\tlet opts = <FindOpts>{\r\n\t\t\tfields: fieldSpec,\r\n\t\t\torderBy: { [internal_column_time]: OrderBy.DESC },\r\n\t\t\tlimit: 1\r\n\t\t};\r\n\t\r\n\t\trunQuery(transaction, table, query, opts, null, (tx2: DbTransaction, baselineResults: any[]) => {\r\n\t\t\tlet baseline: BaselineInfo<Element> = {\r\n\t\t\t\telement: <Element>{},\r\n\t\t\t\ttime: 0,\r\n\t\t\t\trowid: -1\r\n\t\t\t};\r\n\t\t\tif (baselineResults.length) {\r\n\t\t\t\tlet element = <Element>baselineResults[0];\r\n\t\t\t\tbaseline.element = element;\r\n\t\t\t\tbaseline.time = popValue(element, internal_column_time);\r\n\t\t\t\tbaseline.rowid = popValue(element, ROWID);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbaseline.element[table.key] = keyValue;\r\n\t\t\t}\r\n\t\t\tresultCallback(tx2, baseline);\r\n\t\t});\r\n\t}\r\n\t\r\n\tfunction loadAllExternals<Element>(transaction: DbTransaction, elements: Element[], table: Table<Element, any, any>, fields: FieldSpec, nextCallback: DbTransactionCallback) {\r\n\t\tlet i = 0;\r\n\t\tlet loadNextElement = (tx2: DbTransaction) => {\r\n\t\t\tif (i < elements.length) {\r\n\t\t\t\tlet element = elements[i];\r\n\t\t\t\ti++;\r\n\t\t\t\tloadExternals(tx2, table, element, fields, loadNextElement);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnextCallback(tx2);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tloadNextElement(transaction);\r\n\t};\r\n\t\r\n\tfunction loadExternals<Element>(transaction: DbTransaction, table: Table<Element, any, any>, element: any, fields: FieldSpec, nextCallback: DbTransactionCallback) {\r\n\t\tlet cols: string[] = Object.keys(table.spec.columns).filter(col => !fields || (col in fields && fields[col]));\r\n\t\tlet i = 0;\r\n\t\tlet loadNextField = (tx2: DbTransaction) => {\r\n\t\t\tif (i < cols.length) {\r\n\t\t\t\tlet col: string = cols[i];\r\n\t\t\t\ti++;\r\n\t\t\t\tlet column = table.spec.columns[col];\r\n\t\t\t\tif (column.type == ColumnType.set) {\r\n\t\t\t\t\tlet set: Set<any> = element[col] = element[col] || new Set<any>();\r\n\t\t\t\t\tlet keyValue = verifyGetValue(element, table.key);\r\n\t\t\t\t\tlet time = verifyGetValue(element, internal_column_time);\r\n\t\t\t\t\tlet p = tx2.executeSql(\r\n\t\t\t\t\t\t\"SELECT value \"\r\n\t\t\t\t\t\t+ \"FROM \" + getSetTableName(table.spec.name, col)\r\n\t\t\t\t\t\t+ \" WHERE key=?\"\r\n\t\t\t\t\t\t+ \" AND time=?\",\r\n\t\t\t\t\t\t[keyValue, time],\r\n\t\t\t\t\t\t(tx: DbTransaction, results: SetTableRow[]) => {\r\n\t\t\t\t\t\t\tfor (let row of results) {\r\n\t\t\t\t\t\t\t\tset.add(column.element.deserialize(row.value));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tloadNextField(tx2);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tloadNextField(tx2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnextCallback(tx2);\r\n\t\t\t}\r\n\t\t};\r\n\t\tloadNextField(transaction);\r\n\t}\r\n\t\r\n\tfunction getChanges<Element>(transaction: DbTransaction, table: Table<Element, any, any>, baseline: BaselineInfo<Element>, resultCallback: DbCallback<ChangeTableRow[]>): void {\r\n\t\tlet keyValue = verifyGetValue(baseline.element, table.key);\r\n\t\ttransaction.executeSql(\r\n\t\t\t\"SELECT key, time, change\"\r\n\t\t\t+ \" FROM \" + getChangeTableName(table.spec.name)\r\n\t\t\t+ \" WHERE key=? AND time>=?\"\r\n\t\t\t+ \" ORDER BY time ASC\",\r\n\t\t\t[keyValue, baseline.time],\r\n\t\t\tresultCallback);\r\n\t}\r\n\t\r\n\tinterface MutationResult<Element> {\r\n\t\telement: Element;\r\n\t\ttime: number;\r\n\t\tisChanged: boolean;\r\n\t}\r\n\t\r\n\tfunction applyChanges<Element, Mutator>(baseline: BaselineInfo<Element>, changes: ChangeTableRow[], spec: TableSpecAny): MutationResult<Element> {\r\n\t\tlet element: Element = baseline.element;\r\n\t\tlet time = baseline.time;\r\n\t\tfor (let i = 0; i < changes.length; i++) {\r\n\t\t\tlet row = changes[i];\r\n\t\t\tlet mutator = <Mutator>deserializeChange(row.change, spec);\r\n\t\t\telement = mutate(element, mutator);\r\n\t\t\ttime = Math.max(time, row.time);\r\n\t\t}\r\n\t\tlet isChanged = isMutated(baseline.element, element) || baseline.rowid == -1;\r\n\t\treturn { element, time, isChanged };\r\n\t}\r\n\t\r\n\tfunction setLatest<Element>(transaction: DbTransaction, table: Table<Element, any, any>, keyValue: KeyType, rowid: number, nextCallback: DbTransactionCallback): void {\r\n\t\ttransaction.executeSql(\r\n\t\t\t\"UPDATE \" + table.spec.name\r\n\t\t\t+ \" SET \" + internal_column_latest + \"=(\" + ROWID + \"=\" + rowid + \")\"\r\n\t\t\t+ \" WHERE \" + table.key + \"=?\",\r\n\t\t\t[keyValue],\r\n\t\t\tnextCallback);\r\n\t}\r\n\t\r\n\tfunction invalidateLatest<Element>(transaction: DbTransaction, table: Table<Element, any, any>, keyValue: KeyType, nextCallback: DbTransactionCallback): void {\r\n\t\ttransaction.executeSql(\r\n\t\t\t\"UPDATE \" + table.spec.name\r\n\t\t\t+ \" SET \" + internal_column_latest + \"=0\"\r\n\t\t\t+ \" WHERE \" + table.key + \"=?\",\r\n\t\t\t[keyValue],\r\n\t\t\tnextCallback);\r\n\t}\r\n\t\r\n\tfunction selectableColumns(spec: TableSpecAny, cols: { [key: string]: any }): string[] {\r\n\t\treturn Object.keys(cols).filter(col => (col == ROWID) || (col in internalColumn) || ((col in spec.columns) && (spec.columns[col].type != ColumnType.set)));\r\n\t}\r\n\t\r\n\tfunction serializeValue(spec: TableSpecAny, col: string, value: any): Serializable {\r\n\t\tif (col in spec.columns) {\r\n\t\t\tlet x = spec.columns[col].serialize(value);\r\n\t\t\treturn x;\r\n\t\t}\r\n\t\tverify(typeof value == \"number\" || value, \"bad value\");\r\n\t\treturn value;\r\n\t}\r\n\t\r\n\tfunction deserializeValue(spec: TableSpecAny, col: string, value: any) {\r\n\t\tif (col in spec.columns) {\r\n\t\t\tvalue = spec.columns[col].deserialize(value);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\t\r\n\tlet setKey = keyOf({ $set: false });\r\n\tfunction serializeChange<Mutator>(change: Mutator, spec: TableSpec<any, Mutator, any>): string {\r\n\t\tfor (let col in change) {\r\n\t\t\tlet val = change[col];\r\n\t\t\tif (hasOwnProperty.call(val, setKey)) {\r\n\t\t\t\tchange[col] = shallowCopy(change[col]);\r\n\t\t\t\tchange[col][setKey] = serializeValue(spec, col, change[col][setKey]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn toText(change);\r\n\t}\r\n\t\r\n\tfunction deserializeChange<Mutator>(text: string, spec: TableSpec<any, Mutator, any>): Mutator {\r\n\t\tlet change = fromText(text);\r\n\t\tfor (let col in change) {\r\n\t\t\tlet val = change[col];\r\n\t\t\tif (hasOwnProperty.call(val, setKey)) {\r\n\t\t\t\tchange[col][setKey] = deserializeValue(spec, col, change[col][setKey]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn change;\r\n\t}\r\n\t\r\n\tfunction deserializeRow<T>(spec: TableSpecAny, row: any[]): T {\r\n\t\tlet ret: T = <any>{};\r\n\t\tfor (let col in row) {\r\n\t\t\tlet src = row[col];\r\n\t\t\tif (src != null) {\r\n\t\t\t\tret[col] = deserializeValue(spec, col, src);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ret;\r\n\t}\r\n\t\r\n\tfunction isEmpty(obj: any): boolean {\r\n\t\tfor (let field in obj) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\texport function createStore(params: CreateStoreParams): Store {\r\n\t\treturn new Store(params);\r\n\t}\r\n\t\r\n\t/* istanbul ignore next */\r\n\texport function makeSave<Element>(table: Updraft.Table<Element, any, any>, time: number) {\r\n\t\treturn (save: Element) => ({\r\n\t\t\ttable,\r\n\t\t\ttime,\r\n\t\t\tsave\r\n\t\t} as Updraft.TableChange<Element, any>);\r\n\t}\r\n\r\n\t/* istanbul ignore next */\r\n\texport function makeChange<Mutator>(table: Updraft.Table<any, Mutator, any>, time: number) {\r\n\t\treturn (change: Mutator) => ({\r\n\t\t\ttable,\r\n\t\t\ttime,\r\n\t\t\tchange\r\n\t\t} as Updraft.TableChange<any, Mutator>);\r\n\t}\r\n\r\n\t/* istanbul ignore next */\r\n\texport function makeDelete(table: Updraft.TableAny, time: number) {\r\n\t\treturn (id: KeyType) => ({\r\n\t\t\ttable,\r\n\t\t\ttime,\r\n\t\t\tdelete: id\r\n\t\t} as Updraft.TableChange<any, any>);\r\n\t}\r\n\r\n}\r\n","///<reference path=\"./Store\"/>\r\n\"use strict\";\r\n\r\n/* istanbul ignore else */\r\nif (typeof module !== \"undefined\") {\r\n\tmodule.exports = Updraft;\r\n}\r\n","\"use strict\";\r\n\r\nnamespace Updraft.Query {\r\n\texport interface NumericConditions {\r\n\t\t$gt?: number;\r\n\t\t$gte?: number;\r\n\t\t$lt?: number;\r\n\t\t$lte?: number;\r\n\t}\r\n\t\r\n\texport interface SetHasCondition<T> {\r\n\t\t$has?: T;\r\n\t}\r\n\r\n\texport interface SetHasAnyCondition<T> {\r\n\t\t$hasAny?: T[];\r\n\t}\r\n\r\n\texport interface SetHasAllConditions<T> {\r\n\t\t$hasAll?: T[];\r\n\t}\r\n\t\r\n\texport interface DateConditions {\r\n\t\t$after?: Date;\r\n\t\t$before?: Date;\r\n\t}\r\n\t\r\n\texport interface InCondition<T> {\r\n\t\t$in: T[];\r\n\t}\r\n  \r\n  export interface LikeCondition {\r\n    $like: string;\r\n  }\r\n\r\n  export interface NotLikeCondition {\r\n    $notLike: string;\r\n  }\r\n\t\r\n\texport type primitive<T> = T | InCondition<T>;\r\n\r\n\texport type none = void;\r\n\texport type bool = boolean;\r\n\texport type num = primitive<number> | NumericConditions;\r\n\texport type str = primitive<string> | LikeCondition | NotLikeCondition;\r\n\texport type date = primitive<Date> | DateConditions;\r\n\texport type enm<T> = primitive<T>;\r\n\texport type set<T> = SetHasCondition<T> | SetHasAnyCondition<T> | SetHasAllConditions<T>;\r\n\texport type strSet = set<string>;\r\n  \r\n  export function escape(str: string): string {\r\n    return str.replace(/%/g, \"\\\\%\").replace(/_/g, \"\\\\_\");\r\n  }\r\n}\r\n","///<reference path=\"../typings/tsd.d.ts\"/>\r\n///<reference path=\"./Database\"/>\r\n\"use strict\";\r\n\r\nnamespace Updraft {\r\n\t// compatible with sqlite3\r\n\texport interface IDatabase {\r\n\t\trun(sql: string, callback?: (err: Error) => void): IDatabase;\r\n\t\tall(sql: string, params?: any[], callback?: (err: Error, rows: any[]) => void): IDatabase;\r\n\t\teach(sql: string, params?: any[], callback?: (err: Error, row: any) => void, complete?: (err: Error, count: number) => void): IDatabase;\r\n\t\tserialize(callback?: () => void): void;\r\n\t\tparallelize(callback?: () => void): void;\r\n\t}\r\n\t\r\n\tinterface SQLiteTransaction extends DbTransaction {\r\n\t\terrorCallback: DbErrorCallback;\r\n\t}\r\n\t\r\n\t\r\n\tclass SQLiteWrapper implements DbWrapper {\r\n\t\tprivate db: IDatabase;\r\n\t\r\n\t\tconstructor(db: IDatabase) {\r\n\t\t\tthis.db = db;\r\n\t\t}\r\n\t\r\n\t\trun(sql: string, callback: () => void): void {\r\n\t\t\tthis.db.run(sql, (err: Error) => {\r\n\t\t\t\t/* istanbul ignore if */\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tconsole.log(\"SQLiteWrapper.run(): error executing '\" + sql + \"': \", err);\r\n\t\t\t\t\tthrow err;\r\n\t\t\t\t}\r\n        else {\r\n          callback();\r\n        }\r\n\t\t\t});\r\n\t\t}\r\n\t\r\n\t\texecuteSql(tx: SQLiteTransaction, sql: string, params: (string | number)[], callback: DbResultsCallback): void {\r\n\t\t\tthis.db.all(sql, params, (err: Error, rows: any[]) => {\r\n\t\t\t\t/* istanbul ignore if */\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tconsole.log(\"SQLiteWrapper.all(): error executing '\" + sql + \"': \", err);\r\n\t\t\t\t\tif (tx.errorCallback) {\r\n\t\t\t\t\t\ttx.errorCallback(err);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthrow err;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcallback(tx, rows);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t\t\r\n\t\teach(tx: SQLiteTransaction, sql: string, params: (string | number)[], callback: DbEachResultCallback, final: DbTransactionCallback): void {\r\n\t\t\tthis.db.each(sql, params, (err: Error, row: any) => {\r\n\t\t\t\t/* istanbul ignore if */\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tconsole.log(\"SQLiteWrapper.each(): error executing '\" + sql + \"': \", err);\r\n\t\t\t\t\tif (tx.errorCallback) {\r\n\t\t\t\t\t\ttx.errorCallback(err);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthrow err;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcallback(tx, row);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t(err: Error, count: number) => {\r\n\t\t\t\t/* istanbul ignore if */\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tconsole.log(\"SQLiteWrapper.each(): error executing '\" + sql + \"': \", err);\r\n\t\t\t\t\tif (tx.errorCallback) {\r\n\t\t\t\t\t\ttx.errorCallback(err);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthrow err;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfinal(tx);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\ttransaction(callback: DbTransactionCallback, errorCallback: DbErrorCallback): void {\r\n      this.db.run(\"BEGIN TRANSACTION\", () => {\r\n        let tx: SQLiteTransaction = {\r\n          errorCallback: errorCallback,\r\n          executeSql: (sql: string, params: (string | number)[], resultsCb: DbResultsCallback): void => {\r\n            this.executeSql(tx, sql, params, resultsCb);\r\n          },\r\n          each: (sql: string, params: (string | number)[], resultsCb: DbEachResultCallback, final: DbTransactionCallback): void => {\r\n            this.each(tx, sql, params, resultsCb, final);\r\n          },\r\n          commit: (cb: DbCommitCallback) => {\r\n            this.run(\"COMMIT TRANSACTION\", cb);\r\n          }\r\n        };\r\n        callback(tx);\r\n      });\r\n\t\t}\r\n\r\n\t\treadTransaction(callback: DbTransactionCallback, errorCallback: DbErrorCallback): void {\r\n\t\t\tlet result: any = undefined;\r\n\t\t\tlet tx: SQLiteTransaction = {\r\n\t\t\t\terrorCallback: errorCallback,\r\n\t\t\t\texecuteSql: (sql: string, params: (string | number)[], resultsCb: DbResultsCallback): void => {\r\n\t\t\t\t\tthis.executeSql(tx, sql, params, resultsCb);\r\n\t\t\t\t},\r\n\t\t\t\teach: (sql: string, params: (string | number)[], resultsCb: DbEachResultCallback, final: DbTransactionCallback): void => {\r\n\t\t\t\t\tthis.each(tx, sql, params, resultsCb, final);\r\n\t\t\t\t},\r\n        commit: (cb: DbCommitCallback) => {\r\n          cb();\r\n        }\r\n\t\t\t};\r\n\t\t\tcallback(tx);\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\texport function createSQLiteWrapper(db: IDatabase): DbWrapper {\r\n\t\treturn new SQLiteWrapper(db);\r\n\t}\r\n}\r\n","///<reference path=\"./websql.d.ts\"/>\r\n///<reference path=\"./Database\"/>\r\n\"use strict\";\r\n\r\nnamespace Updraft {\r\n\r\n\tinterface WebsqlTransaction extends DbTransaction {\r\n\t\trealTransaction: SQLTransaction;\r\n\t\terrorCallback: DbErrorCallback;\r\n\t}\r\n\t\r\n\t\r\n\t/* istanbul ignore next: can't test websql in node */\r\n\tclass WebsqlWrapper implements DbWrapper {\r\n\t\tdb: Database;\r\n\t\ttraceCallback: (trace: string) => any;\r\n\t\r\n\t\tconstructor(name: string, version?: string, displayName?: string, estimatedSize?: number, traceCallback?: (trace: string) => any) {\r\n\t\t\tversion = version || \"1.0\";\r\n\t\t\tdisplayName = displayName || name;\r\n\t\t\testimatedSize = estimatedSize || 5 * 1024 * 1024;\r\n\t\r\n\t\t\tthis.db = window.openDatabase(name, version, displayName, estimatedSize);\r\n\t\t\tthis.traceCallback = traceCallback;\r\n\t\t}\r\n\t\t\r\n\t\ttrace(sql: string, params?: (string | number)[]) {\r\n\t\t\tif (this.traceCallback) {\r\n\t\t\t\tlet escapedString = this.stringify(sql, params);\r\n\t\t\t\tthis.traceCallback(escapedString);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tstringify(sql: string, params?: (string | number)[]): string {\r\n\t\t\tlet idx: number = 0;\r\n\t\t\tlet escapedString = sql.replace(/\\?/g, () => {\r\n\t\t\t\tlet x = params[idx++];\r\n\t\t\t\tif (typeof x == \"number\") {\r\n\t\t\t\t\treturn <string>x;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn \"'\" + x + \"'\";\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn escapedString;\r\n\t\t}\r\n\t\t\r\n\t\tall(tx: WebsqlTransaction, sql: string, params: (string | number)[], callback: DbResultsCallback): void {\r\n\t\t\tthis.trace(sql, params);\r\n\t\t\ttry {\r\n\t\t\t\ttx.realTransaction.executeSql(sql, params,\r\n\t\t\t\t\t(transaction: SQLTransaction, resultSet: SQLResultSet) => {\r\n\t\t\t\t\t\tlet results: any[] = [];\r\n\t\t\t\t\t\tfor (let i = 0; i < resultSet.rows.length; i++) {\r\n\t\t\t\t\t\t\tlet row = resultSet.rows.item(i);\r\n\t\t\t\t\t\t\tresults.push(row);\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tcallback(this.wrapTransaction(transaction, tx.errorCallback), results);\r\n\t\t\t\t\t},\r\n\t\t\t\t\t(transaction: SQLTransaction, error: SQLError) => {\r\n\t\t\t\t\t\tconsole.error(\"error executing '\" + this.stringify(sql, params) + \"': \", error);\r\n\t\t\t\t\t\tif (tx.errorCallback) {\r\n\t\t\t\t\t\t\ttx.errorCallback(error);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow error;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tcatch (error) {\r\n\t\t\t\tconsole.error(\"error executing '\" + this.stringify(sql, params) + \"': \", error);\r\n\t\t\t\tif (tx.errorCallback) {\r\n\t\t\t\t\ttx.errorCallback(error);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthrow error;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\teach(tx: WebsqlTransaction, sql: string, params: (string | number)[], callback: DbEachResultCallback, final: DbTransactionCallback) {\r\n\t\t\tthis.trace(sql, params);\r\n\t\t\ttx.realTransaction.executeSql(sql, params,\r\n\t\t\t\t(transaction: SQLTransaction, resultSet: SQLResultSet) => {\r\n\t\t\t\t\tfor (let i = 0; i < resultSet.rows.length; i++) {\r\n\t\t\t\t\t\tlet row = resultSet.rows.item(i);\r\n\t\t\t\t\t\tif (callback) {\r\n\t\t\t\t\t\t\t(function(row: any) {\r\n\t\t\t\t\t\t\t\tcallback(tx, row);\r\n\t\t\t\t\t\t\t})(row);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfinal(this.wrapTransaction(transaction, tx.errorCallback));\r\n\t\t\t\t},\r\n\t\t\t\t(transaction: SQLTransaction, error: SQLError) => {\r\n\t\t\t\t\tconsole.error(\"error executing '\" + this.stringify(sql, params) + \"': \", error);\r\n\t\t\t\t\tif (tx.errorCallback) {\r\n\t\t\t\t\t\ttx.errorCallback(error);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthrow error;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\t\r\n\t\tprivate wrapTransaction(transaction: SQLTransaction, errorCallback: DbErrorCallback): WebsqlTransaction {\r\n\t\t\tlet tx: WebsqlTransaction = {\r\n\t\t\t\trealTransaction: transaction,\r\n\t\t\t\terrorCallback: errorCallback,\r\n\t\t\t\texecuteSql: (sql: string, params?: (string | number)[], callback?: DbResultsCallback): void => {\r\n\t\t\t\t\tthis.all(tx, sql, params, callback);\r\n\t\t\t\t},\r\n\t\t\t\teach: (sql: string, params: (string | number)[], callback: DbEachResultCallback, final: DbTransactionCallback): void => {\r\n\t\t\t\t\tthis.each(tx, sql, params, callback, final);\r\n\t\t\t\t},\r\n        commit: (cb: DbCommitCallback) => {\r\n          cb();\r\n        }\r\n\t\t\t};\r\n\t\t\treturn tx;\r\n\t\t}\r\n\t\r\n\t\ttransaction(callback: DbTransactionCallback, errorCallback: DbErrorCallback): void {\r\n\t\t\tthis.db.transaction((transaction: SQLTransaction) => {\r\n\t\t\t\tlet tx = this.wrapTransaction(transaction, errorCallback);\r\n\t\t\t\tcallback(tx);\r\n\t\t\t});\r\n\t\t}\r\n\t\r\n\t\treadTransaction(callback: DbTransactionCallback, errorCallback: DbErrorCallback): void {\r\n\t\t\tthis.db.readTransaction((transaction: SQLTransaction) => {\r\n\t\t\t\tlet tx = this.wrapTransaction(transaction, errorCallback);\r\n\t\t\t\tcallback(tx);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\t\r\n\t/* istanbul ignore next: can't test websql in node */\r\n\texport function createWebsqlWrapper(name: string, version?: string, displayName?: string, estimatedSize?: number, traceCallback?: (trace: string) => any): DbWrapper {\r\n\t\treturn new WebsqlWrapper(name, version, displayName, estimatedSize, traceCallback);\r\n\t}\r\n}\r\n"],"sourceRoot":"/source/"}