{"version":3,"sources":["src/util.ts","src/set.ts","src/query.ts","src/model.ts","src/store.ts","src/main.ts"],"names":["Updraft","Updraft.startsWith","Updraft.clone","Updraft.keyOf","Updraft.createClass","Updraft.State","Updraft.Set","Updraft.Set.constructor","Updraft.Set.initFromDb","Updraft.Set.assign","Updraft.Set.clear","Updraft.Set.add","Updraft.Set.push","Updraft.Set.remove","Updraft.Set.which","Updraft.Set.values","Updraft.Set.getAdded","Updraft.Set.getRemoved","Updraft.Set.clearChanges","Updraft.Query","Updraft.Query.constructor","Updraft.Query.all","Updraft.Query.addCondition","Updraft.Query.and","Updraft.Query.where","Updraft.Query.or","Updraft.Query.order","Updraft.Query.nocase","Updraft.Query.limit","Updraft.Query.offset","Updraft.Query.count","Updraft.Query.get","Updraft.Instance","Updraft.Instance.constructor","Updraft.Instance._primaryKey","Updraft.Instance._changes","Updraft.Instance._clearChanges","Updraft.addClassProperty","Updraft.MakeClassTemplate","Updraft.constructFromDb","Updraft.ColumnType","Updraft.Column","Updraft.Column.constructor","Updraft.Column.Key","Updraft.Column.Index","Updraft.Column.Default","Updraft.Column.Int","Updraft.Column.Real","Updraft.Column.Bool","Updraft.Column.Text","Updraft.Column.String","Updraft.Column.Blob","Updraft.Column.Enum","Updraft.Column.Date","Updraft.Column.DateTime","Updraft.Column.JSON","Updraft.Column.Ptr","Updraft.Column.Set","Updraft.Column.sqlType","Updraft.StoreOptions","Updraft.StoreOptions.constructor","Updraft.Schema","Updraft.Schema.constructor","Updraft.SchemaTable","Updraft.SchemaTable.constructor","Updraft.KeyValue","Updraft.KeyValue.constructor","Updraft.KeyValue.get","Updraft.anyFcn","Updraft.Store","Updraft.Store.constructor","Updraft.Store.addClass","Updraft.Store.set","Updraft.Store.get","Updraft.Store.loadKeyValues","Updraft.Store.purge","Updraft.Store.open","Updraft.Store.close","Updraft.Store.exec","Updraft.Store.execRead","Updraft.Store.reportError","Updraft.Store.readSchema","Updraft.Store.readSchema.tableFromSql","Updraft.Store.syncTables","Updraft.Store.syncTable","Updraft.Store.syncTable.createTable","Updraft.Store.syncTable.dropTable","Updraft.Store.syncTable.createIndices","Updraft.Store.save","value","insertSets","insert","update"],"mappings":"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AAIA,CAACA,QAAQA,CAACA,CAACA,OAAOA,CAACA,UAAUA,IAAYA;oBAClD,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,aAAa,GAAG,IAAI,CAAC,CAAC,CAAC;gBACrD,CAAC,CAACA,CAACA;gBACHA,MAAMA,CAACA,OAAOA,CAACA,GAAGA,CAACA,QAAQA,CAACA,CAACA;YAC/BA,CAACA;YAEDH,gCAAgCA;YAChCA,EAAEA,CAACA,CAACA,CAACA,CAACA,SAASA,IAAIA,MAAMA,CAACA,CAACA,CAACA;gBAC1BA,EAAEA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA;oBACfA,MAAMA,CAACA,OAAOA,CAACA,GAAGA,CAACA;wBACjBA,SAASA,CAACA,CAACA,CAACA,SAASA,CAACA;wBACtBA,WAAWA,CAACA,CAACA,CAACA,SAASA,CAACA;wBACxBA,aAAaA,CAACA,IAAIA,CAACA;qBACpBA,CAACA,CAACA;gBACLA,CAACA;gBAACA,IAAIA,CAACA,CAACA;oBACNA,oEAAoEA;oBACpEA,IAAIA,OAAOA,GAAGA,aAAKA,CAACA,MAAMA,CAACA,CAACA,CAACA,SAASA,CAACA,CAACA,CAACA;oBACzCA,OAAOA,OAAOA,CAACA,QAAQA,CAACA;oBACxBA,OAAOA,OAAOA,CAACA,SAASA,CAACA;oBACzBA,IAAIA,GAAWA,CAACA;oBAEhBA,IAAIA,YAAYA,GAAaA,EAAEA,CAACA;oBAChCA,IAAIA,eAAeA,GAAGA,KAAKA,CAACA;oBAC5BA,GAAGA,CAACA,CAACA,GAAGA,IAAIA,CAACA,CAACA,OAAOA,CAACA,CAACA,CAACA;wBACtBA,EAAEA,CAACA,CAACA,CAACA,CAACA,GAAGA,IAAIA,OAAOA,CAACA,CAACA,CAACA,CAACA;4BACtBA,YAAYA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;4BACvBA,EAAEA,CAACA,CAACA,CAACA,CAACA,OAAOA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA;gCACvBA,eAAeA,GAA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","file":"../dist/updraft.js","sourcesContent":["module Updraft {\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  export function startsWith(str: string, val: string) {\r\n    return str.lastIndexOf(val, 0) === 0;\r\n  }\r\n\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  export function clone(obj: any): any {\r\n    var copy: any;\r\n\r\n    // Handle the 3 simple types, and null or undefined\r\n    if (null === obj || \"object\" !== typeof obj) {\r\n      return obj;\r\n    }\r\n\r\n    // Handle Array\r\n    if (obj instanceof Array) {\r\n      copy = [];\r\n      for (var i = 0, len = obj.length; i < len; i++) {\r\n        copy[i] = clone(obj[i]);\r\n      }\r\n      return copy;\r\n    }\r\n\r\n    // Handle complicated (read: enum) objects\r\n    if (obj instanceof Object && obj.constructor.name !== \"Object\") {\r\n      return obj;\r\n    }\r\n\r\n    // Handle simple Objects\r\n    if (obj instanceof Object && obj.constructor.name === \"Object\") {\r\n      copy = {};\r\n      for (var attr in obj) {\r\n        if (obj.hasOwnProperty(attr)) {\r\n          copy[attr] = clone(obj[attr]);\r\n        }\r\n      }\r\n      return copy;\r\n    }\r\n\r\n    throw new Error(\"Unable to copy obj! Its type isn't supported.\");\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  export function keyOf(obj: any): any {\r\n    if(obj instanceof Instance) {\r\n      return (<Instance<any>>obj)._primaryKey();\r\n    }\r\n    if(typeof(obj) === 'object' && typeof(obj.toString) === 'function') {\r\n      return obj.toString();\r\n    }\r\n    return obj;\r\n  }\r\n\r\n\r\n  /**\r\n   * In non-typescript environments, use this function to derive a class from {@link Instance}\r\n   * @example\r\n   * ```\r\n   *\r\n   *   function Task() { Updraft.Instance.apply(this, arguments); }\r\n   *   var Task = Updraft.createClass({\r\n   *     tableName: 'tasks',\r\n   *     columns: {\r\n   *       name: Updraft.Column.Text().Key(),\r\n   *       description: Updraft.Column.Text(),\r\n   *       done: Updraft.Column.Bool()\r\n   *     }\r\n   *   });\r\n   * ```\r\n   */\r\n  export function createClass(proto: Function, descriptor: ClassTemplate<any>) {\r\n    console.assert(typeof proto === 'function');\r\n    console.assert(typeof descriptor === 'object');\r\n\r\n    proto.prototype = Object.create(Instance.prototype);\r\n    proto.prototype.constructor = proto;\r\n\r\n    for(var key in descriptor) {\r\n      var value = descriptor[key];\r\n      if(typeof value === 'function') {\r\n        proto.prototype[key] = value;\r\n      } else {\r\n        proto[key] = descriptor[key];\r\n      }\r\n    }\r\n\r\n    return proto;\r\n  }\r\n\r\n}\r\n","/// <reference path=\"./websql.d.ts\" />\r\n\r\nmodule Updraft {\r\n\r\n  /**\r\n   * State that a value can be in\r\n   * @private\r\n   * @enum\r\n   */\r\n  enum State {\r\n    saved =   1 << 1,\r\n    added =   1 << 2,\r\n    removed = 1 << 3\r\n  }\r\n\r\n\r\n  interface StateMap {\r\n    [key: string]: State;\r\n  }\r\n\r\n\r\n  export interface DirtyFunc {\r\n    (): void;\r\n  }\r\n\r\n\r\n  export class Set<K> {\r\n    private _dirtyFcn: DirtyFunc;\r\n    private _states: StateMap;\r\n\r\n    /**\r\n     * @param dirtyFcn - function to call when set's state changes\r\n     */\r\n    constructor(dirtyFcn: DirtyFunc) {\r\n      this._dirtyFcn = dirtyFcn;\r\n      this._states = {};\r\n    }\r\n\r\n\r\n    /**\r\n     * load values from a database; initialize values\r\n     * @private\r\n     * @param results - database row\r\n     */\r\n    initFromDb(results: SQLResultSet) {\r\n      for(var i=0; i<results.rows.length; i++) {\r\n        var row = results.rows.item(i);\r\n        console.assert(Object.keys(row).length === 1);\r\n        var item: string = row[Object.keys(row)[0]];\r\n        this._states[item] = State.saved;\r\n      }\r\n    }\r\n\r\n\r\n    /**\r\n     * Set all values from an array.  <tt>Add</tt>s all values, and <tt>remove</tt>s any existing set values that are\r\n     * not in <tt>arr</tt>\r\n     * @param objects - array of values to assign.  If values are {@link Instance}s, assign their <tt>_primaryKey()</tt>s instead\r\n     */\r\n    assign(objects: K[]): void {\r\n      this.clear();\r\n      this.add.apply(this, objects);\r\n    }\r\n\r\n\r\n    /**\r\n     * Removes all objects from set\r\n     */\r\n    clear(): void {\r\n      for(var val in this._states) {\r\n        this._states[val] = State.removed;\r\n      }\r\n    }\r\n\r\n\r\n    /**\r\n     * Adds value(s) to set\r\n     * @param objects - array of values to assign.  If values are {@link Instance}s, assign their <tt>_primaryKey()</tt>s instead\r\n     */\r\n    add(...objects: K[]): void {\r\n      var dirty = false;\r\n      var self = this;\r\n      objects\r\n      .map(keyOf)\r\n      .forEach(function(arg: string) {\r\n        console.assert(typeof(arg) !== 'object');\r\n        if(self._states[arg] !== State.saved) {\r\n          self._states[arg] = State.added;\r\n          dirty = true;\r\n        }\r\n      });\r\n      if(dirty) {\r\n        this._dirtyFcn();\r\n      }\r\n    }\r\n\r\n\r\n    /**\r\n     * Alias for {@link add}\r\n     * @param objects - values to add\r\n     */\r\n    push(...objects: K[]): void {\r\n      return this.add.apply(this, objects);\r\n    }\r\n\r\n\r\n    /**\r\n     * Removes value(s) from set\r\n     * @param objects - values to remove\r\n     */\r\n    remove(...objects: K[]): void {\r\n      var dirty = false;\r\n      var self = this;\r\n      objects\r\n      .map(keyOf)\r\n      .forEach(function(arg: string) {\r\n        self._states[arg] = State.removed;\r\n        dirty = true;\r\n      });\r\n      if(dirty) {\r\n        this._dirtyFcn();\r\n      }\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets values from set which match the given <tt>stateMask</tt>\r\n     * @param stateMask - states of objects to return\r\n     * @return values that match <tt>stateMask</tt>\r\n     * @private\r\n     */\r\n    private which(stateMask: State): string[] {\r\n      var self = this;\r\n      return Object.keys(this._states)\r\n      .filter(function(element, index, array): boolean {\r\n        return (self._states[<any>element] & stateMask) ? true : false;\r\n      });\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets valid (added or saved) values of the set\r\n     */\r\n    values(): string[] {\r\n      return this.which(State.saved | State.added);\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the values that have been added to the set since it was last saved\r\n     */\r\n    getAdded(): string[] {\r\n      return this.which(State.added);\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the values that have been removed from the set since it was last saved\r\n     */\r\n    getRemoved(): string[] {\r\n      return this.which(State.removed);\r\n    }\r\n\r\n\r\n    /**\r\n     * Marks the values in the set as saved.  Any objects marked 'remove' will be\r\n     * expunged from the set.\r\n     */\r\n    clearChanges(): void {\r\n      var newValues: StateMap = {};\r\n      for(var val in this._states) {\r\n        if(this._states[val] !== State.removed) {\r\n          newValues[val] = State.saved;\r\n        }\r\n      }\r\n      this._states = newValues;\r\n    }\r\n  }\r\n\r\n}\r\n","/// <reference path=\"../typings/tsd.d.ts\" />\r\n/// <reference path=\"./store.ts\" />\r\n\r\nmodule Updraft {\r\n\r\n  interface Condition {\r\n    conj: string;\r\n    col: string;\r\n    op: string;\r\n    val: string;\r\n    arg?: string;\r\n  }\r\n\r\n\r\n  /**\r\n   * Do not construct objects of type Query directly- instead, use {@link ClassTemplate}.all\r\n   * @constructor\r\n   */\r\n  export class Query<K, I extends Instance<any>> {\r\n    private _model: ClassTemplate<K>;\r\n    private _store: Store;\r\n    private _justCount: boolean;\r\n    private _tables: string[];\r\n    private _columns: string[];\r\n    private _conditions: Condition[];\r\n    private _order: any;\r\n    private _limit: any;\r\n    private _offset: any;\r\n    private _asc: boolean;\r\n    private _nocase: boolean;\r\n\r\n    constructor(model: ClassTemplate<K>, store: Store) {\r\n      console.assert(model != null);\r\n      console.assert(store != null);\r\n      this._model = model;\r\n      this._store = store;\r\n      this._justCount = false;\r\n      this._tables = [model.tableName];\r\n      this._columns = [];\r\n      this._conditions = [];\r\n      this._order = undefined;\r\n      this._limit = undefined;\r\n      this._offset = undefined;\r\n      this._asc = true;\r\n      this._nocase = false;\r\n\r\n      // add child tables\r\n      for(var col in model.columns) {\r\n        if(model.columns[col].type !== ColumnType.set) {\r\n          this._columns.push(model.tableName + '.' + col);\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    all(): Promise<I[]> {\r\n      return this.get();\r\n    }\r\n\r\n\r\n    private addCondition(conj: string, col: string, op: string, val: any): Query<K, I> {\r\n      var fields = col.split(/\\./);\r\n      var field: string;\r\n      var f = this._model;\r\n      val = keyOf(val);\r\n\r\n      for(var i=0; i<fields.length - 1; i++) {\r\n        field = fields[i];\r\n        console.assert(field in f.columns);\r\n        var ref = f.columns[field].ref;\r\n        console.assert(ref != null);\r\n        if(this._tables.indexOf(ref.tableName) === -1) {\r\n          this._tables.push(ref.tableName);\r\n          this._conditions.push({\r\n            conj: 'AND',\r\n            col: f.tableName + '.' + field,\r\n            op: '=',\r\n            val: ref.tableName + '.' + ref.key\r\n          });\r\n        }\r\n        f = ref;\r\n      }\r\n\r\n      field = fields[fields.length - 1];\r\n\r\n      switch(op) {\r\n        case 'contains':\r\n          console.assert(f.columns[field].type === ColumnType.set);\r\n          var setTable = f.columns[field].setTable;\r\n          console.assert(setTable != null);\r\n\r\n          if(this._tables.indexOf(setTable.tableName) === -1) {\r\n            this._tables.push(setTable.tableName);\r\n            this._conditions.push({\r\n              conj: 'AND',\r\n              col: f.tableName + '.' + f.key,\r\n              op: '=',\r\n              val: setTable.tableName + '.' + f.key\r\n            });\r\n          }\r\n\r\n          this._conditions.push({\r\n            conj: conj,\r\n            col: setTable.tableName + '.' + field,\r\n            op: '=',\r\n            val: '?',\r\n            arg: val\r\n          });\r\n          break;\r\n\r\n        default:\r\n          console.assert(f.columns[field].type !== ColumnType.set);\r\n          this._conditions.push({\r\n            conj: conj,\r\n            col: f.tableName + '.' + field,\r\n            op: op,\r\n            val: '?',\r\n            arg: val\r\n          });\r\n        break;\r\n      }\r\n      return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * Adds an 'AND' condition to the query\r\n     *\r\n     * @param col - column field to match on\r\n     * @param op - SQLite binary [operator]{@link https://www.sqlite.org/lang_expr.html}\r\n     * @param val - value to match against `col`\r\n     * @see {@link or}\r\n     * @example\r\n     * ```\r\n     *\r\n     *  return Class.all.where('col2', '>', 10).and('col2', '<', 30).get();\r\n     *  // -> SELECT ... WHERE col2 > 10 AND col2 < 30\r\n     * ```\r\n     */\r\n    and(col: string, op: string, val: any): Query<K, I> {\r\n      return this.addCondition('AND', col, op, val);\r\n    }\r\n\r\n\r\n    /**\r\n     * alias for {@link and}\r\n     *\r\n     * @example\r\n     * ```\r\n     *\r\n     *  return Class.all.where('col2', '>', 10).get();\r\n     * ```\r\n     */\r\n    where(): Query<K, I> {\r\n      return this.and.apply(this, arguments);\r\n    }\r\n\r\n\r\n    /**\r\n     * Adds an 'OR' condition to the query\r\n     *\r\n     * @param col - column field to match on\r\n     * @param op - SQLite binary [operator]{@link https://www.sqlite.org/lang_expr.html}\r\n     * @param val - value to match against `col`\r\n     * @see {@link and}\r\n     * @example\r\n     * ```\r\n     *\r\n     *  return Class.all.where('col2', '=', 10).or('col2', '=', 30).get();\r\n     *  // -> SELECT ... WHERE col2 = 10 OR col2 = 30\r\n     * ```\r\n     */\r\n    or(col: string, op: string, val: any): Query<K, I> {\r\n      return this.addCondition('OR', col, op, val);\r\n    }\r\n\r\n\r\n    /**\r\n     * Sort the results by specified field\r\n     *\r\n     * @param col - column to sort by\r\n     * @param asc - sort ascending (true, default) or descending (false)\r\n     * @see {@link nocase}\r\n     * @example\r\n     * ```\r\n     *\r\n     *  return Class.all.order('x').get();\r\n     *  // -> SELECT ... ORDER BY x\r\n     * ```\r\n     */\r\n    order(col: string, asc: boolean): Query<K, I> {\r\n      this._order = this._model.tableName + '.' + col;\r\n      if(typeof asc !== 'undefined') {\r\n        this._asc = asc;\r\n      }\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Changes the match collation to be case-insensitive.  Only applies to result sorting, as 'LIKE' is\r\n     * always case-insensitive\r\n     *\r\n     * @see {@link order}\r\n     * @example\r\n     * ```\r\n     *\r\n     *  return Class.all.order('x').nocase().get();\r\n     *  // -> SELECT ... ORDER BY x COLLATE NOCASE\r\n     * ```\r\n     */\r\n    nocase(): Query<K, I> {\r\n      this._nocase = true;\r\n      return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * Limits the result set to a certain number.  Useful in pagination\r\n     *\r\n     * @see {@link offset}\r\n     * @example\r\n     * ```\r\n     *\r\n     *  return Class.all.limit(5).get();\r\n     *  // -> SELECT ... FROM ... LIMIT 5\r\n     * ```\r\n     */\r\n    limit(count: number): Query<K, I> {\r\n      this._limit = count;\r\n      return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * Skip a number of results.  Useful in pagination\r\n     *\r\n     * @see {@link limit}\r\n     * @example\r\n     * ```\r\n     *\r\n     *  return Class.all.limit(10).offset(50).get();\r\n     *  // -> SELECT ... FROM ... LIMIT 10 OFFSET 50\r\n     * ```\r\n     */\r\n    offset(count: number): Query<K, I> {\r\n      this._offset = count;\r\n      return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * Executes the query, returning a promise resolving with the count of objects that match\r\n     *\r\n     * @see {@link get}\r\n     * @example\r\n     * ```\r\n     *\r\n     *  return Class.all.count()\r\n     *  .then(function(count) { console.log(count + \" objects\") });\r\n     *  // -> SELECT COUNT(*) FROM ...\r\n     * ```\r\n     */\r\n    count(): Promise<number> {\r\n      this._justCount = true;\r\n      return <Promise<number>><any>this.get();\r\n    }\r\n\r\n\r\n    /**\r\n     * Executes the query, returning a promise resolving with the array of objects that match any conditions\r\n     * set on the Query\r\n     *\r\n     * @see {@link count}\r\n     * @example\r\n     * ```\r\n     *\r\n     *  return Class.all.where('x', '>', 0).get();\r\n     *  // -> SELECT ... WHERE x > 0\r\n     * ```\r\n     */\r\n    get(): Promise<I[]> {\r\n      var countProp = 'COUNT(*)';\r\n      var stmt = 'SELECT ';\r\n      var model: ClassTemplate<K> = this._model;\r\n      if(this._justCount) {\r\n        stmt += countProp;\r\n      } else {\r\n        stmt += this._columns.join(', ');\r\n      }\r\n      stmt += ' FROM ' + this._tables.join(', ');\r\n      var args: string[] = [];\r\n      for(var i=0; i<this._conditions.length; i++) {\r\n        var cond = this._conditions[i];\r\n        stmt += (i === 0) ? ' WHERE ' : (' ' + cond.conj + ' ');\r\n        stmt += cond.col + ' ' + cond.op + ' ' + cond.val;\r\n        if('arg' in cond) {\r\n          args.push(cond.arg);\r\n        }\r\n      }\r\n      if(this._order) {\r\n        stmt += ' ORDER BY ' + this._order;\r\n        stmt += (this._nocase ? ' COLLATE NOCASE' : '');\r\n        stmt += (this._asc ? ' ASC' : ' DESC');\r\n      }\r\n      console.assert(!this._offset || this._limit);\r\n      if(this._limit) {\r\n        stmt += ' LIMIT ' + this._limit;\r\n        if(this._offset) {\r\n          stmt += ' OFFSET ' + this._offset;\r\n        }\r\n      }\r\n\r\n      var objects: I[] = [];\r\n      var query = this;\r\n      return this._store.execRead(stmt, args, function (tx: SQLTransaction, results: SQLResultSet) {\r\n        if(query._justCount) {\r\n          return results.rows.item(0)[countProp];\r\n        }\r\n        for (var i = 0; i < results.rows.length; i++) {\r\n          var o = constructFromDb<K, I>(model, results.rows.item(i));\r\n          objects.push(o);\r\n        }\r\n        var setcols = Object.keys(model.columns)\r\n        .filter(function(col: string): boolean {\r\n          return (model.columns[col].type === ColumnType.set);\r\n        });\r\n        return Promise.all(objects.map(function(o: I) {\r\n          return Promise.all(\r\n            setcols.map(function(col: string): Promise<any> {\r\n              var setTable = model.columns[col].setTable;\r\n              console.assert(setTable != null);\r\n              var key = o._primaryKey();\r\n              var s = 'SELECT ' + col;\r\n              s += ' FROM ' + setTable.tableName;\r\n              s += ' WHERE ' + query._model.key + ' = ?';\r\n              return query._store.exec(tx, s, [key], function(tx: SQLTransaction, results: SQLResultSet) {\r\n                if(results.rows.length > 0) {\r\n                  o[col].initFromDb(results);\r\n                }\r\n              });\r\n            })\r\n          );\r\n        }))\r\n        .then(function() {\r\n          return objects;\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","/// <reference path=\"./util.ts\" />\r\n/// <reference path=\"./store.ts\" />\r\n/// <reference path=\"./set.ts\" />\r\n/// <reference path=\"./query.ts\" />\r\n\r\nmodule Updraft {\r\n\r\n  export interface RenamedColumnSet {\r\n    [oldColumnName: string]: string;\r\n  }\r\n\r\n\r\n  /**\r\n   * Describes the static members of a class used to create {@link Instance}s\r\n   * @see {link @createClass}\r\n   */\r\n  export interface ClassTemplate<K> {\r\n    tableName: string;\r\n    recreate?: boolean;\r\n    temp?: boolean;\r\n    columns: ColumnSet;\r\n    renamedColumns?: RenamedColumnSet;\r\n    indices?: string[][];\r\n    key?: string;\r\n    keyType?: ColumnType;\r\n    all?: Query<K, Instance<K>>;\r\n    get(id: K): Promise<Instance<K>>;\r\n  }\r\n\r\n\r\n  /**\r\n   * Instances of this type will have properties for all the columns defined in its {@link ClassTemplate}.\r\n   *  Do not create objects of type Instance directly; instead create subclassed objects\r\n   *\r\n   * @see {@link createClass}\r\n   * @example\r\n   * ```\r\n   *\r\n   *   // ------ typescript ------\r\n   *   class Task extends Updraft.Instance {\r\n   *     constructor() {\r\n   *       super.apply(this, arguments);\r\n   *     }\r\n   *\r\n   *     public name: string;\r\n   *     public description: string;\r\n   *     public done: boolean;\r\n   *\r\n   *     static tableName: string = 'tasks';\r\n   *     static columns: Updraft.ColumnSet = {\r\n   *       name: Updraft.Column.Text().Key(),\r\n   *       description: Updraft.Column.Text(),\r\n   *       done: Updraft.Column.Bool()\r\n   *     };\r\n   *   }\r\n   * ```\r\n   */\r\n  export class Instance<K> {\r\n    _changeMask: number;\r\n    _isInDb: boolean;\r\n    _model: ClassTemplate<K>;\r\n    _store: Store;\r\n\r\n    constructor(props?: any) {\r\n      var o = this;\r\n      o._changeMask = 0;\r\n\r\n      props = props || {};\r\n      for (var key in props) {\r\n        var value = props[key];\r\n        if(value instanceof Instance) {\r\n          value = (<Instance<K>>value)._primaryKey();\r\n        }\r\n        o[key] = value;\r\n      }\r\n    }\r\n\r\n\r\n    /**\r\n     * Return the object's primary key's value\r\n     *\r\n     * @returns Value of primary key\r\n     * @private\r\n     * @example\r\n     * ```\r\n     *\r\n     *  var x = new Class();\r\n     *  x.id = 123;\r\n     *  console.log(x._primaryKey());\r\n     *  // -> '123'\r\n     * ```\r\n     */\r\n    _primaryKey(): K {\r\n      var key = '_' + this._model.key;\r\n      console.assert(key in this);\r\n      return this[key];\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Get the fields that have been changed since the object was last loaded/saved\r\n     *\r\n     * @returns Names of the fields that have changed\r\n     * @private\r\n     * @example\r\n     * ```\r\n     *\r\n     *  var x = new Class();\r\n     *  x.foo = 'bar';\r\n     *  console.log(x.changes());\r\n     *  // -> ['foo']\r\n     * ```\r\n     */\r\n    _changes(): string[] {\r\n      var changes: string[] = [];\r\n      var propIdx = 0;\r\n      for (var col in this._model.columns) {\r\n        var propMask = (1 << propIdx++);\r\n        if (this._changeMask & propMask) {\r\n          changes.push(col);\r\n        }\r\n      }\r\n      return changes;\r\n    }\r\n\r\n\r\n    /**\r\n     * Set state to be have no changes\r\n     * @private\r\n     */\r\n    _clearChanges() {\r\n      this._changeMask = 0;\r\n      for (var col in this._model.columns) {\r\n        if(col in this\r\n          && typeof this[col] !== 'undefined'\r\n          && typeof this[col]['clearChanges'] === 'function') {\r\n          this[col].clearChanges();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  interface Wrapper<I extends Instance<any>> {\r\n    ref: ClassTemplate<I>;\r\n    own: I;\r\n    get: () => Promise<I>;\r\n  }\r\n\r\n\r\n  /**\r\n   * Add a get/set property to the class\r\n   *\r\n   * @param model - class template\r\n   * @param proto - function prototype\r\n   * @param col - the column/field to set the property on\r\n   * @param propMask - the bits to set on <tt>_changes</tt>\r\n   * @private\r\n   */\r\n  function addClassProperty<K>(model: ClassTemplate<K>, proto: any, col: string, propMask: number) {\r\n    var prop = '_' + col;\r\n\r\n    switch(model.columns[col].type) {\r\n      default:\r\n        Object.defineProperty(proto, col, {\r\n          configurable: true,\r\n          get: function () {\r\n            return (<Instance<K>>this)[prop];\r\n          },\r\n          set: function (val) {\r\n            if ((<Instance<K>>this)[prop] !== val) {\r\n              (<Instance<K>>this)[prop] = val;\r\n              (<Instance<K>>this)._changeMask |= propMask;\r\n            }\r\n          }\r\n        });\r\n        break;\r\n\r\n      case ColumnType.ptr:\r\n        Object.defineProperty(proto, col, {\r\n          configurable: true,\r\n          get: function () {\r\n            var ref: ClassTemplate<any> = (<Instance<any>>this)._model.columns[col].ref;\r\n            console.assert(ref.get != null);\r\n            var ret: Wrapper<Instance<K>> = {\r\n              ref: ref,\r\n              own: (<Instance<K>>this),\r\n              get: function () { return (<Wrapper<K>>this).ref.get(this.own[prop]); }\r\n            };\r\n            ret[ref.key] = (<Instance<K>>this)[prop];\r\n            return ret;\r\n          },\r\n          set: function (val) {\r\n            // allow client to do object.field = otherobject; we'll transform it to object.field = otherobject._primaryKey()\r\n            val = keyOf(val);\r\n            if ((<Instance<K>>this)[prop] !== val) {\r\n              (<Instance<K>>this)[prop] = val;\r\n              (<Instance<K>>this)._changeMask |= propMask;\r\n            }\r\n          }\r\n        });\r\n        break;\r\n\r\n      case ColumnType.set:\r\n        Object.defineProperty(proto, col, {\r\n          configurable: true,\r\n          get: function() {\r\n            if(!(prop in (<Instance<K>>this))) {\r\n              var o: Instance<K> = this;\r\n              o[prop] = new Set(function() { o._changeMask |= propMask; });\r\n            }\r\n            return (<Instance<K>>this)[prop];\r\n          },\r\n          set: function(val) {\r\n            if(!(prop in (<Instance<K>>this))) {\r\n              var o: Instance<K> = this;\r\n              o[prop] = new Set(function() { o._changeMask |= propMask; });\r\n            }\r\n            (<Instance<K>>this)[prop].assign(val);\r\n            (<Instance<K>>this)._changeMask |= propMask;\r\n          }\r\n        });\r\n        break;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Add properties to a provided {@link Instance} subclass that can be created, saved and retrieved from the db\r\n   * @private\r\n   */\r\n  export function MakeClassTemplate<K>(templ: ClassTemplate<K>, store: Store) {\r\n    console.assert(store != null);\r\n    console.assert(templ != null);\r\n    console.assert(templ.tableName != null);\r\n    console.assert(templ.tableName[0] !== '_');\r\n    console.assert(templ.columns != null);\r\n    console.assert(Object.keys(templ.columns).length < 64);\r\n    console.assert(!('changes' in templ.columns));\r\n    console.assert(!('template' in templ.columns));\r\n    console.assert(!templ.renamedColumns || Object.keys(templ.renamedColumns).every(function (old) { return !(old in templ.columns); }));\r\n\r\n    // instance properties\r\n    var proto = (<any>templ).prototype;\r\n    Object.defineProperty(proto, '_model', { configurable: true, enumerable: true, value: templ });\r\n    Object.defineProperty(proto, '_store', { configurable: true, enumerable: true, value: store });\r\n\r\n    // class static methods/properties\r\n    templ.get = function (id: K): Promise<Instance<K>> {\r\n      return this.all.where(this.key, '=', id).get()\r\n      .then(function(results: Instance<K>[]) {\r\n        console.assert(results.length < 2);\r\n        if(results.length === 0) {\r\n          return null;\r\n        } else {\r\n          return results[0];\r\n        }\r\n      });\r\n    }\r\n\r\n    Object.defineProperty(templ, 'all', {\r\n      configurable: true,\r\n      get: function() {\r\n        return new Query(this, store);\r\n      }\r\n    });\r\n\r\n    templ.indices = templ.indices || [];\r\n\r\n    var key: string = null;\r\n    var keyType: ColumnType = null;\r\n\r\n    var propIdx = 0;\r\n    for(var col in templ.columns) {\r\n      if (templ.columns[col].isKey) {\r\n        key = col;\r\n        keyType = templ.columns[col].type;\r\n      }\r\n      if (templ.columns[col].isIndex) {\r\n        templ.indices.push([col]);\r\n      }\r\n\r\n      var propMask = (1 << propIdx++);\r\n      addClassProperty(templ, proto, col, propMask);\r\n      if (propIdx >= 63) {\r\n        throw new Error(\"class has too many columns- max 63\");\r\n      }\r\n    }\r\n\r\n    console.assert(key != null);\r\n\r\n    templ.key = key;\r\n    templ.keyType = keyType;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * construct object from a database result row\r\n   *\r\n   * @return Instance with fields initialized according to row, with _isInDb=true and no changes set\r\n   * @private\r\n   */\r\n  export function constructFromDb<K, I extends Instance<any>>(model: ClassTemplate<K>, row: Object): I {\r\n    var o: I = new (<any>model)();\r\n    console.assert(o instanceof Instance);\r\n    for(var col in row) {\r\n      var val = row[col];\r\n      var _col = '_' + col;\r\n      // TODO: refactor this into column class\r\n      switch(model.columns[col].type) {\r\n        case ColumnType.json:\r\n          o[_col] = JSON.parse(val);\r\n          break;\r\n        case ColumnType.date:\r\n        case ColumnType.datetime:\r\n          o[_col] = new Date(val * 1000);\r\n          break;\r\n        case ColumnType.enum:\r\n          var enumClass = o._model.columns[col].enum;\r\n          console.assert(enumClass != null);\r\n          if(typeof enumClass === 'object' && typeof (<EnumClass>enumClass).get == 'function') {\r\n            o[_col] = (<EnumClass>enumClass).get(val);\r\n          } else {\r\n            console.assert(val in enumClass);\r\n            o[_col] = enumClass[val];\r\n          }\r\n          break;\r\n        case ColumnType.set:\r\n          o[_col].push(val);\r\n          break;\r\n        default:\r\n          o[_col] = val;\r\n          break;\r\n      }\r\n    }\r\n\r\n    o._isInDb = true;\r\n    console.assert(o._changeMask === 0);\r\n    return o;\r\n  }\r\n\r\n}\r\n","/// <reference path=\"../typings/tsd.d.ts\" />\r\n/// <reference path=\"./util.ts\" />\r\n/// <reference path=\"./model.ts\" />\r\n/// <reference path=\"./websql.d.ts\" />\r\n\r\nmodule Updraft {\r\n\r\n\r\n  /**\r\n   * Column types.  Note that these are just column affinities, and technically any value type can be stored in any column type.\r\n   * see {@link https://www.sqlite.org/datatype3.html}\r\n   */\r\n  export enum ColumnType {\r\n    int,\r\n    real,\r\n    bool,\r\n    text,\r\n    blob,\r\n    enum,\r\n    date,\r\n    datetime,\r\n    json,\r\n    ptr,\r\n    set\r\n  }\r\n\r\n  /** An enum class (e.g. (this one)[https://github.com/adrai/enum]) should provide a static method 'get' to resolve strings into enum values */\r\n  export interface EnumClass {\r\n    get(value: string): any;\r\n  }\r\n\r\n  /** A typescript enum class will have string keys resolving to the enum values */\r\n  export interface TypeScriptEnum {\r\n    [enumValue: string]: number\r\n  }\r\n\r\n\r\n  /**\r\n   * Column in db.  Use static methods to create columns.\r\n   */\r\n  export class Column {\r\n    public isKey: boolean;\r\n    public isIndex: boolean;\r\n    public type: ColumnType;\r\n    public ref: ClassTemplate<any> /*| ColumnType*/; // TODO: add set(string|number|etc)\r\n    public setTable: ClassTemplate<any>;\r\n    public defaultValue: number | boolean | string;\r\n    public enum: EnumClass | TypeScriptEnum;\r\n\r\n    constructor(type: ColumnType) {\r\n      this.type = type;\r\n    }\r\n\r\n    /**\r\n     * Column is the primary key.  Only one column can have this set.\r\n     */\r\n    Key(value: boolean = true): Column {\r\n      this.isKey = value;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Create an index for this column for faster queries.\r\n     */\r\n    Index(value: boolean = true): Column {\r\n      this.isIndex = value;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Set a default value for the column\r\n     */\r\n     // TODO\r\n    Default(value: number | boolean | string): Column {\r\n      this.defaultValue = value;\r\n      return this;\r\n    }\r\n\r\n    /** create a column with 'INTEGER' affinity */\r\n    static Int(): Column {\r\n      return new Column(ColumnType.int);\r\n    }\r\n\r\n    /** create a column with 'REAL' affinity */\r\n    static Real(): Column {\r\n      return new Column(ColumnType.real);\r\n    }\r\n\r\n    /** create a column with 'BOOL' affinity */\r\n    static Bool(): Column {\r\n      return new Column(ColumnType.bool);\r\n    }\r\n\r\n    /** create a column with 'TEXT' affinity */\r\n    static Text(): Column {\r\n      return new Column(ColumnType.text);\r\n    }\r\n\r\n    /** create a column with 'TEXT' affinity */\r\n    static String(): Column {\r\n      return new Column(ColumnType.text);\r\n    }\r\n\r\n    /** create a column with 'BLOB' affinity */\r\n    static Blob(): Column {\r\n      var c = new Column(ColumnType.blob);\r\n      return c;\r\n    }\r\n\r\n    /** a javascript object with instance method 'toString' and class method 'get' (e.g. {@link https://github.com/adrai/enum}). */\r\n    static Enum(enum_: EnumClass | TypeScriptEnum): Column {\r\n      var c = new Column(ColumnType.enum);\r\n      c.enum = enum_;\r\n      return c;\r\n    }\r\n\r\n    /** a javascript Date objct, stored in db as seconds since Unix epoch (time_t) [note: precision is seconds] */\r\n    static Date(): Column {\r\n      return new Column(ColumnType.date);\r\n    }\r\n\r\n    /** a javascript Date objct, stored in db as seconds since Unix epoch (time_t) [note: precision is seconds] */\r\n    static DateTime(): Column {\r\n      return new Column(ColumnType.datetime);\r\n    }\r\n\r\n    /** object will be serialized & restored as JSON text */\r\n    static JSON(): Column {\r\n      return new Column(ColumnType.json);\r\n    }\r\n\r\n    /** points to an object in another table.  Its affinity will automatically be that table's key's affinity */\r\n    static Ptr(ref: ClassTemplate<any>): Column {\r\n      var c = new Column(ColumnType.ptr);\r\n      c.ref = ref;\r\n      return c;\r\n    }\r\n\r\n    /** unordered collection */\r\n    static Set(ref: ClassTemplate<any> /*| ColumnType*/): Column {\r\n      var c = new Column(ColumnType.set);\r\n      c.ref = ref;\r\n      return c;\r\n    }\r\n\r\n\r\n    static sqlType(type: ColumnType) : string {\r\n      switch(type) {\r\n        case ColumnType.int:\r\n          return 'INTEGER';\r\n        case ColumnType.bool:\r\n          return 'BOOL';\r\n        case ColumnType.real:\r\n          return 'REAL';\r\n        case ColumnType.text:\r\n        case ColumnType.json:\r\n        case ColumnType.enum:\r\n          return 'TEXT';\r\n        case ColumnType.blob:\r\n          return 'BLOB';\r\n        case ColumnType.date:\r\n          return 'DATE';\r\n        case ColumnType.datetime:\r\n          return 'DATETIME';\r\n        default:\r\n          throw new Error(\"unsupported type\");\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  export interface ColumnSet {\r\n    [name: string]: Column;\r\n  }\r\n\r\n\r\n  /**\r\n   * The parameters used to open a database\r\n   *\r\n   * @property name - the name of the database to open\r\n   */\r\n  export class StoreOptions {\r\n    name: string;\r\n  }\r\n\r\n\r\n  /**\r\n   * Database schema.  The outer keys will be the tables in the database.  The values will consist of an\r\n   * object whose keys will be the table's rows and values will be the row's type.  It will also have an\r\n   * '_indices' object with all the indices found.\r\n   * Note: tables or indices beginning with underscore or 'sqlite' will be ignored\r\n   *\r\n   * @private\r\n   * @example\r\n   * ```\r\n   *\r\n   *    var schema = {\r\n   *      'todos': {\r\n   *        _indices: {\r\n   *          'index_todos__name': 'CREATE INDEX ...',\r\n   *        },\r\n   *        _triggers: {\r\n   *          'trigger_todos__task': 'CREATE TRIGGER ...',\r\n   *        },\r\n   *        'id': 'INTEGER PRIMARY KEY',\r\n   *        'name': 'TEXT',\r\n   *      },\r\n   *      'tasks': {\r\n   *        'id': 'INTEGER PRIMARY KEY',\r\n   *        'description': 'TEXT',\r\n   *      }\r\n   *    };\r\n   * ```\r\n   */\r\n  export class Schema {\r\n    [table: string]: SchemaTable;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  export class SchemaTable {\r\n    _indices: Object;\r\n    _triggers: Object;\r\n    [column: string]: any;\r\n  }\r\n\r\n\r\n  /**\r\n   * Internal class used in key/value storage\r\n   * @private\r\n   */\r\n  class KeyValue extends Instance<string> {\r\n    static tableName: string = 'updraft_kv';\r\n    static columns: ColumnSet = {\r\n      key: Column.String().Key(),\r\n      value: Column.String(),\r\n    };\r\n    static all: Query<string, KeyValue>;\r\n    static get(id: string): Promise<KeyValue> { return null; }\r\n\r\n    key: string;\r\n    value: string;\r\n\r\n    constructor(props?: Object) {\r\n      super(props);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  export interface ExecCallback<T> {\r\n    (tx: SQLTransaction, results: SQLResultSet): T;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  function anyFcn(tx: SQLTransaction, results: SQLResultSet): any {}\r\n\r\n\r\n  /**\r\n   * Interface for creating classes & database interaction\r\n   */\r\n  export class Store {\r\n    logSql: boolean;\r\n    tables: ClassTemplate<any>[];\r\n    KeyValue: ClassTemplate<any>;\r\n    kv: Object;\r\n    db: Database;\r\n\r\n    constructor() {\r\n      var self = this;\r\n      this.logSql = false;\r\n\r\n      self.tables = [];\r\n      self.kv = {};\r\n\r\n      this.addClass(KeyValue);\r\n    }\r\n\r\n    /**\r\n     * create a new type whose instances can be stored in a database\r\n     * @param templ\r\n     */\r\n     addClass(templ: ClassTemplate<any>) {\r\n       MakeClassTemplate(templ, this);\r\n       this.tables.push(templ);\r\n     }\r\n\r\n\r\n    /**\r\n     * set a key/value pair\r\n     *\r\n     * @param key\r\n     * @param value - value will be stored as JSON text, so value can be any object that will\r\n     *        survive serialization\r\n     * @return a promise that will resolve once the value is saved.  Key/values are cached\r\n     *         on the <tt>Store</tt>, so you can use the value immediately and don't need to wait for\r\n     *         the promise to resolve.\r\n     */\r\n    set(key: string, value: Object): Promise<any> {\r\n      this.kv[key] = value;\r\n      var pair = new KeyValue({key: key, value: JSON.stringify(value)});\r\n      return this.save(pair);\r\n    }\r\n\r\n\r\n    /**\r\n     * gets a key/value pair.  Values are cached on the <tt>Store</tt> so they are immediately available\r\n     *\r\n     * @param key\r\n     * @return value\r\n     */\r\n    get(key: string): Object {\r\n      return this.kv[key];\r\n    }\r\n\r\n\r\n    /**\r\n     * read the key/value pairs from the database, caching them on the <tt>Store</tt>\r\n     * @private\r\n     */\r\n    loadKeyValues(): Promise<any> {\r\n      var self = this;\r\n      return KeyValue.all.get().then(function(vals: KeyValue[]) {\r\n        for(var i=0; i<vals.length; i++) {\r\n          var val = vals[i];\r\n          self.kv[val.key] = JSON.parse(val.value);\r\n        }\r\n      });\r\n    }\r\n\r\n\r\n    /**\r\n     * Delete all tables in database.  For development purposes; you probably don't want to ship with this.\r\n     *\r\n     * @param opts\r\n     * @return a promise that resolves when all tables are deleted\r\n     * @see {@link open}\r\n     * @example\r\n     * ```\r\n     *\r\n     *    store.purge({name: 'my cool db'}).then(function() {\r\n     *      // everything is gone\r\n     *    });\r\n     * ```\r\n     */\r\n    purge(opts: StoreOptions): Promise<any> {\r\n      console.assert(!this.db);\r\n\r\n      this.db = window.openDatabase(opts.name, '1.0', 'updraft created database', 5 * 1024 * 1024);\r\n      console.assert(this.db != null);\r\n\r\n      var self = this;\r\n      console.assert(this instanceof Store);\r\n      return self.readSchema()\r\n      .then(function(schema: Schema) {\r\n        return new Promise<any>(function(fulfill, reject) {\r\n          self.db.transaction(function(tx) {\r\n            var promises: Promise<any>[] = [];\r\n            Object.keys(schema).forEach(function(table) {\r\n              promises.push(self.exec(tx, 'DROP TABLE ' + table));\r\n            });\r\n            return Promise.all(promises)\r\n            .then(function() {\r\n              self.db = null;\r\n            })\r\n            .then(fulfill, reject);\r\n          });\r\n        });\r\n      });\r\n    }\r\n\r\n\r\n    /**\r\n     * open the database\r\n     *\r\n     * @param opts\r\n     * @return a promise that resolves with no parameters when the database is created and ready\r\n     * @example\r\n     * ```\r\n     *\r\n     *    store.open({name: 'my cool db'}).then(function() {\r\n     *      // start loading & saving objects\r\n     *    });\r\n     * ```\r\n     */\r\n    open(opts: StoreOptions): Promise<any> {\r\n      this.db = window.openDatabase(opts.name, '1.0', 'updraft created database', 5 * 1024 * 1024);\r\n      console.assert(this.db != null);\r\n\r\n      // add tables for 'set' columns\r\n      var setTables: ClassTemplate<any>[] = [];\r\n      for(var i=0; i<this.tables.length; i++) {\r\n        var table = this.tables[i];\r\n        for(var col in table.columns) {\r\n          if(table.columns[col].type === ColumnType.set) {\r\n            var ref = table.columns[col].ref;\r\n            console.assert(ref != null);\r\n            var setTable: ClassTemplate<number> = {\r\n              tableName: table.tableName + '_' + col,\r\n              recreate: table.recreate,\r\n              temp: table.temp,\r\n              key: '',\r\n              keyType: table.keyType,\r\n              columns: {},\r\n              indices: [ [table.key], [col] ],\r\n              get: function(id: number): Promise<Instance<number>> { throw new Error(\"not callable\"); }\r\n            };\r\n            setTable.columns[table.key] = new Column(table.keyType), // note: NOT setting key=true, as it would impose unique constraint\r\n            setTable.columns[col] = new Column(ref.keyType),\r\n            table.columns[col].setTable = setTable;\r\n            setTables.push(setTable);\r\n          }\r\n        }\r\n      }\r\n\r\n      this.tables = this.tables.concat(setTables);\r\n      var self = this;\r\n      console.assert(this instanceof Store);\r\n      return self.readSchema()\r\n              .then(self.syncTables.bind(self))\r\n              .then(self.loadKeyValues.bind(self));\r\n    }\r\n\r\n\r\n    /**\r\n     * close the database\r\n     */\r\n    close() {\r\n      this.db = null;\r\n      this.constructor();\r\n    }\r\n\r\n\r\n    /**\r\n     * exec a sql statement within a given transaction\r\n     *\r\n     * @param tx - a transaction created by <tt>db.transaction</tt> or <tt>db.readTransaction</tt>\r\n     * @param stmt - sql statement to execute\r\n     * @param args - array of strings to substitute into <tt>stmt</tt>\r\n     * @param callback - callback with parameters (transaction, [SQLResultSet]{@link http://www.w3.org/TR/webdatabase/#sqlresultset})\r\n     * @return a promise that resolves with (transaction, return value of the callback)\r\n     * @private\r\n     */\r\n    exec<T>(tx: SQLTransaction, stmt: string, args?: string[], callback: ExecCallback<T> = anyFcn): Promise<T> {\r\n      if(this.logSql) {\r\n        console.log(stmt, args);\r\n      }\r\n      var self = this;\r\n      return new Promise(function (fulfill, reject) {\r\n        try {\r\n          tx.executeSql(stmt, args,\r\n                        function (tx, results) {\r\n                          var ret = callback ? callback(tx, results) : null;\r\n                          return Promise.resolve(ret).then(fulfill, reject);\r\n                        },\r\n                        function (tx, error) {\r\n                          self.reportError(error);\r\n                          reject(error);\r\n                          return false;\r\n                        });\r\n        } catch (reason) {\r\n          console.log('Failed to exec \"' + stmt + '\":' + reason);\r\n          throw reason;\r\n        }\r\n      });\r\n    }\r\n\r\n\r\n    /**\r\n     * exec a sql statement within a new read transaction\r\n     *\r\n     * @param stmt - sql statement to execute\r\n     * @param args - array of strings to substitute into <tt>stmt</tt>\r\n     * @param callback - callback with parameters (transaction, [SQLResultSet]{@link http://www.w3.org/TR/webdatabase/#sqlresultset})\r\n     * @return a promise that resolves with (transaction, return value of the callback)\r\n     * @private\r\n     */\r\n    execRead<T>(stmt: string, args: string[], callback: ExecCallback<T>): Promise<T> {\r\n      var self = this;\r\n      console.assert(self.db != null);\r\n      return new Promise(function (fulfill, reject) {\r\n        self.db.readTransaction(function (rtx) {\r\n          return self.exec(rtx, stmt, args, callback)\r\n                  .then(fulfill, reject);\r\n        });\r\n      });\r\n    }\r\n\r\n\r\n    reportError(error: SQLError) {\r\n      switch (error.code) {\r\n        case error.SYNTAX_ERR:\r\n          console.log(\"Syntax error: \" + error.message);\r\n          break;\r\n        default:\r\n          console.log(error);\r\n      }\r\n    }\r\n\r\n\r\n    /**\r\n     * get the existing database's schema in object form\r\n     *\r\n     * @return a promise that resolves with the {@link Schema}\r\n     */\r\n    readSchema(): Promise<Schema> {\r\n      function tableFromSql(sql: string): SchemaTable {\r\n        var table = <SchemaTable>{ _indices: {}, _triggers: {} };\r\n        var matches = sql.match(/\\((.*)\\)/);\r\n        if (matches) {\r\n          var fields = matches[1].split(',');\r\n          for (var i = 0; i < fields.length; i++) {\r\n            var ignore = /^\\s*(primary|foreign)\\s+key/i;  // ignore standalone 'PRIMARY KEY xxx'\r\n            if (fields[i].match(ignore)) {\r\n              continue;\r\n            }\r\n            var quotedName = /\"(.+)\"\\s+(.*)/;\r\n            var unquotedName = /(\\w+)\\s+(.*)/;\r\n            var parts = fields[i].match(quotedName);\r\n            if (!parts) {\r\n              parts = fields[i].match(unquotedName);\r\n            }\r\n            if (parts) {\r\n              table[parts[1]] = parts[2];\r\n            }\r\n          }\r\n        }\r\n        return table;\r\n      }\r\n\r\n      return this.execRead('SELECT name, tbl_name, type, sql FROM sqlite_master', [], function (tx, results) {\r\n        /*jshint camelcase:false*/\r\n        var schema: Schema = {};\r\n        for (var i = 0; i < results.rows.length; i++) {\r\n          var row: any = results.rows.item(i);\r\n          if (row.name[0] != '_' && !startsWith(row.name, 'sqlite')) {\r\n            switch (row.type) {\r\n              case 'table':\r\n                schema[row.name] = tableFromSql(row.sql);\r\n                break;\r\n              case 'index':\r\n                schema[row.tbl_name]._indices = schema[row.tbl_name]._indices || {};\r\n                schema[row.tbl_name]._indices[row.name] = row.sql;\r\n                break;\r\n              case 'trigger':\r\n                schema[row.tbl_name]._triggers = schema[row.tbl_name]._triggers || {};\r\n                schema[row.tbl_name]._triggers[row.name] = row.sql;\r\n                break;\r\n            }\r\n          }\r\n        }\r\n        return schema;\r\n      });\r\n    }\r\n\r\n\r\n    /**\r\n     * Check whether the tables in the current database match up with the ClassFactories.\r\n     * They will be created or modified as needed.\r\n     *\r\n     * @param schema\r\n     * @return A promise that resolves with no parameters once all tables are up-to-date.\r\n     * @private\r\n     */\r\n    syncTables(schema: Schema): Promise<any> {\r\n      var self = this;\r\n      console.assert(self.db != null);\r\n      return new Promise(function (fulfill, reject) {\r\n        self.db.transaction(function (tx) {\r\n          return Promise.all(self.tables.map(function (f) { return self.syncTable(tx, schema, f); }))\r\n            .then(fulfill, reject);\r\n        });\r\n      });\r\n    }\r\n\r\n\r\n    /**\r\n     * Check whether an individual table in the current database matches up with its corresponding ClassTemplate.\r\n     * It will be created or modified as needed.\r\n     *\r\n     * @param tx - a writeable transaction\r\n     * @param schema\r\n     * @param f\r\n     * @return A promise that resolves with no parameters once the table is up-to-date.\r\n     * @private\r\n     */\r\n    syncTable(tx: SQLTransaction, schema: Schema, f: ClassTemplate<any>): Promise<any> {\r\n      var self = this;\r\n      // execute CREATE TABLE statement\r\n      function createTable(name: string): Promise<any> {\r\n        var cols: string[] = [];\r\n        for (var col in f.columns) {\r\n          var attrs: Column = f.columns[col];\r\n          var decl: string;\r\n          switch (attrs.type) {\r\n            case ColumnType.ptr:\r\n              console.assert(attrs.ref != null);\r\n              console.assert(attrs.ref.columns != null);\r\n              console.assert(attrs.ref.tableName != null);\r\n              console.assert(attrs.ref.key != null);\r\n              var foreignType: ColumnType = attrs.ref.columns[attrs.ref.key].type;\r\n              decl = col + ' ' + Column.sqlType(foreignType);\r\n              cols.push(decl);\r\n              break;\r\n\r\n            case ColumnType.set:\r\n              break;\r\n\r\n            default:\r\n              decl = col + ' ' + Column.sqlType(attrs.type);\r\n              if (f.key === col) {\r\n                decl += ' PRIMARY KEY';\r\n              }\r\n              cols.push(decl);\r\n          }\r\n        }\r\n        return self.exec(tx, 'CREATE ' + (f.temp ? 'TEMP ' : '') + 'TABLE ' + name + ' (' + cols.join(', ') + ')');\r\n      }\r\n\r\n      function dropTable(name: string): Promise<any> {\r\n        return self.exec(tx, 'DROP TABLE ' + name);\r\n      }\r\n\r\n      function createIndices(force: boolean = false): Promise<any> {\r\n        var promises: Promise<any>[] = [];\r\n        var toRemove = (f.tableName in schema) ? clone(schema[f.tableName]._indices) : {};\r\n        f.indices.forEach(function (index: string[]) {\r\n          var name = 'index_' + f.tableName + '__' + index.join('_');\r\n          var sql = 'CREATE INDEX ' + name + ' ON ' + f.tableName + ' (' + index.join(', ') + ')';\r\n          delete toRemove[name];\r\n          var create = true;\r\n          var drop = false;\r\n          if (schema[f.tableName] && schema[f.tableName]._indices && schema[f.tableName]._indices[name]) {\r\n            if (schema[f.tableName]._indices[name] === sql) {\r\n              create = false;\r\n            } else {\r\n              drop = true;\r\n            }\r\n          }\r\n\r\n          if (drop) {\r\n            promises.push(self.exec(tx, 'DROP INDEX ' + name));\r\n          }\r\n          if (create || force) {\r\n            promises.push(self.exec(tx, sql));\r\n          }\r\n        });\r\n\r\n        // delete orphaned indices\r\n        Object.keys(toRemove).forEach(function (name: string) {\r\n          promises.push(self.exec(tx, 'DROP INDEX ' + name));\r\n        });\r\n        return Promise.all(promises);\r\n      }\r\n\r\n      // check if table already exists\r\n      if (f.tableName in schema) {\r\n        if (f.recreate) {\r\n          return Promise.all([\r\n            dropTable(f.tableName),\r\n            createTable(f.tableName),\r\n            createIndices(true),\r\n          ]);\r\n        } else {\r\n          //console.log(\"table \" + f.tableName + \" exists; checking columns\");\r\n          var columns = clone(schema[f.tableName]);\r\n          delete columns._indices;\r\n          delete columns._triggers;\r\n          var key: string;\r\n\r\n          var addedColumns: string[] = [];\r\n          var addedForeignKey = false;\r\n          for (key in f.columns) {\r\n            if (!(key in columns)) {\r\n              addedColumns.push(key);\r\n              if (f.columns[key].ref) {\r\n                addedForeignKey = true;\r\n              }\r\n            }\r\n          }\r\n\r\n          var renamedColumns = clone(f.renamedColumns) || {};\r\n          for (key in Object.keys(renamedColumns)) {\r\n            if (!(key in columns)) {\r\n              delete renamedColumns[key];\r\n            }\r\n          }\r\n\r\n          var deletedColumns = Object.keys(columns).filter(function (col) {\r\n            return !(col in f.columns);\r\n          });\r\n\r\n          if (addedForeignKey || Object.keys(renamedColumns).length > 0 || deletedColumns.length > 0) {\r\n            // must recreate table and migrate data\r\n            var copyData = function (oldName: string, newName: string) {\r\n              var oldTableColumns = Object.keys(columns).filter(function (col) { return (col in f.columns) || (col in renamedColumns); });\r\n              var newTableColumns = oldTableColumns.map(function (col) { return (col in renamedColumns) ? renamedColumns[col] : col; });\r\n              if(oldTableColumns.length && newTableColumns.length) {\r\n                var stmt = \"INSERT INTO \" + newName + \" (\" + newTableColumns.join(\", \") + \") \";\r\n                stmt += \"SELECT \" + oldTableColumns.join(\", \") + \" FROM \" + oldName + \";\";\r\n                return self.exec(tx, stmt);\r\n              }\r\n            };\r\n\r\n            var renameTable = function (oldName: string, newName: string) {\r\n              return self.exec(tx, 'ALTER TABLE ' + oldName + ' RENAME TO ' + newName);\r\n            };\r\n\r\n            var newTableName = 'new_' + f.tableName;\r\n            console.assert(!(newTableName in schema));\r\n\r\n            return Promise.all([\r\n                createTable(newTableName),\r\n                copyData(f.tableName, newTableName),\r\n                dropTable(f.tableName),\r\n                renameTable(newTableName, f.tableName),\r\n                createIndices(true)\r\n              ]);\r\n\r\n          } else if (addedColumns.length > 0) {\r\n            // alter table, add columns\r\n            var promises: Promise<any>[] = [];\r\n            addedColumns.forEach(function (columnName: string) {\r\n              var attrs: Column = f.columns[columnName];\r\n              var columnDecl = columnName + ' ' + Column.sqlType(attrs.type);\r\n              promises.push(self.exec(tx, 'ALTER TABLE ' + f.tableName + ' ADD COLUMN ' + columnDecl));\r\n            });\r\n            promises.push(createIndices());\r\n            return Promise.all(promises);\r\n          } else {\r\n            // no table modification is required\r\n            return createIndices();\r\n          }\r\n        }\r\n      } else {\r\n        //console.log('creating table: ' + f.tableName);\r\n        return Promise.all([\r\n          createTable(f.tableName),\r\n          createIndices(true)\r\n        ]);\r\n      }\r\n    }\r\n\r\n\r\n    /**\r\n     * Save all objects to database.  Atomic operation- all objects will be saved within the same transaction\r\n     * or nothing will be written.  Objects can be heterogeneous.\r\n     *\r\n     * @param objects - objects to save\r\n     */\r\n    save(...objects: Instance<any>[]) {\r\n      objects.map(function (o: Instance<any>) {\r\n        console.assert(('_' + o._model.key) in o, \"object must have a key\");\r\n      });\r\n\r\n      var self = this;\r\n\r\n      return new Promise(function (resolve, reject) {\r\n        self.db.transaction(function (tx: SQLTransaction): Promise<any> {\r\n          function value(o: Instance<any>, col: string) {\r\n            var val = o['_' + col];\r\n            switch(o._model.columns[col].type) {\r\n              case ColumnType.date:\r\n              case ColumnType.datetime:\r\n                if(typeof val !== 'undefined') {\r\n                  console.assert(val instanceof Date);\r\n                  val = Math.floor(val.getTime() / 1000);\r\n                }\r\n                break;\r\n\r\n              case ColumnType.json:\r\n                val = JSON.stringify(val);\r\n                break;\r\n\r\n              case ColumnType.enum:\r\n                console.assert(o._model.columns[col].enum != null);\r\n                val = val.toString();\r\n                break;\r\n\r\n              default:\r\n                console.assert(typeof val !== 'object');\r\n                break;\r\n            }\r\n            return val;\r\n          }\r\n\r\n          function insertSets(o: Instance<any>, force: boolean): Promise<boolean> {\r\n            var changes = o._changes();\r\n            var f = o._model;\r\n            var promises: Promise<void>[] = [];\r\n            Object.keys(f.columns)\r\n            .filter(function(col: string) {\r\n              return (f.columns[col].type === ColumnType.set) && (force || changes.indexOf(col) > -1);\r\n            })\r\n            .forEach(function(col: string) {\r\n              var ref = f.columns[col].ref;\r\n              var setTable = f.columns[col].setTable;\r\n              console.assert(ref != null);\r\n              console.assert(setTable != null);\r\n              var set: Set<any> = o['_' + col];\r\n              if(set) {\r\n                var key = o._primaryKey();\r\n                var deletions: string[] = set.getRemoved();\r\n                var additions: string[] = set.getAdded();\r\n                deletions.forEach(function(del: string) {\r\n                  promises.push( self.exec<void>(tx, 'DELETE FROM ' + setTable.tableName + ' WHERE ' + f.key + '=? AND ' + col + '=?', [ key, del ]) );\r\n                });\r\n                additions.forEach(function(add: string) {\r\n                  promises.push( self.exec<void>(tx, 'INSERT INTO ' + setTable.tableName + ' (' + f.key + ', ' + col + ') VALUES (?, ?)', [key, add]) );\r\n                });\r\n              }\r\n            });\r\n            return Promise.all(promises).then(() => true);\r\n          }\r\n\r\n          function insert(o: Instance<any>, callback: (changes: boolean) => Promise<boolean> = null): Promise<boolean> {\r\n            var f = o._model;\r\n            var isNotSet = function(col: string) { return f.columns[col].type !== ColumnType.set; };\r\n            var cols = Object.keys(f.columns).filter(isNotSet);\r\n            var columns = cols.join(', ');\r\n            var values = cols.map(function () { return '?'; }).join(', ');\r\n            var args = cols.map(function(col) { return value(o, col); });\r\n            return self.exec(tx, 'INSERT OR IGNORE INTO ' + f.tableName + ' (' + columns + ') VALUES (' + values + ')', args, function (tx, results) {\r\n              var changes = results.rowsAffected !== 0;\r\n              return callback ? callback(changes) : changes;\r\n            });\r\n          }\r\n\r\n          function update(o: Instance<any>, callback: (changes: boolean) => Promise<boolean> = null): Promise<boolean> {\r\n            var f = o._model;\r\n            var cols = o._changes();\r\n            var isNotSet = function(col: string) { return f.columns[col].type !== ColumnType.set; };\r\n            var isNotKey = function(col: string) { return col !== f.key; };\r\n            var assignments = cols\r\n              .filter(isNotSet)\r\n              .filter(isNotKey)\r\n              .map(function (col) { return col + '=?'; })\r\n              .join(', ');\r\n            var values = cols\r\n              .filter(isNotSet)\r\n              .filter(isNotKey)\r\n              .map(function(col) { return value(o, col); });\r\n            values.push(o['_' + f.key]); // for WHERE clause\r\n            return self.exec(tx, 'UPDATE OR IGNORE ' + f.tableName + ' SET ' + assignments + ' WHERE ' + f.key + '=?', values, function (tx, results) {\r\n              var changes = results.rowsAffected !== 0;\r\n              return callback ? callback(changes) : changes;\r\n            });\r\n          }\r\n\r\n          var upsert = function (o: Instance<any>): Promise<any> {\r\n            var p: Promise<any>;\r\n            if (o._isInDb) {\r\n              p = update(o, function (changed) { return changed ? insertSets(o, false) : insert(o); });\r\n            } else {\r\n              p = insert(o, function (changed) { return changed ? insertSets(o, true) : update(o); });\r\n            }\r\n            return p\r\n            .then(function (changed: boolean) {\r\n              console.assert(changed);\r\n              if(changed) {\r\n                o._clearChanges();\r\n                o._isInDb = true;\r\n              }\r\n            });\r\n          };\r\n\r\n          return Promise.all(objects.map(upsert)).then(resolve, reject);\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","/// <reference path=\"./store.ts\" />\r\n/// <reference path=\"./query.ts\" />\r\n\r\nmodule Updraft {\r\n}\r\n\r\ndeclare var module: any;\r\nif(typeof module !== \"undefined\") {\r\n\tmodule.exports = Updraft;\r\n}"],"sourceRoot":"/source/"}