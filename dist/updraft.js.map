{"version":3,"sources":["webpack:///webpack/bootstrap 3c33b763de3558f2a7d6","webpack:///./index.ts","webpack:///./Column.ts","webpack:///./verify.ts","webpack:///./Mutate.ts","webpack:///./assign.ts","webpack:///./Query.ts","webpack:///./Store.ts","webpack:///./Table.ts","webpack:///./SQLiteWrapper.ts","webpack:///./WebsqlWrapper.ts"],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC,oDAAoD;AACrD,+CAA8C,cAAc;AAC5D;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC,gDAAgD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8FAA6F,oCAAoC;AACjqBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA,kEAAiE,wCAAwC,EAAE;AAC3G,+BAA8B;AAC9B;AACA;AACA;AACA;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B;AAC3B,sBAAqB,4BAA4B;AACjD;AACA;AACA,iBAAgB,aAAa;AAC7B,uBAAsB,aAAa;AACnC,kBAAiB,cAAc;AAC/B,qBAAoB,iBAAiB;AACrC,oBAAmB,gBAAgB;AACnC,mBAAkB,eAAe;AACjC,iBAAgB,aAAa;AAC7B,qBAAoB,gBAAgB;AACpC;AACA;AACA,2FAA0F;AAC1F;AACA,6FAA4F;AAC5F;AACA;AACA;AACA,wFAAuF;AACvF;AACA,6FAA4F;AAC5F;AACA;AACA;AACA;AACA,4CAA2C,QAAQ;AACnD;AACA;AACA;AACA,UAAS;AACT,gDAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iHAAgH;AAChH,yHAAwH;AACxH;AACA;AACA;AACA;AACA;AACA,uGAAsG;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAiF;AACjF,sHAAqH;AACrH;AACA;AACA,0GAAyG;AACzG;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC7MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC/BA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB,2BAA2B,aAAa;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA,8CAA6C,uCAAuC;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAA+B,2BAA2B,EAAE;AAC5D,sCAAqC,iCAAiC,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA,0BAAyB,wBAAwB,2BAA2B;AAC5E;AACA;AACA;AACA;AACA,gCAA+B,mBAAmB;AAClD,iEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC,iBAAiB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA2D,iBAAiB,EAAE;AAC9E;AACA;AACA;AACA;AACA,gCAA+B,sBAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAwC,oDAAoD,EAAE;AAC9F,cAAa;AACb;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAmC,eAAe;AAClD;AACA;AACA;AACA;AACA,gCAA+B,cAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAA+B,uBAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,6CAA4C,4EAA4E,EAAE;AAC1H;AACA,cAAa;AACb;AACA;AACA,gCAA+B,uBAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA4C,oCAAoC,EAAE;AAClF;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAAyF,yDAAyD,EAAE;AACpJ,+EAA8E,4DAA4D,EAAE;AAC5I;AACA;AACA;AACA,iGAAgG;AAChG;AACA;AACA;AACA;AACA;AACA,yFAAwF,2DAA2D,EAAE;AACrJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAgD,4BAA4B;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA4C,iCAAiC,EAAE;AAC/E;AACA,yCAAwC,mCAAmC,EAAE;AAC7E,yCAAwC,2CAA2C,EAAE;AACrF,yCAAwC,6BAA6B,EAAE;AACvE,yCAAwC,8CAA8C,EAAE;AACxF,yCAAwC,4CAA4C,EAAE;AACtF,yCAAwC,4BAA4B,EAAE;AACtE;AACA,wCAAuC;AACvC;AACA;AACA;AACA;AACA,6CAA4C,yFAAyF,EAAE;AACvI,kBAAiB;AACjB,yCAAwC,wBAAwB,EAAE;AAClE;AACA;AACA;AACA,yCAAwC,wBAAwB,EAAE;AAClE;AACA;AACA;AACA;AACA,qCAAoC,+BAA+B,EAAE;AACrE,qCAAoC,4BAA4B,EAAE;AAClE;AACA;AACA;AACA;AACA;AACA,yBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA,0DAAyD,YAAY,EAAE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA4E,gCAAgC,EAAE;AAC9G,4DAA2D,mBAAmB,EAAE;AAChF;AACA;AACA;AACA,+CAA8C,8DAA8D,EAAE;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA2D,qBAAqB,EAAE;AAClF,+CAA8C,0DAA0D,EAAE;AAC1G;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,2CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC,0BAA0B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAsD;AACtD;AACA,6EAA4E,EAAE;AAC9E;AACA;AACA;AACA,uDAAsD;AACtD;AACA,6EAA4E,EAAE;AAC9E;AACA;AACA;AACA;AACA,wFAAuF,+DAA+D,EAAE;AACxJ,sEAAqE,sBAAsB,EAAE;AAC7F,uDAAsD,sDAAsD,EAAE;AAC9G;AACA;AACA,sBAAqB;AACrB,kBAAiB,EAAE,EAAE;AACrB,cAAa;AACb;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,aAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAwF,YAAY,EAAE;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;;;;;;;ACnmBA;AACA;AACA;AACA;AACA;AACA,EAAC,0CAA0C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAgD,0BAA0B,EAAE;AAC5E;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,gCAA+B,uCAAuC,EAAE;AACxE;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,mCAAkC,qBAAqB,EAAE;AACzD,gCAA+B,wCAAwC,EAAE;AACzE,gCAA+B,eAAe,EAAE;AAChD;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;;;;;;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAA+B,2BAA2B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,gCAA+B,2BAA2B;AAC1D;AACA;AACA;AACA,qDAAoD,0BAA0B,EAAE;AAChF,0BAAyB;AACzB;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA,EAAC;AACD;AACA;AACA;AACA","file":"updraft.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 3c33b763de3558f2a7d6\n **/","\"use strict\";\nvar Column_ = require(\"./Column\");\nvar Mutate_ = require(\"./Mutate\");\nvar Query_ = require(\"./Query\");\nvar Store_ = require(\"./Store\");\nvar Table_ = require(\"./Table\");\nvar SQLiteWrapper_ = require(\"./SQLiteWrapper\");\nvar WebsqlWrapper_ = require(\"./WebsqlWrapper\");\nvar Updraft;\n(function (Updraft) {\n    Updraft.Query = Query_;\n    Updraft.Mutate = Mutate_;\n    Updraft.ColumnType = Column_.ColumnType;\n    Updraft.Column = Column_.Column;\n    Updraft.OrderBy = Table_.OrderBy;\n    Updraft.Table = Table_.Table;\n    Updraft.Store = Store_.Store;\n    Updraft.createStore = Store_.createStore;\n    Updraft.mutate = Mutate_.mutate;\n    Updraft.wrapSql = SQLiteWrapper_.wrapSql;\n    Updraft.wrapWebSql = WebsqlWrapper_.wrapWebsql;\n})(Updraft = exports.Updraft || (exports.Updraft = {}));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Updraft;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.ts\n ** module id = 0\n ** module chunks = 0\n **/","\"use strict\";\nvar verify_1 = require(\"./verify\");\n(function (ColumnType) {\n    ColumnType[ColumnType[\"int\"] = 0] = \"int\";\n    ColumnType[ColumnType[\"real\"] = 1] = \"real\";\n    ColumnType[ColumnType[\"bool\"] = 2] = \"bool\";\n    ColumnType[ColumnType[\"text\"] = 3] = \"text\";\n    ColumnType[ColumnType[\"blob\"] = 4] = \"blob\";\n    // enum,\n    ColumnType[ColumnType[\"date\"] = 5] = \"date\";\n    ColumnType[ColumnType[\"datetime\"] = 6] = \"datetime\";\n    ColumnType[ColumnType[\"json\"] = 7] = \"json\";\n    ColumnType[ColumnType[\"ptr\"] = 8] = \"ptr\";\n    ColumnType[ColumnType[\"set\"] = 9] = \"set\";\n})(exports.ColumnType || (exports.ColumnType = {}));\nvar ColumnType = exports.ColumnType;\n/**\n * Column in db.  Use static methods to create columns.\n */\nvar Column = (function () {\n    //public enum: EnumClass | TypeScriptEnum;\n    function Column(type) {\n        this.type = type;\n        if (type == ColumnType.bool) {\n            this.defaultValue = 0;\n        }\n    }\n    /**\n        * Column is the primary key.  Only one column can have this set.\n        */\n    Column.prototype.Key = function () {\n        this.isKey = true;\n        return this;\n    };\n    /**\n        * Create an index for this column for faster queries.\n        */\n    Column.prototype.Index = function () {\n        this.isIndex = true;\n        return this;\n    };\n    /**\n        * Set a default value for the column\n        */\n    // TODO\n    Column.prototype.Default = function (value) {\n        if (this.type == ColumnType.bool) {\n            value = (value != false) ? 1 : 0;\n        }\n        this.defaultValue = value;\n        return this;\n    };\n    /** create a column with \"INTEGER\" affinity */\n    Column.Int = function () {\n        return new Column(ColumnType.int);\n    };\n    /** create a column with \"REAL\" affinity */\n    Column.Real = function () {\n        return new Column(ColumnType.real);\n    };\n    /** create a column with \"BOOL\" affinity */\n    Column.Bool = function () {\n        return new Column(ColumnType.bool);\n    };\n    /** create a column with \"TEXT\" affinity */\n    Column.Text = function () {\n        return new Column(ColumnType.text);\n    };\n    /** create a column with \"TEXT\" affinity */\n    Column.String = function () {\n        return new Column(ColumnType.text);\n    };\n    /** create a column with \"BLOB\" affinity */\n    Column.Blob = function () {\n        var c = new Column(ColumnType.blob);\n        return c;\n    };\n    // /** a javascript object with instance method \"toString\" and class method \"get\" (e.g. {@link https://github.com/adrai/enum}). */\n    // static Enum(enum_: EnumClass | TypeScriptEnum): Column {\n    //   let c = new Column(ColumnType.enum);\n    //   c.enum = enum_;\n    //   return c;\n    // }\n    /** a javascript Date objct, stored in db as seconds since Unix epoch (time_t) [note: precision is seconds] */\n    Column.Date = function () {\n        return new Column(ColumnType.date);\n    };\n    /** a javascript Date objct, stored in db as seconds since Unix epoch (time_t) [note: precision is seconds] */\n    Column.DateTime = function () {\n        return new Column(ColumnType.datetime);\n    };\n    /** object will be serialized & restored as JSON text */\n    Column.JSON = function () {\n        return new Column(ColumnType.json);\n    };\n    // /** points to an object in another table.  Its affinity will automatically be that table's key's affinity */\n    // static Ptr(ref: ClassTemplate<any>): Column {\n    //   let c = new Column(ColumnType.ptr);\n    //   c.ref = ref;\n    //   return c;\n    // }\n    // /** unordered collection */\n    // static Set(ref: ClassTemplate<any> /*| ColumnType*/): Column {\n    //   let c = new Column(ColumnType.set);\n    //   c.ref = ref;\n    //   return c;\n    // }\n    Column.sql = function (val) {\n        var stmt = \"\";\n        switch (val.type) {\n            case ColumnType.int:\n                stmt = \"INTEGER\";\n                break;\n            case ColumnType.bool:\n                stmt = \"BOOLEAN\";\n                break;\n            case ColumnType.real:\n                stmt = \"REAL\";\n                break;\n            case ColumnType.text:\n                stmt = \"TEXT\";\n                break;\n            case ColumnType.json:\n                stmt = \"CLOB\";\n                break;\n            // case ColumnType.enum:\n            // \tstmt = \"CHARACTER(20)\";\n            // \tbreak;\n            case ColumnType.blob:\n                stmt = \"BLOB\";\n                break;\n            case ColumnType.date:\n                stmt = \"DATE\";\n                break;\n            case ColumnType.datetime:\n                stmt = \"DATETIME\";\n                break;\n            default:\n                throw new Error(\"unsupported type\");\n        }\n        if (\"defaultValue\" in val) {\n            function escape(x) {\n                if (typeof x === \"number\") {\n                    return x;\n                }\n                else if (typeof x === \"string\") {\n                    return \"'\" + x.replace(/'/g, \"''\") + \"'\";\n                }\n                else {\n                    verify_1.verify(false, \"default value (%s) must be number or string\", x);\n                }\n            }\n            stmt += \" DEFAULT \" + escape(val.defaultValue);\n        }\n        return stmt;\n    };\n    Column.fromSql = function (text) {\n        var parts = text.split(\" \");\n        var col = null;\n        switch (parts[0]) {\n            case \"INTEGER\":\n                col = Column.Int();\n                break;\n            case \"BOOLEAN\":\n                col = Column.Bool();\n                break;\n            case \"REAL\":\n                col = Column.Real();\n                break;\n            case \"TEXT\":\n                col = Column.Text();\n                break;\n            case \"CLOB\":\n                col = Column.JSON();\n                break;\n            // case \"CHARACTER(20)\";\n            // \tcol = Column.Enum()\n            // \tbreak;\n            case \"DATE\":\n                col = Column.Date();\n                break;\n            case \"DATETIME\":\n                col = Column.DateTime();\n                break;\n            default:\n                throw new Error(\"unsupported type: \" + parts[0]);\n        }\n        var match = text.match(/DEFAULT\\s+'((?:[^']|'')*)'/i);\n        if (match) {\n            var val = match[1].replace(/''/g, \"'\");\n            col.Default(val);\n        }\n        else {\n            match = text.match(/DEFAULT\\s+(\\w+)/i);\n            if (match) {\n                var val = match[1];\n                var valnum = parseInt(val, 10);\n                if (val == valnum) {\n                    val = valnum;\n                }\n                col.Default(val);\n            }\n        }\n        return col;\n    };\n    Column.equal = function (a, b) {\n        if (a.type != b.type) {\n            return false;\n        }\n        if ((a.defaultValue || b.defaultValue) && (a.defaultValue != b.defaultValue)) {\n            return false;\n        }\n        if ((a.isKey || b.isKey) && (a.isKey != b.isKey)) {\n            return false;\n        }\n        return true;\n    };\n    return Column;\n})();\nexports.Column = Column;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Column.ts\n ** module id = 1\n ** module chunks = 0\n **/","\"use strict\";\n/**\n * Use verify() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n */\nfunction makePrintable(x) {\n    if (Array.isArray(x) || (x && typeof x === \"object\")) {\n        return JSON.stringify(x);\n    }\n    else {\n        return x;\n    }\n}\nfunction verify(condition, format) {\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n    }\n    if (!condition) {\n        var argIndex = 0;\n        var error = new Error(format.replace(/%s/g, function () { return makePrintable(args[argIndex++]); }));\n        error.framesToPop = 1; // we don't care about verify's own frame\n        throw error;\n    }\n}\nexports.verify = verify;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./verify.ts\n ** module id = 2\n ** module chunks = 0\n **/","// written to React\"s immutability helpers spec\n// see https://facebook.github.io/react/docs/update.html\n///<reference path=\"../typings/tsd.d.ts\"/>\n\"use strict\";\nvar assign_1 = require(\"./assign\");\nvar verify_1 = require(\"./verify\");\nfunction shallowCopy(x) {\n    if (Array.isArray(x)) {\n        return x.concat();\n    }\n    else if (x instanceof Set) {\n        return new Set(x);\n    }\n    else if (x && typeof x === \"object\") {\n        return assign_1.assign(new x.constructor(), x);\n    }\n    else {\n        return x;\n    }\n}\nexports.shallowCopy = shallowCopy;\nfunction shallowEqual(a, b) {\n    if (Array.isArray(a) && Array.isArray(b)) {\n        var aa = a;\n        var bb = b;\n        if (aa.length == bb.length) {\n            for (var i = 0; i < aa.length; i++) {\n                if (aa[i] != bb[i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    else if (a instanceof Set && b instanceof Set) {\n        var aa = a;\n        var bb = b;\n        if (aa.size == bb.size) {\n            for (var elt in aa) {\n                if (!bb.has(elt)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    else if (typeof a == \"object\" && typeof b == \"object\") {\n        var akeys = Object.keys(a);\n        var bkeys = Object.keys(b);\n        if (akeys.length == bkeys.length) {\n            for (var _i = 0; _i < akeys.length; _i++) {\n                var key = akeys[_i];\n                if (!(key in b) || a[key] != b[key]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    return a == b;\n}\nexports.hasOwnProperty = {}.hasOwnProperty;\nfunction keyOf(obj) { return Object.keys(obj)[0]; }\nexports.keyOf = keyOf;\nvar command = {\n    set: keyOf({ $set: null }),\n    increment: keyOf({ $inc: null }),\n    push: keyOf({ $push: null }),\n    unshift: keyOf({ $unshift: null }),\n    splice: keyOf({ $splice: null }),\n    merge: keyOf({ $merge: null }),\n    add: keyOf({ $add: null }),\n    deleter: keyOf({ $delete: null }),\n};\nfunction verifyArrayCase(value, spec, c) {\n    verify_1.verify(Array.isArray(value), \"mutate(): expected target of %s to be an array; got %s.\", c, value);\n    var specValue = spec[c];\n    verify_1.verify(Array.isArray(specValue), \"mutate(): expected spec of %s to be an array; got %s. \" +\n        \"Did you forget to wrap your parameter in an array?\", c, specValue);\n}\nfunction verifySetCase(value, spec, c) {\n    verify_1.verify(value instanceof Set, \"mutate(): expected target of %s to be a set; got %s.\", c, value);\n    var specValue = spec[c];\n    verify_1.verify(Array.isArray(specValue), \"mutate(): expected spec of %s to be an array; got %s. \" +\n        \"Did you forget to wrap your parameter in an array?\", c, specValue);\n}\nfunction mutate(value, spec) {\n    verify_1.verify(typeof spec === \"object\", \"mutate(): You provided a key path to mutate() that did not contain one \" +\n        \"of %s. Did you forget to include {%s: ...}?\", Object.keys(command).join(\", \"), command.set);\n    // verify(\n    // \tObject.keys(spec).reduce( function(previousValue: boolean, currentValue: string): boolean {\n    // \t\treturn previousValue && (keyOf(spec[currentValue]) in command);\n    // \t}, true),\n    // \t\"mutate(): argument has an unknown key; supported keys are (%s).  mutator: %s\",\n    // \tObject.keys(command).join(\", \"),\n    // \tspec\n    // );\n    if (exports.hasOwnProperty.call(spec, command.set)) {\n        verify_1.verify(Object.keys(spec).length === 1, \"Cannot have more than one key in an object with %s\", command.set);\n        return shallowEqual(value, spec[command.set]) ? value : spec[command.set];\n    }\n    if (exports.hasOwnProperty.call(spec, command.increment)) {\n        verify_1.verify(typeof (value) === \"number\" && typeof (spec[command.increment]) === \"number\", \"Source (%s) and argument (%s) to %s must be numbers\", value, spec[command.increment], command.increment);\n        return value + spec[command.increment];\n    }\n    var changed = false;\n    if (exports.hasOwnProperty.call(spec, command.merge)) {\n        var mergeObj = spec[command.merge];\n        var nextValue_1 = shallowCopy(value);\n        verify_1.verify(mergeObj && typeof mergeObj === \"object\", \"mutate(): %s expects a spec of type 'object'; got %s\", command.merge, mergeObj);\n        verify_1.verify(nextValue_1 && typeof nextValue_1 === \"object\", \"mutate(): %s expects a target of type 'object'; got %s\", command.merge, nextValue_1);\n        assign_1.assign(nextValue_1, spec[command.merge]);\n        return shallowEqual(value, nextValue_1) ? value : nextValue_1;\n    }\n    if (exports.hasOwnProperty.call(spec, command.deleter) && (typeof value === \"object\") && !(value instanceof Set)) {\n        var key = spec[command.merge];\n        verify_1.verify(key && typeof key === \"string\", \"mutate(): %s expects a spec of type 'string'; got %s\", command.deleter, key);\n        if (key in value) {\n            var nextValue_2 = shallowCopy(value);\n            delete nextValue_2[key];\n            return nextValue_2;\n        }\n        else {\n            return value;\n        }\n    }\n    if (exports.hasOwnProperty.call(spec, command.push)) {\n        verifyArrayCase(value, spec, command.push);\n        if (spec[command.push].length) {\n            var nextValue_3 = shallowCopy(value);\n            nextValue_3.push.apply(nextValue_3, spec[command.push]);\n            return nextValue_3;\n        }\n        else {\n            return value;\n        }\n    }\n    if (exports.hasOwnProperty.call(spec, command.unshift)) {\n        verifyArrayCase(value, spec, command.unshift);\n        if (spec[command.unshift].length) {\n            var nextValue_4 = shallowCopy(value);\n            nextValue_4.unshift.apply(nextValue_4, spec[command.unshift]);\n            return nextValue_4;\n        }\n        else {\n            return value;\n        }\n    }\n    if (exports.hasOwnProperty.call(spec, command.splice)) {\n        var nextValue_5 = shallowCopy(value);\n        verify_1.verify(Array.isArray(value), \"Expected %s target to be an array; got %s\", command.splice, value);\n        verify_1.verify(Array.isArray(spec[command.splice]), \"mutate(): expected spec of %s to be an array of arrays; got %s. \" +\n            \"Did you forget to wrap your parameters in an array?\", command.splice, spec[command.splice]);\n        spec[command.splice].forEach(function (args) {\n            verify_1.verify(Array.isArray(args), \"mutate(): expected spec of %s to be an array of arrays; got %s. \" +\n                \"Did you forget to wrap your parameters in an array?\", command.splice, spec[command.splice]);\n            nextValue_5.splice.apply(nextValue_5, args);\n        });\n        return shallowEqual(nextValue_5, value) ? value : nextValue_5;\n    }\n    if (exports.hasOwnProperty.call(spec, command.add)) {\n        var nextValue_6 = shallowCopy(value);\n        verifySetCase(value, spec, command.add);\n        spec[command.add].forEach(function (item) {\n            if (!nextValue_6.has(item)) {\n                nextValue_6.add(item);\n                changed = true;\n            }\n        });\n        return changed ? nextValue_6 : value;\n    }\n    if (exports.hasOwnProperty.call(spec, command.deleter) && (value instanceof Set)) {\n        var nextValue_7 = shallowCopy(value);\n        verifySetCase(value, spec, command.deleter);\n        spec[command.deleter].forEach(function (item) {\n            if (nextValue_7.delete(item)) {\n                changed = true;\n            }\n        });\n        return changed ? nextValue_7 : value;\n    }\n    var nextValue;\n    for (var k in spec) {\n        if (!(command.hasOwnProperty(k) && command[k])) {\n            var oldValue = value[k];\n            var newValue = mutate(oldValue, spec[k]);\n            if (oldValue !== newValue) {\n                if (!nextValue) {\n                    nextValue = shallowCopy(value);\n                }\n                nextValue[k] = newValue;\n                changed = true;\n            }\n        }\n    }\n    return changed ? nextValue : value;\n}\nexports.mutate = mutate;\nfunction isMutated(a, b) {\n    // TODO: this isn\"t right because mutate will always return a new object\n    return a !== b;\n}\nexports.isMutated = isMutated;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Mutate.ts\n ** module id = 3\n ** module chunks = 0\n **/","\"use strict\";\nfunction toObject(val) {\n    if (val === null || val === undefined) {\n        throw new TypeError(\"Object.assign cannot be called with null or undefined\");\n    }\n    return Object(val);\n}\nvar ObjectAssign = Object.assign || function (target, source) {\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    var propIsEnumerable = Object.prototype.propertyIsEnumerable;\n    var from;\n    var to = toObject(target);\n    var symbols;\n    for (var s = 1; s < arguments.length; s++) {\n        from = Object(arguments[s]);\n        for (var key in from) {\n            if (hasOwnProperty.call(from, key)) {\n                to[key] = from[key];\n            }\n        }\n        if (Object.getOwnPropertySymbols) {\n            symbols = Object.getOwnPropertySymbols(from);\n            for (var i = 0; i < symbols.length; i++) {\n                if (propIsEnumerable.call(from, symbols[i])) {\n                    to[symbols[i]] = from[symbols[i]];\n                }\n            }\n        }\n    }\n    return to;\n};\nexports.assign = ObjectAssign;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./assign.ts\n ** module id = 4\n ** module chunks = 0\n **/","\"use strict\";\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Query.ts\n ** module id = 5\n ** module chunks = 0\n **/","\"use strict\";\nvar Mutate_1 = require(\"./Mutate\");\nvar Column_1 = require(\"./Column\");\nvar Table_1 = require(\"./Table\");\nvar verify_1 = require(\"./verify\");\nfunction startsWith(str, val) {\n    return str.lastIndexOf(val, 0) === 0;\n}\nvar Schema = (function () {\n    function Schema() {\n    }\n    return Schema;\n})();\nexports.Schema = Schema;\nvar ROWID = \"rowid\";\nvar COUNT = \"COUNT(*)\";\nvar internal_prefix = \"updraft_\";\nvar internal_column_deleted = internal_prefix + \"deleted\";\nvar internal_column_time = internal_prefix + \"time\";\nvar internal_column_latest = internal_prefix + \"latest\";\nvar internal_column_composed = internal_prefix + \"composed\";\nvar internalColumn = {};\ninternalColumn[internal_column_deleted] = Column_1.Column.Bool();\ninternalColumn[internal_column_time] = Column_1.Column.DateTime().Key();\ninternalColumn[internal_column_latest] = Column_1.Column.Bool();\ninternalColumn[internal_column_composed] = Column_1.Column.Bool();\nvar deleteRow_action = { internal_column_deleted: { $set: true } };\nfunction getChangeTableName(name) {\n    return internal_prefix + \"changes_\" + name;\n}\nvar Store = (function () {\n    function Store(params) {\n        this.params = params;\n        this.tables = [];\n        this.db = null;\n        verify_1.verify(this.params.db, \"must pass a DbWrapper\");\n    }\n    Store.prototype.createTable = function (tableSpec) {\n        var _this = this;\n        function buildIndices(spec) {\n            spec.indices = spec.indices || [];\n            for (var col in spec.columns) {\n                if (spec.columns[col].isIndex) {\n                    spec.indices.push([col]);\n                }\n            }\n        }\n        function createInternalTableSpec(spec) {\n            var newSpec = Mutate_1.shallowCopy(spec);\n            newSpec.columns = Mutate_1.shallowCopy(spec.columns);\n            for (var col in internalColumn) {\n                verify_1.verify(!spec.columns[col], \"table %s cannot have reserved column name %s\", spec.name, col);\n                newSpec.columns[col] = internalColumn[col];\n            }\n            buildIndices(newSpec);\n            return newSpec;\n        }\n        function createChangeTableSpec(spec) {\n            var newSpec = {\n                name: getChangeTableName(spec.name),\n                columns: {\n                    key: Column_1.Column.Int().Key(),\n                    time: Column_1.Column.DateTime().Key(),\n                    change: Column_1.Column.JSON(),\n                }\n            };\n            buildIndices(newSpec);\n            return newSpec;\n        }\n        verify_1.verify(!this.db, \"createTable() can only be added before open()\");\n        verify_1.verify(!startsWith(tableSpec.name, internal_prefix), \"table name %s cannot begin with %s\", tableSpec.name, internal_prefix);\n        for (var col in tableSpec.columns) {\n            verify_1.verify(!startsWith(col, internal_prefix), \"table %s column %s cannot begin with %s\", tableSpec.name, col, internal_prefix);\n        }\n        var table = new Table_1.Table(tableSpec);\n        table.add = function () {\n            var changes = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                changes[_i - 0] = arguments[_i];\n            }\n            return _this.add.apply(_this, [table].concat(changes));\n        };\n        table.find = function (query, opts) { return _this.find(table, query, opts); };\n        this.tables.push(createInternalTableSpec(tableSpec));\n        this.tables.push(createChangeTableSpec(tableSpec));\n        return table;\n    };\n    Store.prototype.open = function () {\n        var _this = this;\n        verify_1.verify(!this.db, \"open() called more than once!\");\n        verify_1.verify(this.tables.length, \"open() called before any tables were added\");\n        this.db = this.params.db;\n        return Promise.resolve()\n            .then(function () { return _this.readSchema(); })\n            .then(function (schema) { return _this.syncTables(schema); });\n        //.then(() => this.loadKeyValues());\n    };\n    Store.prototype.readSchema = function () {\n        verify_1.verify(this.db, \"readSchema(): not opened\");\n        function tableFromSql(name, sql) {\n            var table = { name: name, columns: {}, indices: [], triggers: {} };\n            var matches = sql.match(/\\((.*)\\)/);\n            if (matches) {\n                var pksplit = matches[1].split(/PRIMARY KEY/i);\n                var fields = pksplit[0].split(\",\");\n                for (var i = 0; i < fields.length; i++) {\n                    var ignore = /^\\s*(primary|foreign)\\s+key/i; // ignore standalone \"PRIMARY KEY xxx\"\n                    if (fields[i].match(ignore)) {\n                        continue;\n                    }\n                    var quotedName = /\"(.+)\"\\s+(.*)/;\n                    var unquotedName = /(\\w+)\\s+(.*)/;\n                    var parts = fields[i].match(quotedName);\n                    if (!parts) {\n                        parts = fields[i].match(unquotedName);\n                    }\n                    if (parts) {\n                        table.columns[parts[1]] = Column_1.Column.fromSql(parts[2]);\n                    }\n                }\n                if (pksplit.length > 1) {\n                    var pk = pksplit[1].match(/\\((.*)\\)/);\n                    if (pk) {\n                        var keys = pk[1].split(\",\");\n                        for (var i = 0; i < keys.length; i++) {\n                            var key = keys[i].trim();\n                            table.columns[key].isKey = true;\n                        }\n                    }\n                }\n            }\n            return table;\n        }\n        function indexFromSql(sql) {\n            var regex = /\\((.*)\\)/;\n            var matches = regex.exec(sql);\n            verify_1.verify(matches, \"bad format on index- couldn't determine column names from sql: %s\", sql);\n            return matches[1].split(\",\").map(function (x) { return x.trim(); });\n        }\n        return this.db.readTransaction(function (transaction) {\n            return transaction.executeSql(\"SELECT name, tbl_name, type, sql FROM sqlite_master\", [], function (tx, resultSet) {\n                var schema = {};\n                for (var i = 0; i < resultSet.length; i++) {\n                    var row = resultSet[i];\n                    if (row.name[0] != \"_\" && !startsWith(row.name, \"sqlite\")) {\n                        switch (row.type) {\n                            case \"table\":\n                                schema[row.name] = tableFromSql(row.name, row.sql);\n                                break;\n                            case \"index\":\n                                var index = indexFromSql(row.sql);\n                                if (index.length == 1) {\n                                    var col = index[0];\n                                    verify_1.verify(row.tbl_name in schema, \"table %s used by index %s should have been returned first\", row.tbl_name, row.name);\n                                    verify_1.verify(col in schema[row.tbl_name].columns, \"table %s does not have column %s used by index %s\", row.tbl_name, col, row.name);\n                                    schema[row.tbl_name].columns[col].isIndex = true;\n                                }\n                                else {\n                                    schema[row.tbl_name].indices.push(index);\n                                }\n                                break;\n                            case \"trigger\":\n                                //schema[row.tbl_name].triggers[row.name] = row.sql;\n                                break;\n                        }\n                    }\n                }\n                return schema;\n            });\n        });\n    };\n    Store.prototype.syncTables = function (schema) {\n        var _this = this;\n        verify_1.verify(this.db, \"syncTables(): not opened\");\n        return this.db.transaction(function (transaction) {\n            var p = Promise.resolve();\n            _this.tables.forEach(function (table) {\n                p = p.then(function () { return _this.syncTable(transaction, schema, table); });\n            });\n            return p;\n        });\n    };\n    Store.prototype.syncTable = function (transaction, schema, spec) {\n        function createTable(name) {\n            var cols = [];\n            var pk = [];\n            for (var col in spec.columns) {\n                var attrs = spec.columns[col];\n                var decl = void 0;\n                switch (attrs.type) {\n                    // case ColumnType.ptr:\n                    //   console.assert(attrs.ref != null);\n                    //   console.assert(attrs.ref.columns != null);\n                    //   console.assert(attrs.ret.table.name != null);\n                    //   console.assert(attrs.ref.key != null);\n                    //   let foreignCol: Column = attrs.ref.columns[attrs.ref.key];\n                    //   decl = col + \" \" + Column.sql(foreignCol);\n                    //   cols.push(decl);\n                    //   break;\n                    // case ColumnType.set:\n                    // \tbreak;\n                    default:\n                        decl = col + \" \" + Column_1.Column.sql(attrs);\n                        cols.push(decl);\n                        if (attrs.isKey) {\n                            pk.push(col);\n                        }\n                        break;\n                }\n            }\n            verify_1.verify(pk.length, \"table %s has no keys\", name);\n            cols.push(\"PRIMARY KEY(\" + pk.join(\", \") + \")\");\n            return transaction.executeSql(\"CREATE \" + (spec.temp ? \"TEMP \" : \"\") + \"TABLE \" + name + \" (\" + cols.join(\", \") + \")\");\n        }\n        function dropTable(name) {\n            return transaction.executeSql(\"DROP TABLE \" + name);\n        }\n        function createIndices(force) {\n            if (force === void 0) { force = false; }\n            function indicesEqual(a, b) {\n                if (a.length != b.length) {\n                    return false;\n                }\n                for (var i = 0; i < a.length; i++) {\n                    if (a[i] != b[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            var p = Promise.resolve();\n            var oldIndices = (spec.name in schema) ? schema[spec.name].indices : [];\n            var newIndices = spec.indices;\n            function getIndexName(indices) {\n                return \"index_\" + spec.name + \"__\" + indices.join(\"_\");\n            }\n            oldIndices.forEach(function (value, i) {\n                var drop = true;\n                for (var j = 0; j < newIndices.length; j++) {\n                    if (indicesEqual(oldIndices[i], newIndices[j])) {\n                        drop = false;\n                        break;\n                    }\n                }\n                if (drop) {\n                    p = p.then(function () { return transaction.executeSql(\"DROP INDEX \" + getIndexName(oldIndices[i])); });\n                }\n            });\n            newIndices.forEach(function (value, j) {\n                var create = true;\n                for (var i = 0; i < oldIndices.length; i++) {\n                    if (indicesEqual(oldIndices[i], newIndices[j])) {\n                        create = false;\n                        break;\n                    }\n                }\n                if (create || force) {\n                    var index = newIndices[j];\n                    var sql = \"CREATE INDEX \" + getIndexName(index) + \" ON \" + spec.name + \" (\" + index.join(\", \") + \")\";\n                    p = p.then(function () { return transaction.executeSql(sql); });\n                }\n            });\n            return p;\n        }\n        var p = Promise.resolve();\n        if (spec.name in schema) {\n            var oldColumns = schema[spec.name].columns;\n            var newColumns = spec.columns;\n            var recreateTable = false;\n            for (var colName in oldColumns) {\n                if (!(colName in newColumns)) {\n                    recreateTable = true;\n                    break;\n                }\n                var oldCol = oldColumns[colName];\n                var newCol = newColumns[colName];\n                if (!Column_1.Column.equal(oldCol, newCol)) {\n                    recreateTable = true;\n                    break;\n                }\n            }\n            var renamedColumns = spec.renamedColumns || {};\n            for (var colName in renamedColumns) {\n                if (colName in oldColumns) {\n                    recreateTable = true;\n                }\n            }\n            var addedColumns = {};\n            if (!recreateTable) {\n                for (var colName in newColumns) {\n                    if (!(colName in oldColumns)) {\n                        addedColumns[colName] = newColumns[colName];\n                    }\n                }\n            }\n            if (recreateTable) {\n                // recreate and migrate data\n                function copyData(oldName, newName) {\n                    var oldTableColumns = Object.keys(oldColumns).filter(function (col) { return (col in spec.columns) || (col in renamedColumns); });\n                    var newTableColumns = oldTableColumns.map(function (col) { return (col in renamedColumns) ? renamedColumns[col] : col; });\n                    var p2 = Promise.resolve();\n                    if (oldTableColumns.length && newTableColumns.length) {\n                        var stmt = \"INSERT INTO \" + newName + \" (\" + newTableColumns.join(\", \") + \") \";\n                        stmt += \"SELECT \" + oldTableColumns.join(\", \") + \" FROM \" + oldName + \";\";\n                        p2 = transaction.executeSql(stmt);\n                    }\n                    return p2;\n                }\n                function migrateChangeTable(changeTableName) {\n                    var deletedColumns = Object.keys(oldColumns).filter(function (col) { return !(col in spec.columns) && !(col in renamedColumns); });\n                    var p2 = Promise.resolve();\n                    if (spec.renamedColumns || deletedColumns) {\n                        p2 = p2.then(function () {\n                            return transaction.each(\"SELECT \" + ROWID + \", change\"\n                                + \" FROM \" + changeTableName, [], function (selectChangeTransaction, row) {\n                                var change = JSON.parse(row.change);\n                                var changed = false;\n                                for (var oldCol in spec.renamedColumns) {\n                                    var newCol = spec.renamedColumns[oldCol];\n                                    if (oldCol in change) {\n                                        change[newCol] = change[oldCol];\n                                        delete change[oldCol];\n                                        changed = true;\n                                    }\n                                }\n                                for (var _i = 0; _i < deletedColumns.length; _i++) {\n                                    var oldCol = deletedColumns[_i];\n                                    if (oldCol in change) {\n                                        delete change[oldCol];\n                                        changed = true;\n                                    }\n                                }\n                                if (changed) {\n                                    if (Object.keys(change).length) {\n                                        return selectChangeTransaction.executeSql(\"UPDATE \" + changeTableName\n                                            + \" SET change=?\"\n                                            + \" WHERE \" + ROWID + \"=?\", [JSON.stringify(change), row[ROWID]]);\n                                    }\n                                    else {\n                                        return selectChangeTransaction.executeSql(\"DELETE FROM \" + changeTableName\n                                            + \" WHERE \" + ROWID + \"=?\", [row[ROWID]]);\n                                    }\n                                }\n                            });\n                        });\n                    }\n                    return p2;\n                }\n                function renameTable(oldName, newName) {\n                    return transaction.executeSql(\"ALTER TABLE \" + oldName + \" RENAME TO \" + newName);\n                }\n                var tempTableName = \"temp_\" + spec.name;\n                var changeTableName = getChangeTableName(spec.name);\n                if (tempTableName in schema) {\n                    // yikes!  migration failed but transaction got committed?\n                    p = p.then(function () { return dropTable(tempTableName); });\n                }\n                p = p.then(function () { return createTable(tempTableName); });\n                p = p.then(function () { return copyData(spec.name, tempTableName); });\n                p = p.then(function () { return dropTable(spec.name); });\n                p = p.then(function () { return renameTable(tempTableName, spec.name); });\n                p = p.then(function () { return migrateChangeTable(changeTableName); });\n                p = p.then(function () { return createIndices(true); });\n            }\n            else if (addedColumns != {}) {\n                // alter table, add columns\n                Object.keys(addedColumns).forEach(function (colName) {\n                    var col = spec.columns[colName];\n                    var columnDecl = colName + \" \" + Column_1.Column.sql(col);\n                    p = p.then(function () { return transaction.executeSql(\"ALTER TABLE \" + spec.name + \" ADD COLUMN \" + columnDecl); });\n                });\n                p = p.then(function () { return createIndices(); });\n            }\n            else {\n                // no table modification is required\n                p = p.then(function () { return createIndices(); });\n            }\n        }\n        else {\n            // create new table\n            p = p.then(function () { return createTable(spec.name); });\n            p = p.then(function () { return createIndices(true); });\n        }\n        return p;\n    };\n    Store.prototype.add = function (table) {\n        var changes = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            changes[_i - 1] = arguments[_i];\n        }\n        function insert(transaction, tableName, columns, values) {\n            var questionMarks = values.map(function (v) { return \"?\"; });\n            return transaction.executeSql(\"INSERT OR REPLACE INTO \" + tableName + \" (\" + columns.join(\", \") + \") VALUES (\" + questionMarks.join(\", \") + \")\", values);\n        }\n        verify_1.verify(this.db, \"apply(): not opened\");\n        var changeTable = getChangeTableName(table.spec.name);\n        return this.db.transaction(function (transaction) {\n            var p1 = Promise.resolve();\n            var toResolve = new Set();\n            changes.forEach(function (change) {\n                var time = change.time || Date.now();\n                verify_1.verify((change.save ? 1 : 0) + (change.change ? 1 : 0) + (change.delete ? 1 : 0) === 1, \"change (%s) must specify exactly one action at a time\", change);\n                if (change.save) {\n                    var element = change.save;\n                    var keyValue = table.keyValue(element);\n                    var columns = Object.keys(element).filter(function (k) { return k in table.spec.columns; });\n                    var values = columns.map(function (k) { return element[k]; });\n                    // append internal column values\n                    columns = [internal_column_time].concat(columns);\n                    values = [time].concat(values);\n                    p1 = p1.then(function () { return insert(transaction, table.spec.name, columns, values); });\n                    toResolve.add(keyValue);\n                }\n                else if (change.change || change.delete) {\n                    // insert into change table\n                    var changeRow = {\n                        key: null,\n                        time: time,\n                        change: null\n                    };\n                    if (change.change) {\n                        // store changes\n                        var mutator = Mutate_1.shallowCopy(change.change);\n                        changeRow.key = table.keyValue(mutator);\n                        delete mutator[table.key];\n                        changeRow.change = JSON.stringify(mutator);\n                    }\n                    else {\n                        // mark deleted\n                        changeRow.key = change.delete;\n                        changeRow.change = JSON.stringify(deleteRow_action);\n                    }\n                    var columns = Object.keys(changeRow);\n                    var values = columns.map(function (k) { return changeRow[k]; });\n                    p1 = p1.then(function () { return insert(transaction, changeTable, columns, values); });\n                    toResolve.add(changeRow.key);\n                }\n                else {\n                    throw new Error(\"no operation specified for change- should be one of save, change, or delete\");\n                }\n            });\n            // these could be done in parallel\n            toResolve.forEach(function (keyValue) {\n                var baselineCols = [ROWID, internal_column_time, internal_column_deleted].concat(Object.keys(table.spec.columns));\n                p1 = p1.then(function () { return transaction.executeSql(\"SELECT \" + baselineCols.join(\", \")\n                    + \" FROM \" + table.spec.name\n                    + \" WHERE \" + table.key + \"=?\" + \" AND \" + internal_column_composed + \"=0\"\n                    + \" ORDER BY \" + internal_column_time + \" DESC\"\n                    + \" LIMIT 1\", [keyValue], function (tx1, baselineResults) {\n                    var baseline = {};\n                    var baseTime = 0;\n                    var baseRowId = -1;\n                    if (baselineResults.length) {\n                        baseline = baselineResults[0];\n                        baseTime = baseline[internal_column_time];\n                        verify_1.verify(ROWID in baseline, \"object has no ROWID (%s) - it has [%s]\", ROWID, Object.keys(baseline).join(\", \"));\n                        baseRowId = baseline[ROWID];\n                    }\n                    else {\n                        baseline[table.key] = keyValue;\n                    }\n                    var mutation = baseline;\n                    var mutationTime = baseTime;\n                    return tx1.executeSql(\"SELECT key, time, change\"\n                        + \" FROM \" + changeTable\n                        + \" WHERE key=? AND time>=?\"\n                        + \" ORDER BY time ASC\", [keyValue, baseTime], function (tx2, changeResults) {\n                        var p2 = Promise.resolve();\n                        for (var i = 0; i < changeResults.length; i++) {\n                            var row = changeResults[i];\n                            var mutator = JSON.parse(row.change);\n                            mutation = Mutate_1.mutate(mutation, mutator);\n                            mutationTime = Math.max(mutationTime, row.time);\n                        }\n                        if (baseRowId != -1 && !Mutate_1.isMutated(mutation, baseline)) {\n                            // mark it as latest (and others as not)\n                            p2 = p2.then(function () { return tx2.executeSql(\"UPDATE \" + table.spec.name\n                                + \" SET \" + internal_column_latest + \"=(\" + ROWID + \"=\" + baseRowId + \")\"\n                                + \" WHERE \" + table.key + \"=?\", [keyValue]); });\n                        }\n                        else {\n                            // invalidate old latest rows\n                            p2 = p2.then(function () { return tx2.executeSql(\"UPDATE \" + table.spec.name\n                                + \" SET \" + internal_column_latest + \"=0\"\n                                + \" WHERE \" + table.key + \"=?\", [keyValue]); });\n                            // insert new latest row\n                            mutation[internal_column_latest] = true;\n                            mutation[internal_column_time] = mutationTime;\n                            mutation[internal_column_composed] = true;\n                            var columns = Object.keys(mutation).filter(function (key) { return (key in table.spec.columns) || (key in internalColumn); });\n                            var values = columns.map(function (col) { return mutation[col]; });\n                            p2 = p2.then(function () { return insert(tx2, table.spec.name, columns, values); });\n                        }\n                        return p2;\n                    });\n                }); });\n            });\n            return p1;\n        });\n    };\n    Store.prototype.find = function (table, query, opts) {\n        opts = opts || {};\n        var numericConditions = {\n            $gt: \">\",\n            $gte: \">=\",\n            $lt: \"<\",\n            $lte: \"<=\"\n        };\n        var inCondition = Mutate_1.keyOf({ $in: false });\n        var conditions = [];\n        var values = [];\n        conditions.push(\"NOT \" + internal_column_deleted);\n        conditions.push(internal_column_latest);\n        for (var col in query) {\n            var spec = query[col];\n            var found = false;\n            for (var condition in numericConditions) {\n                if (Mutate_1.hasOwnProperty.call(spec, condition)) {\n                    conditions.push(\"(\" + col + numericConditions[condition] + \"?)\");\n                    var value = spec[condition];\n                    verify_1.verify(parseInt(value, 10) == value, \"condition %s must have a numeric argument: %s\", condition, value);\n                    values.push(value);\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                if (Mutate_1.hasOwnProperty.call(spec, inCondition)) {\n                    verify_1.verify(spec[inCondition] instanceof Array, \"must be an array: %s\", spec[inCondition]);\n                    conditions.push(col + \" IN (\" + spec[inCondition].map(function (x) { return \"?\"; }).join(\", \") + \")\");\n                    values.push.apply(values, spec[inCondition]);\n                    found = true;\n                }\n            }\n            if (!found) {\n                if (table.spec.columns[col].type == Column_1.ColumnType.bool) {\n                    conditions.push((spec ? \"\" : \"NOT \") + col);\n                    found = true;\n                }\n                else if (typeof spec === \"number\" || typeof spec === \"string\") {\n                    conditions.push(\"(\" + col + \"=?)\");\n                    values.push(spec);\n                    found = true;\n                }\n                else if (spec instanceof RegExp) {\n                    var rx = spec;\n                    var arg = rx.source.replace(/\\.\\*/g, \"%\").replace(/\\./g, \"_\");\n                    if (arg[0] == \"^\") {\n                        arg = arg.substring(1);\n                    }\n                    else {\n                        arg = \"%\" + arg;\n                    }\n                    if (arg[arg.length - 1] == \"$\") {\n                        arg = arg.substring(0, arg.length - 1);\n                    }\n                    else {\n                        arg = arg + \"%\";\n                    }\n                    verify_1.verify(!arg.match(/(\\$|\\^|\\*|\\.|\\(|\\)|\\[|\\]|\\?)/), \"RegExp search only supports simple wildcards (.* and .): %s\", arg);\n                    conditions.push(\"(\" + col + \" LIKE ?)\");\n                    values.push(arg);\n                    found = true;\n                }\n                verify_1.verify(found, \"unknown query condition for %s: %s\", col, spec);\n            }\n        }\n        var columns = Object.keys(opts.fields || table.spec.columns);\n        var stmt = \"SELECT \" + (opts.count ? COUNT : columns.join(\", \"));\n        stmt += \" FROM \" + table.spec.name;\n        stmt += \" WHERE \" + conditions.join(\" AND \");\n        if (opts.orderBy) {\n            var col = Mutate_1.keyOf(opts.orderBy);\n            var order = opts.orderBy[col];\n            stmt += \" ORDER BY \" + col + \" \" + (order == Table_1.OrderBy.ASC ? \"ASC\" : \"DESC\");\n        }\n        if (opts.limit) {\n            stmt += \" LIMIT \" + opts.limit;\n        }\n        if (opts.offset) {\n            stmt += \" OFFSET \" + opts.offset;\n        }\n        return this.db.readTransaction(function (tx1) {\n            return tx1.executeSql(stmt, values, function (tx2, rows) {\n                if (opts.count) {\n                    var count = parseInt(rows[0][COUNT], 10);\n                    return Promise.resolve(count);\n                }\n                else {\n                    var results = [];\n                    for (var i = 0; i < rows.length; i++) {\n                        var row = rows[i];\n                        for (var col in row) {\n                            if (table.spec.columns[col].type == Column_1.ColumnType.bool) {\n                                row[col] = (row[col] && row[col] != 'false') ? true : false;\n                            }\n                        }\n                        // TODO: add constructable objects\n                        results.push(row);\n                    }\n                    return Promise.resolve(results);\n                }\n            });\n        });\n    };\n    return Store;\n})();\nexports.Store = Store;\nfunction createStore(params) {\n    return new Store(params);\n}\nexports.createStore = createStore;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Store.ts\n ** module id = 6\n ** module chunks = 0\n **/","\"use strict\";\nvar verify_1 = require(\"./verify\");\n(function (OrderBy) {\n    OrderBy[OrderBy[\"ASC\"] = 0] = \"ASC\";\n    OrderBy[OrderBy[\"DESC\"] = 1] = \"DESC\";\n})(exports.OrderBy || (exports.OrderBy = {}));\nvar OrderBy = exports.OrderBy;\nvar Table = (function () {\n    function Table(spec) {\n        this.spec = spec;\n        this.key = tableKey(spec);\n    }\n    Table.prototype.keyValue = function (element) {\n        verify_1.verify(this.key in element, \"object does not have key field '%s' set: %s\", this.key, element);\n        return element[this.key];\n    };\n    return Table;\n})();\nexports.Table = Table;\nfunction tableKey(spec) {\n    var key = null;\n    for (var name_1 in spec.columns) {\n        var column = spec.columns[name_1];\n        verify_1.verify(column, \"column '%s' is not in %s\", name_1, spec);\n        if (column.isKey) {\n            verify_1.verify(!key, \"Table %s has more than one key- %s and %s\", spec.name, key, name_1);\n            key = name_1;\n        }\n    }\n    verify_1.verify(key, \"Table %s does not have a key\", spec.name);\n    return key;\n}\nexports.tableKey = tableKey;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Table.ts\n ** module id = 7\n ** module chunks = 0\n **/","///<reference path=\"../typings/tsd.d.ts\"/>\nvar SQLiteWrapper = (function () {\n    function SQLiteWrapper(db) {\n        this.db = db;\n    }\n    SQLiteWrapper.prototype.run = function (sql) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.db.run(sql, function (err) {\n                if (err) {\n                    console.log(\"SQLiteWrapper.run(): error executing '\" + sql + \"': \", err);\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    };\n    SQLiteWrapper.prototype.all = function (tx, sql, params, callback) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.db.all(sql, params, function (err, rows) {\n                if (err) {\n                    console.log(\"SQLiteWrapper.all(): error executing '\" + sql + \"': \", err);\n                    reject(err);\n                }\n                else {\n                    if (callback) {\n                        resolve(callback(tx, rows));\n                    }\n                    else {\n                        resolve(rows);\n                    }\n                }\n            });\n        });\n    };\n    SQLiteWrapper.prototype.each = function (tx, sql, params, callback) {\n        var _this = this;\n        var p = Promise.resolve();\n        return new Promise(function (resolve, reject) {\n            _this.db.each(sql, params, function (err, row) {\n                if (err) {\n                    console.log(\"SQLiteWrapper.each(): error executing '\" + sql + \"': \", err);\n                    reject(err);\n                }\n                else {\n                    if (callback) {\n                        p = p.then(function () { return callback(tx, row); });\n                    }\n                }\n            }, function (err, count) {\n                if (err) {\n                    console.log(\"SQLiteWrapper.each(): error executing '\" + sql + \"': \", err);\n                    reject(err);\n                }\n                else {\n                    resolve(p);\n                }\n            });\n        });\n    };\n    SQLiteWrapper.prototype.transaction = function (callback) {\n        var _this = this;\n        var result = undefined;\n        return Promise.resolve()\n            .then(function () { return _this.run(\"BEGIN TRANSACTION\"); })\n            .then(function () {\n            var tx = {\n                executeSql: function (sql, params, resultsCb) {\n                    return _this.all(tx, sql, params, resultsCb);\n                },\n                each: function (sql, params, resultsCb) {\n                    return _this.each(tx, sql, params, resultsCb);\n                }\n            };\n            return callback(tx);\n        })\n            .then(function (ret) { return result = ret; })\n            .then(function () { return _this.run(\"COMMIT TRANSACTION\"); })\n            .then(function () { return result; })\n            .catch(function (err) {\n            console.log(\"encountered error, rolling back transaction: \", err);\n            _this.run(\"ROLLBACK TRANSACTION\");\n            throw err;\n        });\n    };\n    SQLiteWrapper.prototype.readTransaction = function (callback) {\n        return this.transaction(callback);\n    };\n    return SQLiteWrapper;\n})();\nfunction wrapSql(db) {\n    return new SQLiteWrapper(db);\n}\nexports.wrapSql = wrapSql;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./SQLiteWrapper.ts\n ** module id = 8\n ** module chunks = 0\n **/","///<reference path=\"./websql.d.ts\"/>\n\"use strict\";\nvar WebsqlWrapper = (function () {\n    function WebsqlWrapper(name, version, displayName, estimatedSize) {\n        version = version || \"1.0\";\n        displayName = displayName || name;\n        estimatedSize = estimatedSize || 5 * 1024 * 1024;\n        this.db = window.openDatabase(name, version, displayName, estimatedSize);\n    }\n    WebsqlWrapper.prototype.all = function (tx, sql, params, callback) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            tx.realTransaction.executeSql(sql, params, function (transaction, resultSet) {\n                var results = [];\n                for (var i = 0; i < resultSet.rows.length; i++) {\n                    var row = resultSet.rows.item(i);\n                    results.push(row);\n                }\n                if (callback) {\n                    resolve(callback(_this.wrapTransaction(transaction), results));\n                }\n                else {\n                    resolve(results);\n                }\n            }, function (transaction, error) {\n                console.error(\"error executing '\" + sql + \"': \", error);\n                reject(error);\n                return true;\n            });\n        });\n    };\n    WebsqlWrapper.prototype.each = function (tx, sql, params, callback) {\n        return new Promise(function (resolve, reject) {\n            tx.realTransaction.executeSql(sql, params, function (transaction, resultSet) {\n                var p = Promise.resolve();\n                for (var i = 0; i < resultSet.rows.length; i++) {\n                    var row = resultSet.rows.item(i);\n                    if (callback) {\n                        (function (row) {\n                            p = p.then(function () { return callback(tx, row); });\n                        })(row);\n                    }\n                }\n                resolve(p);\n            }, function (transaction, error) {\n                console.error(\"error executing '\" + sql + \"': \", error);\n                reject(error);\n                return true;\n            });\n        });\n    };\n    WebsqlWrapper.prototype.wrapTransaction = function (transaction) {\n        var _this = this;\n        var tx = {\n            realTransaction: transaction,\n            executeSql: function (sql, params, callback) {\n                return _this.all(tx, sql, params, callback);\n            },\n            each: function (sql, params, callback) {\n                return _this.each(tx, sql, params, callback);\n            }\n        };\n        return tx;\n    };\n    WebsqlWrapper.prototype.transaction = function (callback) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.db.transaction(function (transaction) {\n                var tx = _this.wrapTransaction(transaction);\n                resolve(callback(tx));\n            });\n        });\n    };\n    WebsqlWrapper.prototype.readTransaction = function (callback) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.db.readTransaction(function (transaction) {\n                var tx = _this.wrapTransaction(transaction);\n                resolve(callback(tx));\n            });\n        });\n    };\n    return WebsqlWrapper;\n})();\nfunction wrapWebsql(name, version, displayName, estimatedSize) {\n    return new WebsqlWrapper(name, version, displayName, estimatedSize);\n}\nexports.wrapWebsql = wrapWebsql;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./WebsqlWrapper.ts\n ** module id = 9\n ** module chunks = 0\n **/"],"sourceRoot":""}