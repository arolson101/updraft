{"version":3,"sources":["assign.ts","Text.ts","verify.ts","Column.ts","Database.ts","Delta.ts","Table.ts","Store.ts","index.ts","Query.ts","SQLiteWrapper.ts","WebsqlWrapper.ts"],"names":[],"mappings":"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","file":"updraft.js","sourcesContent":["\nnamespace Updraft {\n\t/* istanbul ignore next */\n\tfunction toObject(val: any) {\n\t\tif (val === null || val === undefined) {\n\t\t\tthrow new TypeError(\"Object.assign cannot be called with null or undefined\");\n\t\t}\n\t\treturn Object(val);\n\t}\n\t\n\t/* istanbul ignore next */\n\tlet ObjectAssign = (<any>Object).assign || function (target: Object, source: Object) {\n\t\tconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\t\tconst propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\t\tlet from: Object;\n\t\tlet to = toObject(target);\n\t\tlet symbols: any[];\n\t\n\t\tfor (let s = 1; s < arguments.length; s++) {\n\t\t\tfrom = Object(arguments[s]);\n\t\n\t\t\tfor (let key in from) {\n\t\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\t\tto[key] = from[key];\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif ((<any>Object).getOwnPropertySymbols) {\n\t\t\t\tsymbols = (<any>Object).getOwnPropertySymbols(from);\n\t\t\t\tfor (let i = 0; i < symbols.length; i++) {\n\t\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn to;\n\t};\n\t\n\texport var assign = ObjectAssign;\n}\n","\nnamespace Updraft {\n\tfunction reviver(key: string, value: any): any {\n\t\tif (typeof value === \"string\") {\n\t\t\tlet regexp = /^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d.\\d\\d\\dZ$/.exec(value);\n\t\t\tif (regexp) {\n\t\t\t\treturn new Date(value);\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n\t\n\texport function toText(o: any): string {\n\t\treturn JSON.stringify(o);\n\t}\n\t\n\texport function fromText(text: string): any {\n\t\treturn JSON.parse(text, reviver);\n\t}\n}\n","\nnamespace Updraft {\n\t/* istanbul ignore next */\n\tfunction makePrintable(x: any): string {\n\t\tif (Array.isArray(x) || (x && typeof x === \"object\")) {\n\t\t\treturn JSON.stringify(x);\n\t\t}\n\t\telse {\n\t\t\treturn x;\n\t\t}\n\t}\n\t\n\t/**\n\t* Use verify() to assert state which your program assumes to be true.\n\t*\n\t* Provide sprintf-style format (only %s is supported) and arguments\n\t* to provide information about what broke and what you were\n\t* expecting.\n\t*/\n\texport function verify(condition: any, format: string, ...args: any[]) {\n\t\t/* istanbul ignore next */\n\t\tif (!condition) {\n\t\t\tlet argIndex = 0;\n\t\t\tlet error = new Error(\n\t\t\t\tformat.replace(/%s/g, function() { return makePrintable(args[argIndex++]); })\n\t\t\t);\n\t\n\t\t\t(<any>error).framesToPop = 1; // we don't care about verify's own frame\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n","///<reference path=\"./Text.ts\"/>\n///<reference path=\"./verify.ts\"/>\n\nnamespace Updraft {\n\n\texport enum ColumnType {\n\t\tint,\n\t\treal,\n\t\tbool,\n\t\ttext,\n\t\tenum,\n\t\tdate,\n\t\tdatetime,\n\t\tjson,\n\t\tset\n\t}\n\t\n\t/** A typescript enum class will have string keys resolving to the enum values */\n\texport interface TypeScriptEnum {\n\t\t[enumValue: number]: string;\n\t}\n\t\n\texport interface EnumValue {\n\t\ttoString(): string;\n\t}\n\t\n\t/** An enum class (e.g. (this one)[https://github.com/adrai/enum]) should provide a static method 'get' to resolve strings into enum values */\n\texport interface EnumClass {\n\t\tget(value: string | number): EnumValue;\n\t}\n\t\n\texport type Serializable = string | number;\n\t\n\t/**\n\t* Column in db.  Use static methods to create columns.\n\t*/\n\texport class Column {\n\t\tpublic isKey: boolean;\n\t\tpublic isIndex: boolean;\n\t\tpublic type: ColumnType;\n\t\t//public setTable: ClassTemplate<any>;\n\t\tpublic defaultValue: number | boolean | string;\n\t\tpublic enum: EnumClass | TypeScriptEnum;\n\t\tpublic element: Column;\n\t\n\t\tconstructor(type: ColumnType) {\n\t\t\tthis.type = type;\n\t\t\tif (type == ColumnType.bool) {\n\t\t\t\tthis.defaultValue = false;\n\t\t\t}\n\t\t}\n\t\n\t\t/**\n\t\t\t* Column is the primary key.  Only one column can have this set.\n\t\t\t*/\n\t\tKey(): Column {\n\t\t\tthis.isKey = true;\n\t\t\treturn this;\n\t\t}\n\t\n\t\t/**\n\t\t\t* Create an index for this column for faster queries.\n\t\t\t*/\n\t\tIndex(): Column {\n\t\t\tthis.isIndex = true;\n\t\t\treturn this;\n\t\t}\n\t\n\t\t/**\n\t\t\t* Set a default value for the column\n\t\t\t*/\n\t\t// TODO\n\t\tDefault(value: number | boolean | string): Column {\n\t\t\tif (this.type == ColumnType.bool) {\n\t\t\t\tvalue = value ? true : false;\n\t\t\t}\n\t\t\tthis.defaultValue = value;\n\t\t\treturn this;\n\t\t}\n\t\t\n\t\tdeserialize(value: Serializable): any {\n\t\t\tswitch (this.type) {\n\t\t\t\tcase ColumnType.int:\n\t\t\t\tcase ColumnType.real:\n\t\t\t\tcase ColumnType.text:\n\t\t\t\t\treturn value;\n\t\n\t\t\t\tcase ColumnType.bool:\n\t\t\t\t\treturn value ? true : false;\n\t\n\t\t\t\tcase ColumnType.json:\n\t\t\t\t\treturn fromText(<string>value);\n\t\n\t\t\t\tcase ColumnType.enum:\n\t\t\t\t\tif (typeof (<EnumClass>this.enum).get === \"function\") {\n\t\t\t\t\t\tlet enumValue = (<EnumClass>this.enum).get(value);\n\t\t\t\t\t\tverify(!value || enumValue, \"error getting enum value %s\", value);\n\t\t\t\t\t\treturn enumValue;\n\t\t\t\t\t}\n\t\t\t\t\tverify(value in this.enum, \"enum value %s not in %s\", value, this.enum);\n\t\t\t\t\treturn this.enum[value];\n\t\n\t\t\t\tcase ColumnType.date:\n\t\t\t\tcase ColumnType.datetime:\n\t\t\t\t\tverify(!value || parseFloat(<string>value) == value, \"expected date to be stored as a number: %s\", value);\n\t\t\t\t\treturn value ? new Date(parseFloat(<string>value) * 1000) : undefined;\n\t\t\t\t\t\n\t\t\t\tcase ColumnType.set:\n\t\t\t\t\tverify(<any>value instanceof Set, \"value should already be a set\");\n\t\t\t\t\treturn value;\n\t\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"unsupported column type \" + ColumnType[this.type]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tserialize(value: any): Serializable {\n\t\t\tswitch (this.type) {\n\t\t\t\tcase ColumnType.int:\n\t\t\t\tcase ColumnType.real:\n\t\t\t\tcase ColumnType.text:\n\t\t\t\t\treturn value;\n\t\n\t\t\t\tcase ColumnType.bool:\n\t\t\t\t\treturn value ? 1 : 0;\n\t\n\t\t\t\tcase ColumnType.json:\n\t\t\t\t\treturn toText(value);\n\t\n\t\t\t\tcase ColumnType.enum:\n\t\t\t\t\t/* istanbul ignore if: safe to store these in db, though it's probably an error to be anything other than a number/object */\n\t\t\t\t\tif (typeof value === \"string\" || typeof value === undefined || value === null) {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t\telse if (typeof value === \"number\") {\n\t\t\t\t\t\tverify(value in this.enum, \"enum doesn't contain %s\", value);\n\t\t\t\t\t\treturn (<TypeScriptEnum>this.enum)[value];\n\t\t\t\t\t}\n\t\t\t\t\tverify(typeof value.toString === \"function\", \"expected an enum value supporting toString(); got %s\", value);\n\t\t\t\t\treturn value.toString();\n\t\n\t\t\t\tcase ColumnType.date:\n\t\t\t\tcase ColumnType.datetime:\n\t\t\t\t\tverify(value == undefined || value instanceof Date, \"expected a date, got %s\", value);\n\t\t\t\t\tlet date = (value == undefined) ? null : ((<Date>value).getTime() / 1000);\n\t\t\t\t\treturn date;\n\t\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"unsupported column type \" + ColumnType[this.type]);\n\t\t\t}\n\t\t}\n\t\n\t\t/** create a column with \"INTEGER\" affinity */\n\t\tstatic Int(): Column {\n\t\t\treturn new Column(ColumnType.int);\n\t\t}\n\t\n\t\t/** create a column with \"REAL\" affinity */\n\t\tstatic Real(): Column {\n\t\t\treturn new Column(ColumnType.real);\n\t\t}\n\t\n\t\t/** create a column with \"BOOL\" affinity */\n\t\tstatic Bool(): Column {\n\t\t\treturn new Column(ColumnType.bool);\n\t\t}\n\t\n\t\t/** create a column with \"TEXT\" affinity */\n\t\tstatic Text(): Column {\n\t\t\treturn new Column(ColumnType.text);\n\t\t}\n\t\n\t\t/** create a column with \"TEXT\" affinity */\n\t\tstatic String(): Column {\n\t\t\treturn new Column(ColumnType.text);\n\t\t}\n\t\n\t\t/** a typescript enum or javascript object with instance method \"toString\" and class method \"get\" (e.g. {@link https://github.com/adrai/enum}). */\n\t\tstatic Enum(enum_: EnumClass | TypeScriptEnum): Column {\n\t\t\tlet c = new Column(ColumnType.enum);\n\t\t\tc.enum = enum_;\n\t\t\treturn c;\n\t\t}\n\t\n\t\t/** a javascript Date objct, stored in db as seconds since Unix epoch (time_t) [note: precision is seconds] */\n\t\tstatic Date(): Column {\n\t\t\treturn new Column(ColumnType.date);\n\t\t}\n\t\n\t\t/** a javascript Date objct, stored in db as seconds since Unix epoch (time_t) [note: precision is seconds] */\n\t\tstatic DateTime(): Column {\n\t\t\treturn new Column(ColumnType.datetime);\n\t\t}\n\t\n\t\t/** object will be serialized & restored as JSON text */\n\t\tstatic JSON(): Column {\n\t\t\treturn new Column(ColumnType.json);\n\t\t}\n\t\n\t\t/** unordered collection */\n\t\tstatic Set(type: ColumnType): Column {\n\t\t\tlet c = new Column(ColumnType.set);\n\t\t\tc.element = new Column(type);\n\t\t\treturn c;\n\t\t}\n\t\n\t\n\t\tstatic sql(val: Column): string {\n\t\t\tlet stmt = \"\";\n\t\t\tswitch (val.type) {\n\t\t\t\tcase ColumnType.int:\n\t\t\t\t\tstmt = \"INTEGER\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase ColumnType.bool:\n\t\t\t\t\tstmt = \"BOOLEAN NOT NULL\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase ColumnType.real:\n\t\t\t\t\tstmt = \"REAL\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase ColumnType.text:\n\t\t\t\t\tstmt = \"TEXT\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase ColumnType.json:\n\t\t\t\t\tstmt = \"CLOB\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase ColumnType.enum:\n\t\t\t\t\tstmt = \"CHARACTER(20)\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase ColumnType.date:\n\t\t\t\t\tstmt = \"DATE\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase ColumnType.datetime:\n\t\t\t\t\tstmt = \"DATETIME\";\n\t\t\t\t\tbreak;\n\t\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"unsupported type \" + ColumnType[val.type]);\n\t\t\t}\n\t\n\t\t\tif (\"defaultValue\" in val) {\n\t\t\t\tlet escape = function(x: string | number | boolean): string {\n\t\t\t\t\t/* istanbul ignore else */\n\t\t\t\t\tif (typeof x === \"number\") {\n\t\t\t\t\t\treturn <any>x;\n\t\t\t\t\t}\n\t\t\t\t\telse if (typeof x === \"string\") {\n\t\t\t\t\t\treturn \"'\" + (<string>x).replace(/'/g, \"''\") + \"'\";\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tverify(false, \"default value (%s) must be number or string\", x);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tstmt += \" DEFAULT \" + escape(val.serialize(val.defaultValue));\n\t\t\t}\n\t\n\t\t\treturn stmt;\n\t\t}\n\t\n\t\tstatic fromSql(text: string): Column {\n\t\t\tlet parts: string[] = text.split(\" \");\n\t\t\tlet col: Column = null;\n\t\t\tswitch (parts[0]) {\n\t\t\t\tcase \"INTEGER\":\n\t\t\t\t\tcol = Column.Int();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"BOOLEAN\":\n\t\t\t\t\tcol = Column.Bool();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"REAL\":\n\t\t\t\t\tcol = Column.Real();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"TEXT\":\n\t\t\t\t\tcol = Column.Text();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"CLOB\":\n\t\t\t\t\tcol = Column.JSON();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"CHARACTER(20)\":\n\t\t\t\t\tcol = new Column(ColumnType.enum);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"DATE\":\n\t\t\t\t\tcol = Column.Date();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"DATETIME\":\n\t\t\t\t\tcol = Column.DateTime();\n\t\t\t\t\tbreak;\n\t\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"unsupported type: \" + ColumnType[parts[0]]);\n\t\t\t}\n\t\n\t\t\tlet match = text.match(/DEFAULT\\s+'((?:[^']|'')*)'/i);\n\t\t\tif (match) {\n\t\t\t\tlet val: any = match[1].replace(/''/g, \"'\");\n\t\t\t\tcol.Default(val);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmatch = text.match(/DEFAULT\\s+(\\S+)/i);\n\t\t\t\tif (match) {\n\t\t\t\t\tlet val: any = match[1];\n\t\t\t\t\tlet valnum = parseFloat(val);\n\t\t\t\t\t/* istanbul ignore else: unlikely to be anything but a number */\n\t\t\t\t\tif (val == valnum) {\n\t\t\t\t\t\tval = valnum;\n\t\t\t\t\t}\n\t\t\t\t\tcol.Default(val);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn col;\n\t\t}\n\t\n\t\tstatic equal(a: Column, b: Column): boolean {\n\t\t\tif (a.type != b.type) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ((a.defaultValue || b.defaultValue) && (a.defaultValue != b.defaultValue)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t/* istanbul ignore next: I don't think this is possible */\n\t\t\tif ((a.isKey || b.isKey) && (a.isKey != b.isKey)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\texport interface ColumnSet {\n\t\t[name: string]: Column;\n\t}\n}\n","namespace Updraft {\n\texport interface Rejector {\n\t\t(err: Error): void;\n\t}\n\t\n\texport interface DbStatement {\n\t\tsql: string;\n\t\tparams?: (string | number)[];\n\t}\n\t\n\texport function DbExecuteSequence(transaction: DbTransaction, statements: DbStatement[], nextCallback: DbTransactionCallback) {\n\t\tlet i = 0;\n\t\tlet act = (tx: DbTransaction): void => {\n\t\t\tif (i < statements.length) {\n\t\t\t\tlet which = statements[i];\n\t\t\t\ti++;\n\t\t\t\ttx.executeSql(which.sql, which.params, act);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnextCallback(tx);\n\t\t\t}\n\t\t};\n\t\tact(transaction);\n\t}\n\t\n\texport interface DbErrorCallback {\n\t\t(error: Error): void;\n\t}\n\t\n\texport interface DbWrapper {\n\t\ttransaction(callback: DbTransactionCallback, errorCallback: DbErrorCallback): void;\n\t\treadTransaction(callback: DbTransactionCallback, errorCallback: DbErrorCallback): void;\n\t}\n\t\n\texport interface DbTransactionCallback {\n\t\t(transaction: DbTransaction): void;\n\t}\n\t\n\texport interface DbCommitCallback {\n\t\t(): void;\n\t}\n\t\n\texport interface DbTransaction {\n\t\texecuteSql(sql: string, params: (string | number)[], callback: DbResultsCallback): void;\n\t\teach(sql: string, params: (string | number)[], callback: DbEachResultCallback, final: DbTransactionCallback): void;\n\t\tcommit(callback: DbCommitCallback): void;\n\t}\n\t\n\texport interface DbResultsCallback {\n\t\t(transaction: DbTransaction, results: any[]): void;\n\t}\n\t\n\texport interface DbEachResultCallback {\n\t\t(transaction: DbTransaction, result: any): void;\n\t}\n\t\n\texport interface DbCallback<Result> {\n\t\t(transaction: DbTransaction, result: Result): void;\n\t}\n}\n","// written to React\"s immutability helpers spec\n// see https://facebook.github.io/react/docs/update.html\n\n///<reference path=\"../typings/index.d.ts\"/>\n///<reference path=\"./assign.ts\"/>\n///<reference path=\"./verify.ts\"/>\n\nnamespace Updraft {\n\texport namespace Delta {\n\t\texport interface setter<T> {\n\t\t\t$set: T;\n\t\t}\n\t\t\n\t\texport interface increment {\n\t\t\t$inc: number;\n\t\t}\n\t\t\n\t\texport interface push<T> {\n\t\t\t$push: Array<T>;\n\t\t}\n\t\t\n\t\texport interface unshift<T> {\n\t\t\t$unshift: Array<T>;\n\t\t}\n\t\t\n\t\texport interface splice<T> {\n\t\t\t// array.splice(start, deleteCount[, item1[, item2[, ...]]])\n\t\t\t$splice: Array<Array<number | T>>;\n\t\t}\n\t\t\n\t\texport interface merge<T> {\n\t\t\t$merge: T;\n\t\t}\n\t\t\n\t\texport interface add<T> {\n\t\t\t$add: Array<T>;\n\t\t}\n\t\t\n\t\texport interface deleter<T> {\n\t\t\t$delete: Array<T>;\n\t\t}\n\t\t\n\t\texport type primitive<T> =\n\t\t\tsetter<T>;\n\t\t\n\t\texport type none = void;\n\t\texport type bool = primitive<boolean>;\n\t\texport type num = primitive<number> | increment;\n\t\texport type str = primitive<string>;\n\t\texport type date = setter<Date>;\n\t\texport type obj = primitive<Object> | merge<Object> | deleter<string>;\n\t\texport type enm<T> = primitive<T>;\n\t\t\n\t\texport type array<T> =\n\t\t\tsetter<Array<T>> |\n\t\t\tpush<T> |\n\t\t\tunshift<T> |\n\t\t\tsplice<T> |\n\t\t\tmerge<T>;\n\t\t\n\t\texport type strArray = array<string>;\n\t\texport type numArray = array<number>;\n\t\texport type objArray = array<Object>;\n\t\t\n\t\texport type set<T> =\n\t\t\tsetter<Set<T>> |\n\t\t\tadd<T> |\n\t\t\tdeleter<T>;\n\t\t\n\t\texport type strSet = set<string>;\n\t}\n\t\n\texport function shallowCopy<T>(x: T): T {\n\t\t/* istanbul ignore else: not sure about this one */\n\t\tif (Array.isArray(x)) {\n\t\t\treturn (<any>x).concat();\n\t\t}\n\t\telse if (x instanceof Set) {\n\t\t\treturn <any>new Set<T>(<any>x);\n\t\t}\n\t\telse if (typeof x === \"object\") {\n\t\t\treturn assign(new (<any>x).constructor(), x);\n\t\t}\n\t\telse {\n\t\t\t/* istanbul ignore next: correct AFAIK but unreachable */\n\t\t\treturn x;\n\t\t}\n\t}\n\t\n\texport function shallowEqual<T>(a: T, b: T): boolean {\n\t\tif (Array.isArray(a) && Array.isArray(b)) {\n\t\t\tlet aa: any[] = <any>a;\n\t\t\tlet bb: any[] = <any>b;\n\t\t\tif (aa.length == bb.length) {\n\t\t\t\tfor (let i = 0; i < aa.length; i++) {\n\t\t\t\t\tif (aa[i] != bb[i]) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\telse if (a instanceof Set && b instanceof Set) {\n\t\t\tlet aa: Set<any> = <any>a;\n\t\t\tlet bb: Set<any> = <any>b;\n\t\t\tif (aa.size == bb.size) {\n\t\t\t\tlet equal = true;\n\t\t\t\taa.forEach((elt) => {\n\t\t\t\t\tif (equal && !bb.has(elt)) {\n\t\t\t\t\t\tequal = false;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn equal;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\telse if (a instanceof Date && b instanceof Date) {\n\t\t\treturn (<Date><any>a).getTime() == (<Date><any>b).getTime();\n\t\t}\n\t\telse if (a && typeof a == \"object\" && b && typeof b == \"object\") {\n\t\t\tlet akeys = Object.keys(a);\n\t\t\tlet bkeys = Object.keys(b);\n\t\t\tif (akeys.length == bkeys.length) {\n\t\t\t\tfor (let key of akeys) {\n\t\t\t\t\tif (!(key in b) || a[key] != b[key]) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn a == b;\n\t}\n\t\n\t\n\texport let hasOwnProperty = {}.hasOwnProperty;\n\texport function keyOf(obj: Object) { return Object.keys(obj)[0]; }\n\t\n\tlet command = {\n\t\tset: keyOf({$set: null}),\n\t\tincrement: keyOf({$inc: null}),\n\t\tpush: keyOf({$push: null}),\n\t\tunshift: keyOf({$unshift: null}),\n\t\tsplice: keyOf({$splice: null}),\n\t\tmerge: keyOf({$merge: null}),\n\t\tadd: keyOf({$add: null}),\n\t\tdeleter: keyOf({$delete: null}),\n\t};\n\t\n\t\n\tfunction verifyArrayCase(value: any, spec: any, c: string) {\n\t\tverify(\n\t\t\tArray.isArray(value),\n\t\t\t\"update(): expected target of %s to be an array; got %s.\",\n\t\t\tc,\n\t\t\tvalue\n\t\t);\n\t\tlet specValue = spec[c];\n\t\tverify(\n\t\t\tArray.isArray(specValue),\n\t\t\t\"update(): expected spec of %s to be an array; got %s. \" +\n\t\t\t\"Did you forget to wrap your parameter in an array?\",\n\t\t\tc,\n\t\t\tspecValue\n\t\t);\n\t}\n\t\n\tfunction verifySetCase(value: any, spec: any, c: string) {\n\t\tverify(\n\t\t\tvalue instanceof Set,\n\t\t\t\"update(): expected target of %s to be a set; got %s.\",\n\t\t\tc,\n\t\t\tvalue\n\t\t);\n\t\tlet specValue = spec[c];\n\t\tverify(\n\t\t\tArray.isArray(specValue),\n\t\t\t\"update(): expected spec of %s to be an array; got %s. \" +\n\t\t\t\"Did you forget to wrap your parameter in an array?\",\n\t\t\tc,\n\t\t\tspecValue\n\t\t);\n\t}\n\t\n\texport function update<Element, Delta>(value: Element, spec: Delta): Element {\n\t\tverify(\n\t\t\ttypeof spec === \"object\",\n\t\t\t\"update(): You provided a key path to update() that did not contain one \" +\n\t\t\t\"of %s. Did you forget to include {%s: ...}?\",\n\t\t\tObject.keys(command).join(\", \"),\n\t\t\tcommand.set\n\t\t);\n\n\t\t// verify(\n\t\t// \tObject.keys(spec).reduce( function(previousValue: boolean, currentValue: string): boolean {\n\t\t// \t\treturn previousValue && (keyOf(spec[currentValue]) in command);\n\t\t// \t}, true),\n\t\t// \t\"update(): argument has an unknown key; supported keys are (%s).  delta: %s\",\n\t\t// \tObject.keys(command).join(\", \"),\n\t\t// \tspec\n\t\t// );\n\t\n\t\tif (hasOwnProperty.call(spec, command.set)) {\n\t\t\tverify(\n\t\t\t\tObject.keys(spec).length === 1,\n\t\t\t\t\"Cannot have more than one key in an object with %s\",\n\t\t\t\tcommand.set\n\t\t\t);\n\t\n\t\t\treturn shallowEqual(value, spec[command.set]) ? value : spec[command.set];\n\t\t}\n\t\n\t\tif (hasOwnProperty.call(spec, command.increment)) {\n\t\t\tverify(\n\t\t\t\ttypeof(value) === \"number\" && typeof(spec[command.increment]) === \"number\",\n\t\t\t\t\"Source (%s) and argument (%s) to %s must be numbers\",\n\t\t\t\tvalue,\n\t\t\t\tspec[command.increment],\n\t\t\t\tcommand.increment\n\t\t\t);\n\t\n\t\t\treturn value + spec[command.increment];\n\t\t}\n\t\n\t\tlet changed = false;\n\t\n\t\tif (hasOwnProperty.call(spec, command.merge)) {\n\t\t\tlet mergeObj = spec[command.merge];\n\t\t\tlet nextValue = <any>shallowCopy(value);\n\t\t\tverify(\n\t\t\t\tmergeObj && typeof mergeObj === \"object\",\n\t\t\t\t\"update(): %s expects a spec of type 'object'; got %s\",\n\t\t\t\tcommand.merge,\n\t\t\t\tmergeObj\n\t\t\t);\n\t\t\tverify(\n\t\t\t\tnextValue && typeof nextValue === \"object\",\n\t\t\t\t\"update(): %s expects a target of type 'object'; got %s\",\n\t\t\t\tcommand.merge,\n\t\t\t\tnextValue\n\t\t\t);\n\t\t\tassign(nextValue, spec[command.merge]);\n\t\t\treturn shallowEqual(value, nextValue) ? value : nextValue;\n\t\t}\n\t\n\t\tif (hasOwnProperty.call(spec, command.deleter) && (typeof value === \"object\") && !(value instanceof Set)) {\n\t\t\tlet keys = <any[]>spec[command.deleter];\n\t\t\tverify(\n\t\t\t\tkeys && Array.isArray(keys),\n\t\t\t\t\"update(): %s expects a spec of type 'array'; got %s\",\n\t\t\t\tcommand.deleter,\n\t\t\t\tkeys\n\t\t\t);\n\t\t\tlet nextValue = <any>shallowCopy(value);\n\t\t\tchanged = false;\n\t\t\tkeys.forEach((key: string) => {\n\t\t\t\tif (key in value) {\n\t\t\t\t\tdelete nextValue[key];\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn changed ? <any>nextValue : value;\n\t\t}\n\t\n\t\tif (hasOwnProperty.call(spec, command.push)) {\n\t\t\tlet nextValue: any[] = <any>shallowCopy(value) || [];\n\t\t\tverifyArrayCase(nextValue, spec, command.push);\n\t\t\tif (spec[command.push].length) {\n\t\t\t\tnextValue.push.apply(nextValue, spec[command.push]);\n\t\t\t\treturn <any>nextValue;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t\n\t\tif (hasOwnProperty.call(spec, command.unshift)) {\n\t\t\tverifyArrayCase(value, spec, command.unshift);\n\t\t\tif (spec[command.unshift].length) {\n\t\t\t\tlet nextValue: any[] = <any>shallowCopy(value);\n\t\t\t\tnextValue.unshift.apply(nextValue, spec[command.unshift]);\n\t\t\t\treturn <any>nextValue;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t\n\t\tif (hasOwnProperty.call(spec, command.splice)) {\n\t\t\tlet nextValue: any = <any>shallowCopy(value);\n\t\t\tverify(\n\t\t\t\tArray.isArray(value),\n\t\t\t\t\"Expected %s target to be an array; got %s\",\n\t\t\t\tcommand.splice,\n\t\t\t\tvalue\n\t\t\t);\n\t\t\tverify(\n\t\t\t\tArray.isArray(spec[command.splice]),\n\t\t\t\t\"update(): expected spec of %s to be an array of arrays; got %s. \" +\n\t\t\t\t\"Did you forget to wrap your parameters in an array?\",\n\t\t\t\tcommand.splice,\n\t\t\t\tspec[command.splice]\n\t\t\t);\n\t\t\tspec[command.splice].forEach(function(args: any) {\n\t\t\t\tverify(\n\t\t\t\t\tArray.isArray(args),\n\t\t\t\t\t\"update(): expected spec of %s to be an array of arrays; got %s. \" +\n\t\t\t\t\t\"Did you forget to wrap your parameters in an array?\",\n\t\t\t\t\tcommand.splice,\n\t\t\t\t\tspec[command.splice]\n\t\t\t\t);\n\t\t\t\t(<any>nextValue).splice.apply(nextValue, args);\n\t\t\t});\n\t\t\treturn shallowEqual(nextValue, value) ? value : nextValue;\n\t\t}\n\t\n\t\tif (hasOwnProperty.call(spec, command.add)) {\n\t\t\tlet nextValue: Set<any> = <any>shallowCopy(value) || new Set<any>();\n\t\t\tverifySetCase(nextValue, spec, command.add);\n\t\t\tspec[command.add].forEach(function(item: any) {\n\t\t\t\tif (!nextValue.has(item)) {\n\t\t\t\t\tnextValue.add(item);\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn changed ? <any>nextValue : value;\n\t\t}\n\t\n\t\tif (hasOwnProperty.call(spec, command.deleter) && (value instanceof Set)) {\n\t\t\tlet nextValue: Set<any> = <any>shallowCopy(value);\n\t\t\tverifySetCase(value, spec, command.deleter);\n\t\t\tspec[command.deleter].forEach(function(item: any) {\n\t\t\t\tif (nextValue.delete(item)) {\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn changed ? <any>nextValue : value;\n\t\t}\n\t\n\t\tlet nextValue: any;\n\t\tfor (let k in spec) {\n\t\t\tif (typeof value === \"object\" && !(command.hasOwnProperty(k))) {\n\t\t\t\tlet oldValue = value[k];\n\t\t\t\tlet newValue = update(oldValue, spec[k]);\n\t\t\t\tif (oldValue !== newValue) {\n\t\t\t\t\tif (!nextValue) {\n\t\t\t\t\t\tnextValue = <any>shallowCopy(value);\n\t\t\t\t\t}\n\t\t\t\t\tnextValue[k] = newValue;\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn changed ? nextValue : value;\n\t}\n}\n","///<reference path=\"./Column.ts\"/>\n///<reference path=\"./verify.ts\"/>\n\nnamespace Updraft {\n\texport type KeyType = string | number;\n\t\n\texport interface TableChange<Element, Delta> {\n\t\ttable?: Table<Element, Delta, any>;\n\t\ttime?: number;\n\t\tdelete?: KeyType;\n\t\tupdate?: Delta;\n\t\tcreate?: Element;\n\t}\n\t\n\texport interface TableSpec<Element, Delta, Query> {\n\t\tname: string;\n\t\tcolumns: ColumnSet;\n\t\trenamedColumns?: RenamedColumnSet;\n\t\tindices?: string[][];\n\t\tclazz?: new (props: Element) => Element; \n\t}\n\t\n\texport interface RenamedColumnSet {\n\t\t[oldColumnName: string]: string;\n\t}\n\t\n\texport enum OrderBy {\n\t\tASC,\n\t\tDESC\n\t}\n\t\n\texport interface OrderBySpec {\n\t\t[name: string]: OrderBy;\n\t}\n\t\n\texport interface FieldSpec {\n\t\t[fieldName: string]: boolean;\n\t}\n\t\n\texport interface FindOpts {\n\t\tfields?: FieldSpec;\n\t\torderBy?: OrderBySpec;\n\t\toffset?: number;\n\t\tlimit?: number;\n\t\tcount?: boolean;\n\t}\n\t\n\texport class Table<Element, Delta, Query> {\n\t\tspec: TableSpec<Element, Delta, Query>;\n\t\tkey: KeyType;\n\t\n\t\tconstructor(spec: TableSpec<Element, Delta, Query>) {\n\t\t\tthis.spec = spec;\n\t\t\tthis.key = tableKey(spec);\n\t\t}\n\t\n\t\tkeyValue(element: Element | Delta): KeyType {\n\t\t\tverify(this.key in element, \"object does not have key field '%s' set: %s\", this.key, element);\n\t\t\treturn element[this.key];\n\t\t}\n\t\n\t\tfind: (query: Query | Query[], opts?: FindOpts) => Promise<Element[] | number>;\n\t\tadd: (...changes: TableChange<Element, Delta>[]) => Promise<any>;\n\t}\n\t\n\t\n\texport function tableKey(spec: TableSpec<any, any, any>): KeyType {\n\t\tlet key: KeyType = null;\n\t\tfor (let name in spec.columns) {\n\t\t\tlet column = spec.columns[name];\n\t\t\tverify(column, \"column '%s' is not in %s\", name, spec);\n\t\t\tif (column.isKey) {\n\t\t\t\tverify(!key, \"Table %s has more than one key- %s and %s\", spec.name, key, name);\n\t\t\t\tkey = name;\n\t\t\t}\n\t\t}\n\t\n\t\tverify(key, \"Table %s does not have a key\", spec.name);\n\t\treturn key;\n\t}\n}\n","///<reference path=\"./Column.ts\"/>\n///<reference path=\"./Delta.ts\"/>\n///<reference path=\"./Database.ts\"/>\n///<reference path=\"./Table.ts\"/>\n///<reference path=\"./Text.ts\"/>\n///<reference path=\"./assign.ts\"/>\n///<reference path=\"./verify.ts\"/>\n\nnamespace Updraft {\n\n\tfunction startsWith(str: string, val: string) {\n\t\treturn str.lastIndexOf(val, 0) === 0;\n\t}\n\n\tfunction quote(str: string) {\n\t\treturn '\"' + str + '\"';\n\t}\n\t\n\texport type TableSpecAny = TableSpec<any, any, any>;\n\texport type TableAny = Table<any, any, any>;\n\t\n\texport interface CreateStoreParams {\n\t\tdb: DbWrapper;\n\t\tgenerateGuid?(): string;\n\t}\n\t\n\texport interface Schema {\n\t\t[table: string]: TableSpecAny;\n\t}\n\t\n\tinterface Resolver<T> {\n\t\t(param: T): void;\n\t}\n\t\n\tinterface SqliteMasterRow {\n\t\ttype: string;\n\t\tname: string;\n\t\ttbl_name: string;\n\t\tsql: string;\n\t}\n\t\n\tinterface BaselineInfo<Element> {\n\t\telement: Element;\n\t\ttime: number;\n\t\trowid: number;\n\t}\n\t\n\tinterface ChangeTableRow {\n\t\tkey?: KeyType;\n\t\ttime?: number;\n\t\tchange?: string;\n\t\tsource?: string;\n\t\tsyncId?: number;\n\t}\n\t\n\tinterface SetTableRow {\n\t\tkey?: KeyType;\n\t\ttime?: number;\n\t\tvalue?: string;\n\t}\n\n\tinterface KeyValue {\n\t\tkey?: string;\n\t\tvalue?: any; // stored as JSON\n\t}\n\t\n\tinterface KeyValueMap {\n\t\t[key: string]: any;\n\t}\n\n\tconst MAX_VARIABLES = 999;\n\tconst ROWID = \"rowid\";\n\tconst COUNT = \"COUNT(*)\";\n\tconst DEFAULT_SYNCID = 100;\n\tconst internal_prefix = \"updraft_\";\n\tconst internal_column_deleted = internal_prefix + \"deleted\";\n\tconst internal_column_time = internal_prefix + \"time\";\n\tconst internal_column_latest = internal_prefix + \"latest\";\n\tconst internal_column_composed = internal_prefix + \"composed\";\n\tconst internal_column_source = internal_prefix + \"source\";\n\tconst internal_column_syncId = internal_prefix + \"syncId\";\n\tconst internalColumn: ColumnSet = {};\n\tinternalColumn[internal_column_deleted] = Column.Bool();\n\tinternalColumn[internal_column_time] = Column.Int().Key();\n\tinternalColumn[internal_column_latest] = Column.Bool();\n\tinternalColumn[internal_column_composed] = Column.Bool();\n\tinternalColumn[internal_column_source] = Column.String().Index();\n\tinternalColumn[internal_column_syncId] = Column.Int().Default(DEFAULT_SYNCID).Index();\n\tconst localKey_guid = \"guid\";\n\tconst localKey_syncId = \"syncId\";\n\t\n\tconst deleteRow_action = { [internal_column_deleted]: { $set: true } };\n\t\n\tconst keyValueTableSpec: TableSpec<KeyValue, any, any> = {\n\t\tname: internal_prefix + \"keyValues\",\n\t\tcolumns: {\n\t\t\tkey: Column.String().Key(),\n\t\t\tvalue: Column.JSON(),\n\t\t}\n\t};\n\n\tconst localsTableSpec: TableSpec<KeyValue, any, any> = {\n\t\tname: internal_prefix + \"locals\",\n\t\tcolumns: {\n\t\t\tkey: Column.String().Key(),\n\t\t\tvalue: Column.JSON(),\n\t\t}\n\t};\n\t\n\texport class Store {\n\t\tprivate params: CreateStoreParams;\n\t\tprivate tables: TableSpecAny[];\n\t\tprivate db: DbWrapper;\n\t\tprivate keyValueTable: Table<KeyValue, any, any>;\n\t\tprivate localsTable: Table<KeyValue, any, any>;\n\t\tprivate guid: string;\n\t\tprivate syncId: number;\n\t\tprivate keyValues: KeyValueMap;\n\t\n\t\tconstructor(params: CreateStoreParams) {\n\t\t\tthis.params = params;\n\t\t\tthis.tables = [];\n\t\t\tthis.db = null;\n\t\t\tverify(this.params.db, \"must pass a DbWrapper\");\n\t\t\tthis.localsTable = this.createUntrackedTable<KeyValue, any, any>(localsTableSpec);\n\t\t\tthis.keyValueTable = this.createTrackedTable<KeyValue, any, any>(keyValueTableSpec, true);\n\t\t}\n\t\n\t\tpublic createTable<Element, Delta, Query>(tableSpec: TableSpec<Element, Delta, Query>): Table<Element, Delta, Query> {\n\t\t\treturn this.createTrackedTable(tableSpec, false);\n\t\t}\n\t\t\n\t\tprivate createTrackedTable<Element, Delta, Query>(tableSpec: TableSpec<Element, Delta, Query>, internal: boolean): Table<Element, Delta, Query> {\n\t\t\tverify(!this.db, \"createTable() can only be added before open()\");\n\t\t\tif (!internal) {\n\t\t\t\tverify(!startsWith(tableSpec.name, internal_prefix), \"table name %s cannot begin with %s\", tableSpec.name, internal_prefix);\n\t\t\t}\n\t\t\tfor (let col in tableSpec.columns) {\n\t\t\t\tverify(!startsWith(col, internal_prefix), \"table %s column %s cannot begin with %s\", tableSpec.name, col, internal_prefix);\n\t\t\t}\n\t\t\tlet table = this.createTableObject(tableSpec);\n\t\t\tthis.tables.push(...createInternalTableSpecs(table));\n\t\t\tthis.tables.push(createChangeTableSpec(table));\n\t\t\treturn table;\n\t\t}\n\n\t\tprivate createUntrackedTable<Element, Delta, Query>(tableSpec: TableSpec<Element, Delta, Query>): Table<Element, Delta, Query> {\n\t\t\tbuildIndices(tableSpec);\n\t\t\tlet table = this.createTableObject<Element, any, any>(tableSpec);\n\t\t\tthis.tables.push(tableSpec);\n\t\t\treturn table;\n\t\t}\n\t\t\n\t\tprivate createTableObject<Element, Delta, Query>(tableSpec: TableSpec<Element, Delta, Query>): Table<Element, Delta, Query> {\n\t\t\tlet table = new Table<Element, Delta, Query>(tableSpec);\n\t\t\ttable.add = (...changes: TableChange<Element, Delta>[]): Promise<any> => {\n\t\t\t\tchanges.forEach(change => change.table = table);\n\t\t\t\treturn this.add(...changes);\n\t\t\t};\n\t\t\ttable.find = (queryArg: Query | Query[], opts?: FindOpts): Promise<Element[] | number> => {\n\t\t\t\treturn this.find(table, queryArg, opts);\n\t\t\t};\n\t\t\treturn table;\n\t\t}\n\t\n\t\tpublic open(): Promise<any> {\n\t\t\tverify(!this.db, \"open() called more than once!\");\n\t\t\tverify(this.tables.length, \"open() called before any tables were added\");\n\t\n\t\t\tthis.db = this.params.db;\n\t\n\t\t\treturn Promise.resolve()\n\t\t\t\t.then(() => this.readSchema())\n\t\t\t\t.then((schema) => {\n\t\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\t\tlet i = 0;\n\t\t\t\t\t\tlet act = (transaction: DbTransaction) => {\n\t\t\t\t\t\t\tif (i < this.tables.length) {\n\t\t\t\t\t\t\t\tlet table = this.tables[i];\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t\tthis.syncTable(transaction, schema, table, act);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthis.loadLocals(transaction, () => {\n\t\t\t\t\t\t\t\t\tthis.loadKeyValues(transaction, () => {\n\t\t\t\t\t\t\t\t\t\ttransaction.commit(resolve);\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.db.transaction(act, reject);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t;\n\t\t}\n\t\n\t\tpublic readSchema(): Promise<Schema> {\n\t\t\tverify(this.db, \"readSchema(): not opened\");\n\t\t\t\n\t\t\treturn new Promise((resolve: Resolver<Schema>, reject: DbErrorCallback) => {\n\t\t\t\tthis.db.readTransaction((transaction: DbTransaction) => {\n\t\t\t\t\treturn transaction.executeSql(\"SELECT name, tbl_name, type, sql FROM sqlite_master\", [], (tx: DbTransaction, resultSet: any[]) => {\n\t\t\t\t\t\tlet schema: Schema = {};\n\t\t\t\t\t\tfor (let i = 0; i < resultSet.length; i++) {\n\t\t\t\t\t\t\tlet row = <SqliteMasterRow>resultSet[i];\n\t\t\t\t\t\t\tif (row.name[0] != \"_\" && !startsWith(row.name, \"sqlite\")) {\n\t\t\t\t\t\t\t\tswitch (row.type) {\n\t\t\t\t\t\t\t\t\tcase \"table\":\n\t\t\t\t\t\t\t\t\t\tschema[row.name] = tableFromSql(row.name, row.sql);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase \"index\":\n\t\t\t\t\t\t\t\t\t\tlet index = indexFromSql(row.sql);\n\t\t\t\t\t\t\t\t\t\tif (index.length == 1) {\n\t\t\t\t\t\t\t\t\t\t\tlet col = index[0];\n\t\t\t\t\t\t\t\t\t\t\tverify(row.tbl_name in schema, \"table %s used by index %s should have been returned first\", row.tbl_name, row.name);\n\t\t\t\t\t\t\t\t\t\t\tverify(col in schema[row.tbl_name].columns, \"table %s does not have column %s used by index %s\", row.tbl_name, col, row.name);\n\t\t\t\t\t\t\t\t\t\t\tschema[row.tbl_name].columns[col].isIndex = true;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\t\tschema[row.tbl_name].indices.push(index);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t// case \"trigger\":\n\t\t\t\t\t\t\t\t\t// \tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\ttransaction.commit(() => resolve(schema));\n\t\t\t\t\t});\n\t\t\t\t}, reject);\n\t\t\t});\n\t\t}\n\n\t\tprivate syncTable(transaction: DbTransaction, schema: Schema, spec: TableSpecAny, nextCallback: DbTransactionCallback): void {\n\t\t\tif (spec.name in schema) {\n\t\t\t\tlet oldColumns = schema[spec.name].columns;\n\t\t\t\tlet newColumns = spec.columns;\n\t\t\t\tlet recreateTable: boolean = false;\n\t\n\t\t\t\tfor (let colName in oldColumns) {\n\t\t\t\t\tif (!(colName in newColumns)) {\n\t\t\t\t\t\trecreateTable = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tlet oldCol = oldColumns[colName];\n\t\t\t\t\tlet newCol = newColumns[colName];\n\t\t\t\t\tif (!Column.equal(oldCol, newCol)) {\n\t\t\t\t\t\trecreateTable = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tlet renamedColumns = shallowCopy(spec.renamedColumns) || {};\n\t\t\t\tfor (let colName in renamedColumns) {\n\t\t\t\t\tif (colName in oldColumns) {\n\t\t\t\t\t\trecreateTable = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tdelete renamedColumns[colName];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tlet addedColumns: ColumnSet = {};\n\t\t\t\tif (!recreateTable) {\n\t\t\t\t\tfor (let colName of selectableColumns(spec, newColumns)) {\n\t\t\t\t\t\tif (!(colName in oldColumns)) {\n\t\t\t\t\t\t\taddedColumns[colName] = newColumns[colName];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tif (recreateTable) {\n\t\t\t\t\t// recreate and migrate data\n\t\n\t\t\t\t\tlet tempTableName = \"temp_\" + spec.name;\n\t\t\t\t\tlet changeTableName = getChangeTableName(spec.name);\n\t\n\t\t\t\t\tdropTable(transaction, tempTableName, (tx2: DbTransaction) => {\n\t\t\t\t\t\tcreateTable(tx2, tempTableName, spec.columns, (tx3: DbTransaction) => {\n\t\t\t\t\t\t\tcopyData(tx3, spec.name, tempTableName, oldColumns, newColumns, renamedColumns, (tx4: DbTransaction) => {\n\t\t\t\t\t\t\t\tdropTable(tx4, spec.name, (tx5: DbTransaction) => {\n\t\t\t\t\t\t\t\t\trenameTable(tx5, tempTableName, spec.name, (tx6: DbTransaction) => {\n\t\t\t\t\t\t\t\t\t\tmigrateChangeTable(tx6, changeTableName, oldColumns, newColumns, renamedColumns, (tx7: DbTransaction) => {\n\t\t\t\t\t\t\t\t\t\t\tcreateIndices(tx7, schema, spec, true, nextCallback);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse if (!isEmpty(addedColumns)) {\n\t\t\t\t\t// alter table, add columns\n\t\t\t\t\tlet stmts: DbStatement[] = [];\n\t\t\t\t\tObject.keys(addedColumns).forEach((colName) => {\n\t\t\t\t\t\tlet col: Column = spec.columns[colName];\n\t\t\t\t\t\tlet columnDecl = quote(colName) + \" \" + Column.sql(col);\n\t\t\t\t\t\tstmts.push({sql: \"ALTER TABLE \" + spec.name + \" ADD COLUMN \" + columnDecl});\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tDbExecuteSequence(transaction, stmts, (tx2: DbTransaction) => {\n\t\t\t\t\t\tcreateIndices(tx2, schema, spec, false, nextCallback);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// no table modification is required\n\t\t\t\t\tcreateIndices(transaction, schema, spec, false, nextCallback);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// create new table\n\t\t\t\tcreateTable(transaction, spec.name, spec.columns, (tx2: DbTransaction) => {\n\t\t\t\t\tcreateIndices(tx2, schema, spec, true, nextCallback);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t\n\t\tprivate loadLocals(transaction: DbTransaction, nextCallback: DbTransactionCallback): void {\n\t\t\ttransaction.executeSql(\"SELECT key, value FROM \" + this.localsTable.spec.name, [], (tx2: DbTransaction, rows: KeyValue[]) => {\n\t\t\t\trows.forEach((row: KeyValue) => {\n\t\t\t\t\tswitch (row.key) {\n\t\t\t\t\t\tcase localKey_guid:\n\t\t\t\t\t\t\tthis.guid = row.value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase localKey_syncId:\n\t\t\t\t\t\t\tthis.syncId = row.value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tverify(false, \"unknown key %s in %s\", row.key, this.localsTable.spec.name);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tconst initGuid = (tx: DbTransaction, next: DbTransactionCallback) => {\n\t\t\t\t\tif (!this.guid && this.params.generateGuid) {\n\t\t\t\t\t\tthis.guid = this.params.generateGuid();\n\t\t\t\t\t\tthis.saveLocal(tx, localKey_guid, this.guid, next);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tnext(tx);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tconst initSyncId = (tx: DbTransaction, next: DbTransactionCallback) => {\n\t\t\t\t\tif (!this.syncId) {\n\t\t\t\t\t\tthis.syncId = DEFAULT_SYNCID;\n\t\t\t\t\t\tthis.saveLocal(tx, localKey_syncId, this.syncId, next);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tnext(tx);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tinitGuid(tx2, (tx3) => {\n\t\t\t\t\tinitSyncId(tx3, nextCallback);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tprivate saveLocal(transaction: DbTransaction, key: string, value: any, nextCallback: DbTransactionCallback): void {\n\t\t\tlet sql: string = \"INSERT INTO \" + this.localsTable.spec.name + \" (key, value) VALUES (?, ?)\"; \n\t\t\ttransaction.executeSql(sql, [key, value], nextCallback);\n\t\t}\n\t\t\n\t\tprivate loadKeyValues(transaction: DbTransaction, nextCallback: DbTransactionCallback): void {\n\t\t\treturn runQuery(transaction, this.keyValueTable, {}, undefined, undefined, (tx2: DbTransaction, rows: KeyValue[]) => {\n\t\t\t\tthis.keyValues = {};\n\t\t\t\trows.forEach((row: KeyValue) => {\n\t\t\t\t\tthis.keyValues[row.key] = row.value;\n\t\t\t\t});\n\t\t\t\tnextCallback(tx2);\n\t\t\t});\n\t\t}\n\n\t\tpublic getValue(key: string): any {\n\t\t\treturn this.keyValues[key];\n\t\t}\n\t\t\n\t\tpublic setValue(key: string, value: any): Promise<any> {\n\t\t\tthis.keyValues[key] = value;\n\t\t\treturn this.keyValueTable.add({create: {key, value}});\n\t\t}\n\n\t\tpublic add(...changes: TableChange<any, any>[]): Promise<any> {\n\t\t\treturn this.addFromSource(changes, null);\n\t\t}\n\t\n\t\tpublic addFromSource(changes: TableChange<any, any>[], source: string): Promise<any> {\n\t\t\tverify(this.db, \"addFromSource(): not opened\");\n\t\t\t\n\t\t\tinterface ResolveKey {\n\t\t\t\ttable: TableAny;\n\t\t\t\tkey: KeyType;\n\t\t\t}\n\n\t\t\tinterface TableKeySet {\n\t\t\t\ttable: TableAny;\n\t\t\t\tkeysArray: Set<KeyType>[];\n\t\t\t\tallKeys: Set<KeyType>;\n\t\t\t\tduplicateKeys: Set<KeyType>;\n\t\t\t\texistingKeys: Set<KeyType>;\n\t\t\t}\n\n\t\t\treturn new Promise((promiseResolve, reject) => {\n\t\t\t\tconst syncId = this.syncId;\n\t\t\t\tverify(syncId, \"invalid syncId\");\n\t\t\t\tconst tableKeySet: TableKeySet[] = [];\n\t\t\t\tchanges.forEach(change => {\n\t\t\t\t\tif (change.create) {\n\t\t\t\t\t\tconst key = change.table.keyValue(change.create);\n\t\t\t\t\t\tlet keys: Set<KeyType> = null;\n\t\t\t\t\t\tlet duplicateKeys: Set<KeyType> = null;\n\t\t\t\t\t\tlet allKeys: Set<KeyType> = null;\n\t\t\t\t\t\tfor (let j = 0; j < tableKeySet.length; j++) {\n\t\t\t\t\t\t\t/* istanbul ignore else */\n\t\t\t\t\t\t\tif (tableKeySet[j].table === change.table) {\n\t\t\t\t\t\t\t\tduplicateKeys = tableKeySet[j].duplicateKeys;\n\t\t\t\t\t\t\t\tallKeys = tableKeySet[j].allKeys;\n\t\t\t\t\t\t\t\tfor (let k = 0; k < tableKeySet[j].keysArray.length; k++) {\n\t\t\t\t\t\t\t\t\tlet kk = tableKeySet[j].keysArray[k];\n\t\t\t\t\t\t\t\t\tif (kk.size < MAX_VARIABLES) {\n\t\t\t\t\t\t\t\t\t\tkeys = kk;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (!keys) {\n\t\t\t\t\t\t\t\t\tkeys = new Set<KeyType>();\n\t\t\t\t\t\t\t\t\ttableKeySet[j].keysArray.push(keys);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (keys == null) {\n\t\t\t\t\t\t\tkeys = new Set<KeyType>();\n\t\t\t\t\t\t\tduplicateKeys = new Set<KeyType>();\n\t\t\t\t\t\t\tallKeys = new Set<KeyType>();\n\t\t\t\t\t\t\ttableKeySet.push({ table: change.table, keysArray: [keys], allKeys, duplicateKeys, existingKeys: new Set<KeyType>() });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (allKeys.has(key)) {\n\t\t\t\t\t\t\tduplicateKeys.add(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tallKeys.add(key);\n\t\t\t\t\t\tkeys.add(key);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tlet findIdx = 0;\n\t\t\t\tlet findBatchIdx = 0;\n \t\t\t\tlet changeIdx = 0;\n\t\t\t\tlet toResolve = new Set<ResolveKey>();\n\t\t\t\tlet findExistingIds: DbTransactionCallback = null;\n\t\t\t\tlet insertNextChange: DbTransactionCallback = null;\n\t\t\t\tlet resolveChanges: DbTransactionCallback = null;\n\n\t\t\t\tfindExistingIds = (transaction: DbTransaction) => {\n\t\t\t\t\tif (findIdx < tableKeySet.length) {\n\t\t\t\t\t\tconst table = tableKeySet[findIdx].table;\n\t\t\t\t\t\tconst keysArray = tableKeySet[findIdx].keysArray;\n\t\t\t\t\t\tconst duplicateKeys = tableKeySet[findIdx].duplicateKeys;\n\t\t\t\t\t\tconst existingKeys = tableKeySet[findIdx].existingKeys;\n\t\t\t\t\t\tconst notDuplicatedValues: KeyValue[] = [];\n\t\t\t\t\t\tkeysArray[findBatchIdx].forEach(key => {\n\t\t\t\t\t\t\tif (!duplicateKeys.has(key)) {\n\t\t\t\t\t\t\t\tnotDuplicatedValues.push(key);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst query: any = { [table.key]: { $in: notDuplicatedValues } };\n\t\t\t\t\t\tconst opts: FindOpts = { fields: { [table.key]: true } };\n\t\t\t\t\t\trunQuery(transaction, table, query, opts, null, (tx: DbTransaction, rows: any[]) => {\n\t\t\t\t\t\t\tfor (let row of rows) {\n\t\t\t\t\t\t\t\texistingKeys.add(row[table.key]);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfindBatchIdx++;\n\t\t\t\t\t\t\tif (findBatchIdx >= keysArray.length) {\n\t\t\t\t\t\t\t\tfindIdx++;\n\t\t\t\t\t\t\t\tfindBatchIdx = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfindExistingIds(transaction);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tinsertNextChange(transaction);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tinsertNextChange = (transaction: DbTransaction) => {\n\t\t\t\t\tif (changeIdx < changes.length) {\n\t\t\t\t\t\tlet change = changes[changeIdx];\n\t\t\t\t\t\tchangeIdx++;\n\t\t\t\t\t\tconst table = change.table;\n\t\t\t\t\t\tverify(table, \"change must specify table\");\n\t\t\t\t\t\tlet changeTable = getChangeTableName(table.spec.name);\n\t\t\t\t\t\tlet time = change.time || Date.now();\n\t\t\t\t\t\tverify((change.create ? 1 : 0) + (change.update ? 1 : 0) + (change.delete ? 1 : 0) === 1, \"change (%s) must specify exactly one action at a time\", change);\n\t\t\t\t\t\tlet existingKeys: Set<KeyType> = null;\n\t\t\t\t\t\ttableKeySet.some((tk): boolean => {\n\t\t\t\t\t\t\t/* istanbul ignore else */\n\t\t\t\t\t\t\tif (tk.table === table) {\n\t\t\t\t\t\t\t\texistingKeys = tk.existingKeys;\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (change.create) {\n\t\t\t\t\t\t\t// append internal column values\n\t\t\t\t\t\t\tlet element = assign(\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tchange.create,\n\t\t\t\t\t\t\t\t{ [internal_column_time]: time },\n\t\t\t\t\t\t\t\t{ [internal_column_source]: source },\n\t\t\t\t\t\t\t\t{ [internal_column_syncId]: syncId }\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst key = table.keyValue(element);\n\t\t\t\t\t\t\t// optimization: don't resolve elements that aren't already in the db- just mark them as latest\n\t\t\t\t\t\t\tif (existingKeys.has(key)) {\n\t\t\t\t\t\t\t\ttoResolve.add({ table, key });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\telement[internal_column_latest] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinsertElement(transaction, table, element, insertNextChange);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (change.update || change.delete) {\n\t\t\t\t\t\t\tlet changeRow: ChangeTableRow = {\n\t\t\t\t\t\t\t\tkey: null,\n\t\t\t\t\t\t\t\ttime: time,\n\t\t\t\t\t\t\t\tchange: null,\n\t\t\t\t\t\t\t\tsource: source,\n\t\t\t\t\t\t\t\tsyncId: syncId\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (change.update) {\n\t\t\t\t\t\t\t\t// store deltas\n\t\t\t\t\t\t\t\tlet delta = shallowCopy(change.update);\n\t\t\t\t\t\t\t\tchangeRow.key = table.keyValue(delta);\n\t\t\t\t\t\t\t\tdelete delta[table.key];\n\t\t\t\t\t\t\t\tchangeRow.change = serializeDelta(delta, table.spec);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t// mark deleted\n\t\t\t\t\t\t\t\tchangeRow.key = change.delete;\n\t\t\t\t\t\t\t\tchangeRow.change = serializeDelta(deleteRow_action, table.spec);\n\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t// insert into delta table\n\t\t\t\t\t\t\tlet columns = Object.keys(changeRow);\n\t\t\t\t\t\t\tlet values: any[] = columns.map(k => changeRow[k]);\n\t\t\t\t\t\t\ttoResolve.add({table, key: changeRow.key});\n\t\t\t\t\t\t\tinsert(transaction, changeTable, columns, values, insertNextChange);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\tif (!change.create && !change.update && !change.delete) {\n\t\t\t\t\t\t\tthrow new Error(\"no operation specified for delta- should be one of create, update, or delete\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tresolveChanges(transaction);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tresolveChanges = (transaction: DbTransaction) => {\n\t\t\t\t\tlet j = 0;\n\t\t\t\t\tlet toResolveArray: ResolveKey[] = [];\n\t\t\t\t\ttoResolve.forEach((keyValue: ResolveKey) => toResolveArray.push(keyValue));\n\t\t\t\t\tlet resolveNextChange = (tx2: DbTransaction) => {\n\t\t\t\t\t\tif (j < toResolveArray.length) {\n\t\t\t\t\t\t\tlet keyValue = toResolveArray[j];\n\t\t\t\t\t\t\tj++;\n\t\t\t\t\t\t\tresolve(tx2, keyValue.table, keyValue.key, resolveNextChange);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ttx2.commit(promiseResolve);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tresolveNextChange(transaction);\n\t\t\t\t};\n\t\t\t\n\t\t\t\tthis.db.transaction(findExistingIds, reject);\n\t\t\t});\n\t\t}\n\t\n\t\tpublic find<Element, Query>(table: Table<Element, any, Query>, queryArg: Query | Query[], opts?: FindOpts): Promise<Element[] | number> {\n\t\t\treturn new Promise((resolve: Resolver<Element[] | number>, reject: DbErrorCallback) => {\n\t\t\t\tthis.db.readTransaction((transaction: DbTransaction) => {\n\t\t\t\t\tlet queries: Query[] = Array.isArray(queryArg) ? queryArg : [queryArg];\n\t\t\t\t\tlet qs = queries.map(query => \n\t\t\t\t\t\tassign({}, query, {\n\t\t\t\t\t\t\t[internal_column_deleted]: false,\n\t\t\t\t\t\t\t[internal_column_latest]: true,\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\trunQuery(transaction, table, qs, opts, table.spec.clazz, (tx2: DbTransaction, results: Element[] | number) => {\n\t\t\t\t\t\ttx2.commit(() => resolve(results));\n\t\t\t\t\t});\n\t\t\t\t}, reject);\n\t\t\t});\n\t\t}\n\t}\n\t\n\tfunction getChangeTableName(name: string): string {\n\t\treturn internal_prefix + \"changes_\" + name;\n\t}\n\t\n\tfunction getSetTableName(tableName: string, col: string): string {\n\t\treturn internal_prefix + \"set_\" + tableName + \"_\" + col;\n\t}\n\t\n\tfunction buildIndices(spec: TableSpecAny) {\n\t\tspec.indices = shallowCopy(spec.indices) || [];\n\t\tfor (let col in spec.columns) {\n\t\t\tif (spec.columns[col].isIndex) {\n\t\t\t\tspec.indices.push([col]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction createInternalTableSpecs(table: Table<any, any, any>): TableSpecAny[] {\n\t\tlet newSpec = shallowCopy(table.spec);\n\t\tnewSpec.columns = shallowCopy(table.spec.columns);\n\t\tfor (let col in internalColumn) {\n\t\t\tverify(!table.spec.columns[col], \"table %s cannot have reserved column name %s\", table.spec.name, col);\n\t\t\tnewSpec.columns[col] = internalColumn[col];\n\t\t}\n\t\tbuildIndices(newSpec);\n\t\treturn [newSpec, ...createSetTableSpecs(newSpec, verifyGetValue(newSpec.columns, table.key))];\n\t}\n\t\n\tfunction createChangeTableSpec(table: Table<any, any, any>): TableSpecAny {\n\t\tlet newSpec = <TableSpecAny>{\n\t\t\tname: getChangeTableName(table.spec.name),\n\t\t\tcolumns: {\n\t\t\t\tkey: Column.Int().Key(),\n\t\t\t\ttime: Column.DateTime().Key(),\n\t\t\t\tchange: Column.JSON(),\n\t\t\t\tsource: Column.String().Index(),\n\t\t\t\tsyncId: Column.Int().Default(DEFAULT_SYNCID).Index(),\n\t\t\t}\n\t\t};\n\t\tbuildIndices(newSpec);\n\t\treturn newSpec;\n\t}\n\t\n\tfunction createSetTableSpecs(spec: TableSpecAny, keyColumn: Column): TableSpecAny[] {\n\t\tlet newSpecs: TableSpecAny[] = [];\n\t\tfor (let col in spec.columns) {\n\t\t\tlet column = spec.columns[col];\n\t\t\tif (column.type == ColumnType.set) {\n\t\t\t\tlet newSpec = <TableSpecAny>{\n\t\t\t\t\tname: getSetTableName(spec.name, col),\n\t\t\t\t\tcolumns: {\n\t\t\t\t\t\tkey: keyColumn,\n\t\t\t\t\t\tvalue: new Column(column.element.type).Key(),\n\t\t\t\t\t\ttime: Column.Int().Key()\n\t\t\t\t\t}\n\t\t\t\t};\n\t\n\t\t\t\tbuildIndices(newSpec);\n\t\t\t\tnewSpecs.push(newSpec);\n\t\t\t}\n\t\t}\n\t\treturn newSpecs;\n\t}\n\t\n\tfunction tableFromSql(name: string, sql: string): TableSpecAny {\n\t\tlet table = <TableSpecAny>{ name: name, columns: {}, indices: [], triggers: {} };\n\t\tlet matches = sql.match(/\\((.*)\\)/);\n\t\t/* istanbul ignore else */\n\t\tif (matches) {\n\t\t\tlet pksplit: string[] = matches[1].split(/PRIMARY KEY/i);\n\t\t\tlet fields = pksplit[0].split(\",\");\n\t\t\tfor (let i = 0; i < fields.length; i++) {\n\t\t\t\tverify(!fields[i].match(/^\\s*(primary|foreign)\\s+key/i), \"unexpected column modifier (primary or foreign key) on %s\", fields[i]);\n\t\t\t\tlet quotedName = /\"(.+)\"\\s+(.*)/;\n\t\t\t\tlet unquotedName = /(\\w+)\\s+(.*)/;\n\t\t\t\tlet parts = fields[i].match(quotedName);\n\t\t\t\t/* istanbul ignore else */\n\t\t\t\tif (!parts) {\n\t\t\t\t\tparts = fields[i].match(unquotedName);\n\t\t\t\t}\n\t\t\t\tif (parts) {\n\t\t\t\t\ttable.columns[parts[1]] = Column.fromSql(parts[2]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* istanbul ignore else */\n\t\t\tif (pksplit.length > 1) {\n\t\t\t\tlet pk = pksplit[1].match(/\\((.*)\\)/);\n\t\t\t\t/* istanbul ignore else */\n\t\t\t\tif (pk) {\n\t\t\t\t\tlet keys = pk[1].split(\",\");\n\t\t\t\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\t\t\t\tlet key = keys[i].trim();\n\t\t\t\t\t\ttable.columns[key].isKey = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn table;\n\t}\n\t\n\tfunction indexFromSql(sql: string): string[] {\n\t\tlet regex = /\\((.*)\\)/;\n\t\tlet matches = regex.exec(sql);\n\t\tverify(matches, \"bad format on index- couldn't determine column names from sql: %s\", sql);\n\t\treturn matches[1].split(\",\").map((x: string) => x.trim());\n\t}\n\t\n\tfunction createTable(transaction: DbTransaction, name: string, columns: ColumnSet, nextCallback: DbTransactionCallback): void {\n\t\tlet cols: string[] = [];\n\t\tlet pk: string[] = [];\n\t\tfor (let col in columns) {\n\t\t\tlet attrs: Column = columns[col];\n\t\t\tlet decl: string;\n\t\t\tswitch (attrs.type) {\n\t\t\t\tcase ColumnType.set:\n\t\t\t\t\t// ignore this column; values go into a separate table\n\t\t\t\t\tverify(!attrs.isKey, \"table %s cannot have a key on set column %s\", name, col);\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tdefault:\n\t\t\t\t\tdecl = quote(col) + \" \" + Column.sql(attrs);\n\t\t\t\t\tcols.push(decl);\n\t\t\t\t\tif (attrs.isKey) {\n\t\t\t\t\t\tpk.push(col);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tverify(pk.length, \"table %s has no keys\", name);\n\t\tcols.push(\"PRIMARY KEY(\" + pk.join(\", \")  + \")\");\n\t\ttransaction.executeSql(\"CREATE TABLE \" + name + \" (\" + cols.join(\", \") + \")\", [], nextCallback);\n\t}\n\t\n\tfunction renameTable(transaction: DbTransaction, oldName: string, newName: string, nextCallback: DbTransactionCallback): void {\n\t\ttransaction.executeSql(\"ALTER TABLE \" + oldName + \" RENAME TO \" + newName, [], nextCallback);\n\t}\n\n\tfunction dropTable(transaction: DbTransaction, name: string, nextCallback: DbTransactionCallback): void {\n\t\ttransaction.executeSql(\"DROP TABLE IF EXISTS \" + name, [], nextCallback);\n\t}\n\t\n\tfunction createIndices(transaction: DbTransaction, schema: Schema, spec: TableSpecAny, force: boolean, nextCallback: DbTransactionCallback): void {\n\t\tlet indicesEqual = function(a: string[], b: string[]) {\n\t\t\tif (a.length != b.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (let i = 0; i < a.length; i++) {\n\t\t\t\tif (a[i] != b[i]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\t\tlet oldIndices = (spec.name in schema) ? schema[spec.name].indices : [];\n\t\tlet newIndices = spec.indices;\n\t\tlet getIndexName = function(indices: string[]): string {\n\t\t\t\treturn \"index_\" + spec.name + \"__\" + indices.join(\"_\");\n\t\t};\n\n\t\tlet stmts: DbStatement[] = [];\n\t\toldIndices.forEach((value: string[], i: number) => {\n\t\t\tlet drop = true;\n\t\n\t\t\tfor (let j = 0; j < newIndices.length; j++) {\n\t\t\t\tif (indicesEqual(oldIndices[i], newIndices[j])) {\n\t\t\t\t\tdrop = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif (drop) {\n\t\t\t\tstmts.push({ sql: \"DROP INDEX IF EXISTS \" + getIndexName(oldIndices[i]) });\n\t\t\t}\n\t\t});\n\n\t\tnewIndices.forEach((value: string[], j: number) => {\n\t\t\tlet create = true;\n\t\n\t\t\tfor (let i = 0; i < oldIndices.length; i++) {\n\t\t\t\tif (indicesEqual(oldIndices[i], newIndices[j])) {\n\t\t\t\t\tcreate = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif (create || force) {\n\t\t\t\tlet index = newIndices[j];\n\t\t\t\tstmts.push({ sql: \"CREATE INDEX IF NOT EXISTS \" + getIndexName(index) + \" ON \" + spec.name + \" (\" + index.join(\", \") + \")\" });\n\t\t\t}\n\t\t});\n\n\t\tDbExecuteSequence(transaction, stmts, nextCallback);\n\t}\n\t\n\tfunction copyData(transaction: DbTransaction, oldName: string, newName: string, oldColumns: ColumnSet, newColumns: ColumnSet, renamedColumns: RenamedColumnSet, nextCallback: DbTransactionCallback): void {\n\t\tlet oldTableColumns = Object.keys(oldColumns).filter(col => (col in newColumns) || (col in renamedColumns));\n\t\tlet newTableColumns = oldTableColumns.map(col => (col in renamedColumns) ? renamedColumns[col] : col);\n\t\t/* istanbul ignore else */\n\t\tif (oldTableColumns.length && newTableColumns.length) {\n\t\t\tlet stmt = \"INSERT INTO \" + newName + \" (\" + newTableColumns.map(quote).join(\", \") + \") \";\n\t\t\tstmt += \"SELECT \" + oldTableColumns.map(quote).join(\", \") + \" FROM \" + oldName + \";\";\n\t\t\ttransaction.executeSql(stmt, [], nextCallback);\n\t\t}\n\t\telse {\n\t\t\tnextCallback(transaction);\n\t\t}\n\t}\n\t\n\tfunction migrateChangeTable(transaction: DbTransaction, changeTableName: string, oldColumns: ColumnSet, newColumns: ColumnSet, renamedColumns: RenamedColumnSet, nextCallback: DbTransactionCallback): void {\n\t\tlet deletedColumns = Object.keys(oldColumns).filter(col => !(col in newColumns) && !(col in renamedColumns));\n\t\t/* istanbul ignore else */\n\t\tif (!isEmpty(renamedColumns) || deletedColumns) {\n\t\t\ttransaction.each(\n\t\t\t\t\"SELECT \" + ROWID + \", change\"\n\t\t\t\t+ \" FROM \" + changeTableName,\n\t\t\t\t[],\n\t\t\t\t(selectChangeTransaction: DbTransaction, row: any) => {\n\t\t\t\t\tlet change = fromText(row.change);\n\t\t\t\t\tlet changed = false;\n\t\t\t\t\tfor (let oldCol in renamedColumns) {\n\t\t\t\t\t\tlet newCol = renamedColumns[oldCol];\n\t\t\t\t\t\tif (oldCol in change) {\n\t\t\t\t\t\t\tchange[newCol] = change[oldCol];\n\t\t\t\t\t\t\tdelete change[oldCol];\n\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (let oldCol of deletedColumns) {\n\t\t\t\t\t\tif (oldCol in change) {\n\t\t\t\t\t\t\tdelete change[oldCol];\n\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (changed) {\n\t\t\t\t\t\tif (!isEmpty(change)) {\n\t\t\t\t\t\t\tselectChangeTransaction.executeSql(\n\t\t\t\t\t\t\t\t\"UPDATE \" + changeTableName\n\t\t\t\t\t\t\t\t+ \" SET change=?\"\n\t\t\t\t\t\t\t\t+ \" WHERE \" + ROWID + \"=?\",\n\t\t\t\t\t\t\t\t[toText(change), row[ROWID]],\n\t\t\t\t\t\t\t\t() => {}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tselectChangeTransaction.executeSql(\n\t\t\t\t\t\t\t\t\"DELETE FROM \" + changeTableName\n\t\t\t\t\t\t\t\t+ \" WHERE \" + ROWID + \"=?\",\n\t\t\t\t\t\t\t\t[row[ROWID]],\n\t\t\t\t\t\t\t\t() => {}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tnextCallback\n\t\t\t);\n\t\t}\n\t}\n\t\n\tfunction verifyGetValue(element: any, field: string | number): any {\n\t\tverify(field in element, \"element does not contain field %s: %s\", field, element);\n\t\treturn element[field];\n\t}\n\t\n\tfunction insert(transaction: DbTransaction, tableName: string, columns: string[], values: any[], nextCallback: DbTransactionCallback): void {\n\t\tlet questionMarks = values.map(v => \"?\");\n\t\tverify(columns.indexOf(ROWID) == -1, \"should not insert with rowid column\");\n\t\ttransaction.executeSql(\"INSERT OR REPLACE INTO \" + tableName + \" (\" + columns.join(\", \") + \") VALUES (\" + questionMarks.join(\", \") + \")\", values, nextCallback);\n\t}\n\t\n\tfunction insertElement<Element>(transaction: DbTransaction, table: Table<Element, any, any>, element: Element, nextCallback: DbTransactionCallback): void {\n\t\tlet keyValue = table.keyValue(element);\n\t\tlet columns = selectableColumns(table.spec, element);\n\t\tlet values: any[] = columns.map(col => serializeValue(table.spec, col, element[col]));\n\t\tlet time = verifyGetValue(element, internal_column_time);\n\t\t\n\t\tinsert(transaction, table.spec.name, columns, values, (tx2: DbTransaction) => {\n\t\t\t// insert set values\n\t\t\tlet stmts: DbStatement[] = [];\n\t\t\tObject.keys(table.spec.columns).forEach(function insertElementEachColumn(col: string) {\n\t\t\t\tlet column = table.spec.columns[col];\n\t\t\t\tif (column.type == ColumnType.set && (col in element)) {\n\t\t\t\t\tlet set: Set<any> = element[col];\n\t\t\t\t\tif (set.size) {\n\t\t\t\t\t\tset.forEach((value: any) => {\n\t\t\t\t\t\t\tstmts.push({\n\t\t\t\t\t\t\t\tsql: \"INSERT INTO \" + getSetTableName(table.spec.name, col)\n\t\t\t\t\t\t\t\t\t+ \" (time, key, value)\"\n\t\t\t\t\t\t\t\t\t+ \" VALUES (?, ?, ?)\",\n\t\t\t\t\t\t\t\tparams: [time, table.keyValue(element), column.element.serialize(value)]\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tDbExecuteSequence(tx2, stmts, nextCallback);\n\t\t});\n\t}\n\t\n\tfunction resolve<Element>(transaction: DbTransaction, table: Table<Element, any, any>, keyValue: KeyType, nextCallback: DbTransactionCallback): void {\n\t\tselectBaseline(transaction, table, keyValue, (tx2: DbTransaction, baseline: BaselineInfo<Element>) => {\n\t\t\tgetChanges(tx2, table, baseline, (tx3: DbTransaction, changes: ChangeTableRow[]) => {\n\t\t\t\tlet deltaResult = applyChanges(baseline, changes, table.spec);\n\t\t\t\tlet promises: Promise<any>[] = [];\n\t\t\t\tif (!deltaResult.isChanged) {\n\t\t\t\t\t// mark it as latest (and others as not)\n\t\t\t\t\tsetLatest(tx3, table, keyValue, baseline.rowid, nextCallback);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// invalidate old latest rows\n\t\t\t\t\t// insert new latest row\n\t\t\t\t\tlet element = update(deltaResult.element, {\n\t\t\t\t\t\t[internal_column_latest]: {$set: true},\n\t\t\t\t\t\t[internal_column_time]: {$set: deltaResult.time},\n\t\t\t\t\t\t[internal_column_composed]: {$set: true},\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tinvalidateLatest(tx3, table, keyValue, (tx4: DbTransaction) => {\n\t\t\t\t\t\tinsertElement(tx4, table, element, nextCallback);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\t\n\tfunction runQuery<Element, Query>(transaction: DbTransaction, table: Table<Element, any, Query>, queryArg: Query | Query[], opts: FindOpts, clazz: new (props: Element) => Element, resultCallback: DbCallback<number | Element[]>): void {\n\t\topts = opts || {};\n\t\n\t\tlet conditionSets: string[][] = [];\n\t\tlet values: (string | number)[] = [];\n\t\tconst queries: Query[] = Array.isArray(queryArg) ? queryArg : [queryArg];\n\n\t\tqueries.forEach(query => {\n\t\t\tlet conditions: string[] = [];\n\t\t\tObject.keys(query).forEach((col: string) => {\n\t\t\t\tverify((col in table.spec.columns) || (col in internalColumn), \"attempting to query based on column '%s' not in schema (%s)\", col, table.spec.columns);\n\t\t\t\tlet column: Column = (col in internalColumn) ? internalColumn[col] : table.spec.columns[col];\n\t\t\t\tlet spec = query[col];\n\t\t\t\tlet found = false;\n\t\t\t\t\n\t\t\t\tswitch (column.type) {\n\t\t\t\tcase ColumnType.int:\n\t\t\t\tcase ColumnType.real:\n\t\t\t\tcase ColumnType.enum:\n\t\t\t\tcase ColumnType.date:\n\t\t\t\tcase ColumnType.datetime:\n\t\t\t\t\tconst comparisons = {\n\t\t\t\t\t\t$gt: \">\",\n\t\t\t\t\t\t$gte: \">=\",\n\t\t\t\t\t\t$lt: \"<\",\n\t\t\t\t\t\t$lte: \"<=\",\n\t\t\t\t\t\t$ne: \"!=\"\n\t\t\t\t\t};\n\t\t\t\t\tfor (let condition in comparisons) {\n\t\t\t\t\t\tif (hasOwnProperty.call(spec, condition)) {\n\t\t\t\t\t\t\tconditions.push(\"(\" + col + comparisons[condition] + \"?)\");\n\t\t\t\t\t\t\tlet value = column.serialize(spec[condition]);\n\t\t\t\t\t\t\tverify(Object(value) !== value, \"condition %s must have a numeric-ish argument; got %s instead\", condition, value);\n\t\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ColumnType.text:\n\t\t\t\t\tconst operations = {\n\t\t\t\t\t\t$like: (value: string) => {\n\t\t\t\t\t\t\tconditions.push(\"(\" + col + \" LIKE ? ESCAPE '\\\\')\");\n\t\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\n\t\t\t\t\t\t$notLike: (value: string) => {\n\t\t\t\t\t\t\tconditions.push(\"(\" + col + \" NOT LIKE ? ESCAPE '\\\\')\");\n\t\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tfor (let condition in operations) {\n\t\t\t\t\t\tif (hasOwnProperty.call(spec, condition)) {\n\t\t\t\t\t\t\toperations[condition](spec[condition]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ColumnType.bool:\n\t\t\t\t\tconditions.push(col + (spec ? \"!=0\" : \"=0\"));\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ColumnType.set:\n\t\t\t\t\tlet existsSetValues = function(setValues: any[], args: (string | number)[]): string {\n\t\t\t\t\t\tlet escapedValues = setValues.map(value => column.element.serialize(value));\n\t\t\t\t\t\targs.push(...escapedValues);\n\t\t\t\t\t\treturn \"EXISTS (\"\n\t\t\t\t\t\t\t+ \"SELECT 1 FROM \" + getSetTableName(table.spec.name, col)\n\t\t\t\t\t\t\t+ \" WHERE value IN (\" + setValues.map(x => \"?\").join(\", \") + \")\"\n\t\t\t\t\t\t\t+ \" AND key=\" + table.spec.name + \".\" + table.key\n\t\t\t\t\t\t\t+ \" AND time=\" + table.spec.name + \".\" + internal_column_time\n\t\t\t\t\t\t\t+ \")\";\n\t\t\t\t\t};\n\n\t\t\t\t\tlet setConditions = {\n\t\t\t\t\t\t$has: (hasValue: any) => {\n\t\t\t\t\t\t\tverify(!Array.isArray(hasValue), \"must not be an array: %s\", hasValue);\n\t\t\t\t\t\t\tlet condition = existsSetValues([hasValue], values);\n\t\t\t\t\t\t\tconditions.push(condition);\n\t\t\t\t\t\t},\n\t\t\t\t\t\t$hasAny: (hasAnyValues: any[]) => {\n\t\t\t\t\t\t\tverify(Array.isArray(hasAnyValues), \"must be an array: %s\", hasAnyValues);\n\t\t\t\t\t\t\tlet condition = existsSetValues(hasAnyValues, values);\n\t\t\t\t\t\t\tconditions.push(condition);\n\t\t\t\t\t\t},\n\t\t\t\t\t\t$hasAll: (hasAllValues: any[]) => {\n\t\t\t\t\t\t\tverify(Array.isArray(hasAllValues), \"must be an array: %s\", hasAllValues);\n\t\t\t\t\t\t\tfor (let hasValue of hasAllValues) {\n\t\t\t\t\t\t\t\tlet condition = existsSetValues([hasValue], values);\n\t\t\t\t\t\t\t\tconditions.push(condition);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tfor (let condition in setConditions) {\n\t\t\t\t\t\tif (hasOwnProperty.call(spec, condition)) {\n\t\t\t\t\t\t\tlet value = spec[condition];\n\t\t\t\t\t\t\tsetConditions[condition](value);\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (!found) {\n\t\t\t\t\tconst inCondition = keyOf({ $in: false });\n\t\t\t\t\tif (hasOwnProperty.call(spec, inCondition)) {\n\t\t\t\t\t\tverify(Array.isArray(spec[inCondition]), \"must be an array: %s\", spec[inCondition]);\n\t\t\t\t\t\tconditions.push(col + \" IN (\" + spec[inCondition].map((x: any) => \"?\").join(\", \") + \")\");\n\t\t\t\t\t\tlet inValues: any[] = spec[inCondition];\n\t\t\t\t\t\tinValues = inValues.map(val => column.serialize(val));\n\t\t\t\t\t\tvalues.push(...inValues);\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!found) {\n\t\t\t\t\t/* istanbul ignore else */\n\t\t\t\t\tif (typeof spec === \"number\" || typeof spec === \"string\") {\n\t\t\t\t\t\tconditions.push(col + \"=?\");\n\t\t\t\t\t\tvalues.push(spec);\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tverify(found, \"unknown query condition for %s: %s\", col, spec);\n\t\t\t});\n\t\t\t\n\t\t\tif (conditions.length) {\n\t\t\t\tconditionSets.push(conditions);\n\t\t\t}\n\t\t});\n\t\n\t\tlet fields: FieldSpec = assign({}, opts.fields || table.spec.columns, {[internal_column_time]: true});\n\t\tlet columns: string[] = selectableColumns(table.spec, fields);\n\t\tlet stmt = \"SELECT \" + (opts.count ? COUNT : columns.map(quote).join(\", \"));\n\t\tstmt += \" FROM \" + table.spec.name;\n\t\tif (conditionSets.length) {\n\t\t\tstmt += \" WHERE \" + conditionSets.map(conditions => \"(\" + conditions.join(\" AND \") + \")\").join(\" OR \");\n\t\t}\n\t\n\t\tif (opts.orderBy) {\n\t\t\tlet col = keyOf(opts.orderBy);\n\t\t\tlet order = opts.orderBy[col];\n\t\t\tstmt += \" ORDER BY \" + col + \" \" + (order == OrderBy.ASC ? \"ASC\" : \"DESC\");\n\t\t}\n\t\n\t\tif (opts.limit) {\n\t\t\tstmt += \" LIMIT \" + opts.limit;\n\t\t}\n\t\n\t\tif (opts.offset) {\n\t\t\tstmt += \" OFFSET \" + opts.offset;\n\t\t}\n\t\n\t\ttransaction.executeSql(stmt, values, (tx2: DbTransaction, rows: any[]) => {\n\t\t\tif (opts.count) {\n\t\t\t\tlet count = parseInt(rows[0][COUNT], 10);\n\t\t\t\tresultCallback(transaction, count);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tloadAllExternals(transaction, rows, table, opts.fields, (tx3: DbTransaction) => {\n\t\t\t\t\tlet results: Element[] = [];\n\t\t\t\t\tfor (let i = 0; i < rows.length; i++) {\n\t\t\t\t\t\tlet row = deserializeRow<Element>(table.spec, rows[i]);\n\t\t\t\t\t\tfor (let col in internalColumn) {\n\t\t\t\t\t\t\tif (!opts.fields || !(col in opts.fields)) {\n\t\t\t\t\t\t\t\tdelete row[col];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet obj = clazz ? new clazz(row) : row;\n\t\t\t\t\t\tresults.push(obj);\n\t\t\t\t\t}\n\t\t\t\t\tresultCallback(tx3, results);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\t\n\tfunction popValue<Element>(element: Element, field: string) {\n\t\tlet ret = verifyGetValue(element, field);\n\t\tdelete element[field];\n\t\treturn ret;\n\t}\n\t\n\tfunction selectBaseline<Element, Query>(transaction: DbTransaction, table: Table<Element, any, any>, keyValue: KeyType, resultCallback: DbCallback<BaselineInfo<Element>>): void {\n\t\tlet fieldSpec = <FieldSpec>{\n\t\t\t[ROWID]: true,\n\t\t\t[internal_column_time]: true,\n\t\t\t[internal_column_deleted]: true,\n\t\t};\n\t\tObject.keys(table.spec.columns).forEach(col => fieldSpec[col] = true);\n\t\n\t\tlet query = <Query>{\n\t\t\t[table.key]: keyValue,\n\t\t\t[internal_column_composed]: false\n\t\t};\n\t\n\t\tlet opts = <FindOpts>{\n\t\t\tfields: fieldSpec,\n\t\t\torderBy: { [internal_column_time]: OrderBy.DESC },\n\t\t\tlimit: 1\n\t\t};\n\t\n\t\trunQuery(transaction, table, query, opts, null, (tx2: DbTransaction, baselineResults: any[]) => {\n\t\t\tlet baseline: BaselineInfo<Element> = {\n\t\t\t\telement: <Element>{},\n\t\t\t\ttime: 0,\n\t\t\t\trowid: -1\n\t\t\t};\n\t\t\tif (baselineResults.length) {\n\t\t\t\tlet element = <Element>baselineResults[0];\n\t\t\t\tbaseline.element = element;\n\t\t\t\tbaseline.time = popValue(element, internal_column_time);\n\t\t\t\tbaseline.rowid = popValue(element, ROWID);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbaseline.element[table.key] = keyValue;\n\t\t\t}\n\t\t\tresultCallback(tx2, baseline);\n\t\t});\n\t}\n\t\n\tfunction loadAllExternals<Element>(transaction: DbTransaction, elements: Element[], table: Table<Element, any, any>, fields: FieldSpec, nextCallback: DbTransactionCallback) {\n\t\tlet i = 0;\n\t\tlet loadNextElement = (tx2: DbTransaction) => {\n\t\t\tif (i < elements.length) {\n\t\t\t\tlet element = elements[i];\n\t\t\t\ti++;\n\t\t\t\tloadExternals(tx2, table, element, fields, loadNextElement);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnextCallback(tx2);\n\t\t\t}\n\t\t};\n\t\t\n\t\tloadNextElement(transaction);\n\t};\n\t\n\tfunction loadExternals<Element>(transaction: DbTransaction, table: Table<Element, any, any>, element: any, fields: FieldSpec, nextCallback: DbTransactionCallback) {\n\t\tlet cols: string[] = Object.keys(table.spec.columns).filter(col => !fields || (col in fields && fields[col]));\n\t\tlet i = 0;\n\t\tlet loadNextField = (tx2: DbTransaction) => {\n\t\t\tif (i < cols.length) {\n\t\t\t\tlet col: string = cols[i];\n\t\t\t\ti++;\n\t\t\t\tlet column = table.spec.columns[col];\n\t\t\t\tif (column.type == ColumnType.set) {\n\t\t\t\t\tlet set: Set<any> = element[col] = element[col] || new Set<any>();\n\t\t\t\t\tlet keyValue = verifyGetValue(element, table.key);\n\t\t\t\t\tlet time = verifyGetValue(element, internal_column_time);\n\t\t\t\t\tlet p = tx2.executeSql(\n\t\t\t\t\t\t\"SELECT value \"\n\t\t\t\t\t\t+ \"FROM \" + getSetTableName(table.spec.name, col)\n\t\t\t\t\t\t+ \" WHERE key=?\"\n\t\t\t\t\t\t+ \" AND time=?\",\n\t\t\t\t\t\t[keyValue, time],\n\t\t\t\t\t\t(tx: DbTransaction, results: SetTableRow[]) => {\n\t\t\t\t\t\t\tfor (let row of results) {\n\t\t\t\t\t\t\t\tset.add(column.element.deserialize(row.value));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tloadNextField(tx2);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tloadNextField(tx2);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnextCallback(tx2);\n\t\t\t}\n\t\t};\n\t\tloadNextField(transaction);\n\t}\n\t\n\tfunction getChanges<Element>(transaction: DbTransaction, table: Table<Element, any, any>, baseline: BaselineInfo<Element>, resultCallback: DbCallback<ChangeTableRow[]>): void {\n\t\tlet keyValue = verifyGetValue(baseline.element, table.key);\n\t\ttransaction.executeSql(\n\t\t\t\"SELECT key, time, change\"\n\t\t\t+ \" FROM \" + getChangeTableName(table.spec.name)\n\t\t\t+ \" WHERE key=? AND time>=?\"\n\t\t\t+ \" ORDER BY time ASC\",\n\t\t\t[keyValue, baseline.time],\n\t\t\tresultCallback);\n\t}\n\t\n\tinterface DeltaResult<Element> {\n\t\telement: Element;\n\t\ttime: number;\n\t\tisChanged: boolean;\n\t}\n\t\n\tfunction applyChanges<Element, Delta>(baseline: BaselineInfo<Element>, changes: ChangeTableRow[], spec: TableSpecAny): DeltaResult<Element> {\n\t\tlet element: Element = baseline.element;\n\t\tlet time = baseline.time;\n\t\tfor (let i = 0; i < changes.length; i++) {\n\t\t\tlet row = changes[i];\n\t\t\tlet delta = <Delta>deserializeDelta(row.change, spec);\n\t\t\telement = update(element, delta);\n\t\t\ttime = Math.max(time, row.time);\n\t\t}\n\t\tlet isChanged = (baseline.element !== element) || baseline.rowid == -1;\n\t\treturn { element, time, isChanged };\n\t}\n\t\n\tfunction setLatest<Element>(transaction: DbTransaction, table: Table<Element, any, any>, keyValue: KeyType, rowid: number, nextCallback: DbTransactionCallback): void {\n\t\ttransaction.executeSql(\n\t\t\t\"UPDATE \" + table.spec.name\n\t\t\t+ \" SET \" + internal_column_latest + \"=(\" + ROWID + \"=\" + rowid + \")\"\n\t\t\t+ \" WHERE \" + table.key + \"=?\",\n\t\t\t[keyValue],\n\t\t\tnextCallback);\n\t}\n\t\n\tfunction invalidateLatest<Element>(transaction: DbTransaction, table: Table<Element, any, any>, keyValue: KeyType, nextCallback: DbTransactionCallback): void {\n\t\ttransaction.executeSql(\n\t\t\t\"UPDATE \" + table.spec.name\n\t\t\t+ \" SET \" + internal_column_latest + \"=0\"\n\t\t\t+ \" WHERE \" + table.key + \"=?\",\n\t\t\t[keyValue],\n\t\t\tnextCallback);\n\t}\n\t\n\tfunction selectableColumns(spec: TableSpecAny, cols: { [key: string]: any }): string[] {\n\t\treturn Object.keys(cols).filter(col => (col == ROWID) || (col in internalColumn) || ((col in spec.columns) && (spec.columns[col].type != ColumnType.set)));\n\t}\n\t\n\tfunction serializeValue(spec: TableSpecAny, col: string, value: any): Serializable {\n\t\tif (col in spec.columns) {\n\t\t\tlet x = spec.columns[col].serialize(value);\n\t\t\treturn x;\n\t\t}\n\t\treturn value;\n\t}\n\t\n\tfunction deserializeValue(spec: TableSpecAny, col: string, value: any) {\n\t\tif (col in spec.columns) {\n\t\t\tvalue = spec.columns[col].deserialize(value);\n\t\t}\n\t\treturn value;\n\t}\n\t\n\tlet setKey = keyOf({ $set: false });\n\tfunction serializeDelta<Delta>(change: Delta, spec: TableSpec<any, Delta, any>): string {\n\t\tfor (let col in change) {\n\t\t\tlet val = change[col];\n\t\t\tif (hasOwnProperty.call(val, setKey)) {\n\t\t\t\tchange[col] = shallowCopy(change[col]);\n\t\t\t\tchange[col][setKey] = serializeValue(spec, col, change[col][setKey]);\n\t\t\t}\n\t\t}\n\t\treturn toText(change);\n\t}\n\t\n\tfunction deserializeDelta<Delta>(text: string, spec: TableSpec<any, Delta, any>): Delta {\n\t\tlet delta = fromText(text);\n\t\tfor (let col in delta) {\n\t\t\tlet val = delta[col];\n\t\t\tif (hasOwnProperty.call(val, setKey)) {\n\t\t\t\tdelta[col][setKey] = deserializeValue(spec, col, delta[col][setKey]);\n\t\t\t}\n\t\t}\n\t\treturn delta;\n\t}\n\t\n\tfunction deserializeRow<T>(spec: TableSpecAny, row: any[]): T {\n\t\tlet ret: T = <any>{};\n\t\tfor (let col in row) {\n\t\t\tlet src = row[col];\n\t\t\tif (src != null) {\n\t\t\t\tret[col] = deserializeValue(spec, col, src);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\t\n\tfunction isEmpty(obj: any): boolean {\n\t\tfor (let field in obj) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\t\n\texport function createStore(params: CreateStoreParams): Store {\n\t\treturn new Store(params);\n\t}\n\t\n\t/* istanbul ignore next */\n\texport function makeCreate<Element>(table: Updraft.Table<Element, any, any>, time: number) {\n\t\treturn (create: Element): Updraft.TableChange<Element, any> => ({\n\t\t\ttable,\n\t\t\ttime,\n\t\t\tcreate\n\t\t});\n\t}\n\n\t/* istanbul ignore next */\n\texport function makeUpdate<Delta>(table: Updraft.Table<any, Delta, any>, time: number) {\n\t\treturn (update: Delta): Updraft.TableChange<Element, any> => ({\n\t\t\ttable,\n\t\t\ttime,\n\t\t\tupdate\n\t\t});\n\t}\n\n\t/* istanbul ignore next */\n\texport function makeDelete(table: Updraft.TableAny, time: number) {\n\t\treturn (id: KeyType): Updraft.TableChange<any, any> => ({\n\t\t\ttable,\n\t\t\ttime,\n\t\t\tdelete: id\n\t\t});\n\t}\n\n}\n","///<reference path=\"./Store.ts\"/>\n\n/* istanbul ignore else */\nif (typeof module !== \"undefined\") {\n\tmodule.exports = Updraft;\n}\n","\nnamespace Updraft.Query {\n\texport interface Comparisons<T> {\n\t\t$gt?: T;\n\t\t$gte?: T;\n\t\t$lt?: T;\n\t\t$lte?: T;\n\t\t$ne?: T;\n\t}\n\t\n\texport interface SetHasCondition<T> {\n\t\t$has: T;\n\t}\n\n\texport interface SetHasAnyCondition<T> {\n\t\t$hasAny: T[];\n\t}\n\n\texport interface SetHasAllConditions<T> {\n\t\t$hasAll: T[];\n\t}\n\t\n\texport interface InCondition<T> {\n\t\t$in: T[];\n\t}\n\t\n\texport interface LikeCondition {\n\t\t$like: string;\n\t}\n\n\texport interface NotLikeCondition {\n\t\t$notLike: string;\n\t}\n\t\n\texport type primitive<T> = T | InCondition<T>;\n\n\texport type none = void;\n\texport type bool = boolean;\n\texport type num = primitive<number> | Comparisons<number>;\n\texport type str = primitive<string> | LikeCondition | NotLikeCondition;\n\texport type date = primitive<Date> | Comparisons<Date>;\n\texport type enm<T> = primitive<T>;\n\texport type set<T> = SetHasCondition<T> | SetHasAnyCondition<T> | SetHasAllConditions<T>;\n\texport type strSet = set<string>;\n\t\n\t/* istanbul ignore next */\n\texport function escape(str: string): string {\n\t\treturn str.replace(/%/g, \"\\\\%\").replace(/_/g, \"\\\\_\");\n\t}\n}\n","///<reference path=\"../typings/index.d.ts\"/>\n///<reference path=\"./Database.ts\"/>\n\nnamespace Updraft {\n\t// compatible with sqlite3\n\texport interface IDatabase {\n\t\trun(sql: string, callback?: (err: Error) => void): IDatabase;\n\t\tall(sql: string, params?: any[], callback?: (err: Error, rows: any[]) => void): IDatabase;\n\t\teach(sql: string, params?: any[], callback?: (err: Error, row: any) => void, complete?: (err: Error, count: number) => void): IDatabase;\n\t\tserialize(callback?: () => void): void;\n\t\tparallelize(callback?: () => void): void;\n\t\t//wait(callback?: () => void): void;\n\t}\n\t\n\tinterface SQLiteTransaction extends DbTransaction {\n\t\terrorCallback: DbErrorCallback;\n\t}\n\t\n\t\n\tclass SQLiteWrapper implements DbWrapper {\n\t\tprivate db: IDatabase;\n\t\ttraceCallback: (trace: string) => any;\n\n\t\tconstructor(db: IDatabase, traceCallback?: (trace: string) => any) {\n\t\t\tthis.db = db;\n\t\t\tthis.traceCallback = traceCallback;\n\t\t}\n\t\t\t\n\t\ttrace(sql: string, params?: (string | number)[]) {\n\t\t\tif (this.traceCallback) {\n\t\t\t\tlet escapedString = this.stringify(sql, params);\n\t\t\t\tthis.traceCallback(escapedString);\n\t\t\t}\n\t\t}\n\t\t\n\t\tstringify(sql: string, params?: (string | number)[]): string {\n\t\t\tlet idx: number = 0;\n\t\t\tlet escapedString = sql.replace(/\\?/g, () => {\n\t\t\t\tlet x = params[idx++];\n\t\t\t\tif (typeof x == \"number\") {\n\t\t\t\t\treturn <string>x;\n\t\t\t\t} else {\n\t\t\t\t\treturn \"'\" + x + \"'\";\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn escapedString;\n\t\t}\n\n\t\trun(sql: string, callback: () => void): void {\n\t\t\tthis.trace(sql);\n\t\t\tthis.db.run(sql, (err: Error) => {\n\t\t\t\t/* istanbul ignore if */\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.log(\"SQLiteWrapper.run(): error executing '\" + sql + \"': \", err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\n\t\texecuteSql(tx: SQLiteTransaction, sql: string, params: (string | number)[], callback: DbResultsCallback): void {\n\t\t\tthis.trace(sql, params);\n\t\t\tthis.db.all(sql, params, (err: Error, rows: any[]) => {\n\t\t\t\t/* istanbul ignore if */\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.log(\"SQLiteWrapper.all(): error executing '\" + sql + \"': \", err);\n\t\t\t\t\tif (tx.errorCallback) {\n\t\t\t\t\t\ttx.errorCallback(err);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow err;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcallback(tx, rows);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\t\n\t\teach(tx: SQLiteTransaction, sql: string, params: (string | number)[], callback: DbEachResultCallback, final: DbTransactionCallback): void {\n\t\t\tthis.trace(sql, params);\n\t\t\tthis.db.each(sql, params, (err: Error, row: any) => {\n\t\t\t\t/* istanbul ignore if */\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.log(\"SQLiteWrapper.each(): error executing '\" + sql + \"': \", err);\n\t\t\t\t\tif (tx.errorCallback) {\n\t\t\t\t\t\ttx.errorCallback(err);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow err;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcallback(tx, row);\n\t\t\t\t}\n\t\t\t},\n\t\t\t(err: Error, count: number) => {\n\t\t\t\t/* istanbul ignore if */\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.log(\"SQLiteWrapper.each(): error executing '\" + sql + \"': \", err);\n\t\t\t\t\tif (tx.errorCallback) {\n\t\t\t\t\t\ttx.errorCallback(err);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow err;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfinal(tx);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\ttransaction(callback: DbTransactionCallback, errorCallback: DbErrorCallback): void {\n\t\t\tthis.run(\"BEGIN TRANSACTION\", () => {\n\t\t\t\tlet tx: SQLiteTransaction = {\n\t\t\t\t\terrorCallback: errorCallback,\n\t\t\t\t\texecuteSql: (sql: string, params: (string | number)[], resultsCb: DbResultsCallback): void => {\n\t\t\t\t\t\tthis.executeSql(tx, sql, params, resultsCb);\n\t\t\t\t\t},\n\t\t\t\t\teach: (sql: string, params: (string | number)[], resultsCb: DbEachResultCallback, final: DbTransactionCallback): void => {\n\t\t\t\t\t\tthis.each(tx, sql, params, resultsCb, final);\n\t\t\t\t\t},\n\t\t\t\t\tcommit: (cb: DbCommitCallback) => {\n\t\t\t\t\t\tthis.run(\"COMMIT TRANSACTION\", () => {\n\t\t\t\t\t\t\tcb();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tcallback(tx);\n\t\t\t});\n\t\t}\n\n\t\treadTransaction(callback: DbTransactionCallback, errorCallback: DbErrorCallback): void {\n\t\t\tlet result: any = undefined;\n\t\t\tlet tx: SQLiteTransaction = {\n\t\t\t\terrorCallback: errorCallback,\n\t\t\t\texecuteSql: (sql: string, params: (string | number)[], resultsCb: DbResultsCallback): void => {\n\t\t\t\t\tthis.executeSql(tx, sql, params, resultsCb);\n\t\t\t\t},\n\t\t\t\teach: /* istanbul ignore next */ (sql: string, params: (string | number)[], resultsCb: DbEachResultCallback, final: DbTransactionCallback): void => {\n\t\t\t\t\tthis.each(tx, sql, params, resultsCb, final);\n\t\t\t\t},\n\t\t\t\tcommit: (cb: DbCommitCallback) => {\n\t\t\t\t\tcb();\n\t\t\t\t}\n\t\t\t};\n\t\t\tcallback(tx);\n\t\t}\n\t}\n\t\n\t\n\texport function createSQLiteWrapper(db: IDatabase, traceCallback?: (trace: string) => any): DbWrapper {\n\t\treturn new SQLiteWrapper(db, traceCallback);\n\t}\n}\n","///<reference path=\"../typings/index.d.ts\"/>\n///<reference path=\"./Database.ts\"/>\n\nnamespace Updraft {\n\n\tinterface WebsqlTransaction extends DbTransaction {\n\t\trealTransaction: SQLTransaction;\n\t\terrorCallback: DbErrorCallback;\n\t}\n\t\n\t\n\t/* istanbul ignore next: can't test websql in node */\n\tclass WebsqlWrapper implements DbWrapper {\n\t\tdb: Database;\n\t\ttraceCallback: (trace: string) => any;\n\t\n\t\tconstructor(name: string, version?: string, displayName?: string, estimatedSize?: number, traceCallback?: (trace: string) => any) {\n\t\t\tversion = version || \"1.0\";\n\t\t\tdisplayName = displayName || name;\n\t\t\testimatedSize = estimatedSize || 5 * 1024 * 1024;\n\t\n\t\t\tthis.db = window.openDatabase(name, version, displayName, estimatedSize);\n\t\t\tthis.traceCallback = traceCallback;\n\t\t}\n\t\t\n\t\ttrace(sql: string, params?: (string | number)[]) {\n\t\t\tif (this.traceCallback) {\n\t\t\t\tlet escapedString = this.stringify(sql, params);\n\t\t\t\tthis.traceCallback(escapedString);\n\t\t\t}\n\t\t}\n\t\t\n\t\tstringify(sql: string, params?: (string | number)[]): string {\n\t\t\tlet idx: number = 0;\n\t\t\tlet escapedString = sql.replace(/\\?/g, () => {\n\t\t\t\tlet x = params[idx++];\n\t\t\t\tif (typeof x == \"number\") {\n\t\t\t\t\treturn <string>x;\n\t\t\t\t} else {\n\t\t\t\t\treturn \"'\" + x + \"'\";\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn escapedString;\n\t\t}\n\t\t\n\t\tall(tx: WebsqlTransaction, sql: string, params: (string | number)[], callback: DbResultsCallback): void {\n\t\t\tthis.trace(sql, params);\n\t\t\ttry {\n\t\t\t\ttx.realTransaction.executeSql(sql, params,\n\t\t\t\t\t(transaction: SQLTransaction, resultSet: SQLResultSet) => {\n\t\t\t\t\t\tlet results: any[] = [];\n\t\t\t\t\t\tfor (let i = 0; i < resultSet.rows.length; i++) {\n\t\t\t\t\t\t\tlet row = resultSet.rows.item(i);\n\t\t\t\t\t\t\tresults.push(row);\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tcallback(this.wrapTransaction(transaction, tx.errorCallback), results);\n\t\t\t\t\t},\n\t\t\t\t\t(transaction: SQLTransaction, error: SQLError) => {\n\t\t\t\t\t\tconsole.error(\"error executing '\" + this.stringify(sql, params) + \"': \", error);\n\t\t\t\t\t\tif (tx.errorCallback) {\n\t\t\t\t\t\t\ttx.errorCallback(error as any);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t\tcatch (error) {\n\t\t\t\tconsole.error(\"error executing '\" + this.stringify(sql, params) + \"': \", error);\n\t\t\t\tif (tx.errorCallback) {\n\t\t\t\t\ttx.errorCallback(error);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\teach(tx: WebsqlTransaction, sql: string, params: (string | number)[], callback: DbEachResultCallback, final: DbTransactionCallback) {\n\t\t\tthis.trace(sql, params);\n\t\t\ttx.realTransaction.executeSql(sql, params,\n\t\t\t\t(transaction: SQLTransaction, resultSet: SQLResultSet) => {\n\t\t\t\t\tfor (let i = 0; i < resultSet.rows.length; i++) {\n\t\t\t\t\t\tlet row = resultSet.rows.item(i);\n\t\t\t\t\t\tif (callback) {\n\t\t\t\t\t\t\t(function(row: any) {\n\t\t\t\t\t\t\t\tcallback(tx, row);\n\t\t\t\t\t\t\t})(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfinal(this.wrapTransaction(transaction, tx.errorCallback));\n\t\t\t\t},\n\t\t\t\t(transaction: SQLTransaction, error: SQLError) => {\n\t\t\t\t\tconsole.error(\"error executing '\" + this.stringify(sql, params) + \"': \", error);\n\t\t\t\t\tif (tx.errorCallback) {\n\t\t\t\t\t\ttx.errorCallback(error as any);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\n\t\tprivate wrapTransaction(transaction: SQLTransaction, errorCallback: DbErrorCallback): WebsqlTransaction {\n\t\t\tlet tx: WebsqlTransaction = {\n\t\t\t\trealTransaction: transaction,\n\t\t\t\terrorCallback: errorCallback,\n\t\t\t\texecuteSql: (sql: string, params?: (string | number)[], callback?: DbResultsCallback): void => {\n\t\t\t\t\tthis.all(tx, sql, params, callback);\n\t\t\t\t},\n\t\t\t\teach: (sql: string, params: (string | number)[], callback: DbEachResultCallback, final: DbTransactionCallback): void => {\n\t\t\t\t\tthis.each(tx, sql, params, callback, final);\n\t\t\t\t},\n\t\t\t\tcommit: (cb: DbCommitCallback) => {\n\t\t\t\t\tcb();\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn tx;\n\t\t}\n\t\n\t\ttransaction(callback: DbTransactionCallback, errorCallback: DbErrorCallback): void {\n\t\t\tthis.db.transaction((transaction: SQLTransaction) => {\n\t\t\t\tlet tx = this.wrapTransaction(transaction, errorCallback);\n\t\t\t\tcallback(tx);\n\t\t\t});\n\t\t}\n\t\n\t\treadTransaction(callback: DbTransactionCallback, errorCallback: DbErrorCallback): void {\n\t\t\tthis.db.readTransaction((transaction: SQLTransaction) => {\n\t\t\t\tlet tx = this.wrapTransaction(transaction, errorCallback);\n\t\t\t\tcallback(tx);\n\t\t\t});\n\t\t}\n\t}\n\t\n\t/* istanbul ignore next: can't test websql in node */\n\texport function createWebsqlWrapper(name: string, version?: string, displayName?: string, estimatedSize?: number, traceCallback?: (trace: string) => any): DbWrapper {\n\t\treturn new WebsqlWrapper(name, version, displayName, estimatedSize, traceCallback);\n\t}\n}\n"]}