{"version":3,"sources":["../dist/updraft.js"],"names":["Updraft","startsWith","str","val","lastIndexOf","clone","obj","copy","Array","i","len","length","Object","constructor","name","attr","hasOwnProperty","Error","keyOf","Instance","_primaryKey","toString","createClass","proto","descriptor","console","assert","prototype","create","key","value","State","Set","dirtyFcn","this","_dirtyFcn","_states","initFromDb","results","rows","row","item","keys","saved","assign","objects","clear","add","apply","removed","_i","arguments","dirty","self","map","forEach","arg","added","push","remove","which","stateMask","filter","element","index","array","values","getAdded","getRemoved","clearChanges","newValues","Query","model","store","_model","_store","_justCount","_tables","tableName","_columns","_conditions","_order","undefined","_limit","_offset","_asc","_nocase","col","columns","type","all","get","addCondition","conj","op","field","fields","split","f","ref","indexOf","setTable","and","where","or","order","asc","nocase","limit","count","offset","countProp","stmt","join","args","cond","query","execRead","tx","o","constructFromDb","setcols","Promise","s","exec","then","addClassProperty","propMask","prop","defineProperty","configurable","set","_changeMask","ret","own","MakeClassTemplate","templ","renamedColumns","every","old","enumerable","id","indices","keyType","propIdx","isKey","isIndex","_col","JSON","parse","Date","enumClass","_isInDb","props","_changes","changes","_clearChanges","__extends","d","b","__","p","anyFcn","ColumnType","Column","Key","Index","Default","defaultValue","Int","Real","Bool","Text","String","Blob","c","Enum","enum_","DateTime","Ptr","sqlType","StoreOptions","Schema","SchemaTable","KeyValue","_super","call","Store","logSql","tables","kv","addClass","pair","stringify","save","loadKeyValues","vals","purge","opts","db","window","openDatabase","readSchema","schema","fulfill","reject","transaction","promises","table","open","setTables","recreate","temp","concat","syncTables","bind","close","callback","log","executeSql","resolve","error","reportError","reason","readTransaction","rtx","code","SYNTAX_ERR","message","tableFromSql","sql","_indices","_triggers","matches","match","ignore","quotedName","unquotedName","parts","tbl_name","syncTable","createTable","cols","decl","attrs","foreignType","dropTable","createIndices","force","toRemove","drop","addedColumns","addedForeignKey","deletedColumns","copyData","oldName","newName","oldTableColumns","newTableColumns","renameTable","newTableName","columnName","columnDecl","Math","floor","getTime","insertSets","deletions","additions","del","insert","isNotSet","rowsAffected","update","isNotKey","assignments","upsert","changed","module","exports"],"mappings":"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","file":"../dist/updraft.js","sourcesContent":["//import {ClassTemplate} from 'ClassTemplate';\nvar Updraft;\n(function (Updraft) {\n    /**\n     * Instances of this type will have properties for all the columns defined in its {@link ClassTemplate}.\n     *  Do not create objects of type Instance directly; instead create subclassed objects\n     *\n     * @see {@link createClass}\n     * @example\n     * ```\n     *\n     *   // ------ typescript ------\n     *   class Task extends Updraft.Instance {\n     *     constructor() {\n     *       super.apply(this, arguments);\n     *     }\n     *\n     *     public name: string;\n     *     public description: string;\n     *     public done: boolean;\n     *\n     *     static tableName: string = 'tasks';\n     *     static columns: Updraft.ColumnSet = {\n     *       name: Updraft.Column.Text().Key(),\n     *       description: Updraft.Column.Text(),\n     *       done: Updraft.Column.Bool()\n     *     };\n     *   }\n     * ```\n     */\n    var Instance = (function () {\n        function Instance(props) {\n            var o = this;\n            o._changeMask = 0;\n            props = props || {};\n            for (var key in props) {\n                var value = props[key];\n                if (value instanceof Instance) {\n                    value = value._primaryKey();\n                }\n                o[key] = value;\n            }\n        }\n        /**\n         * Return the object's primary key's value\n         *\n         * @returns Value of primary key\n         * @private\n         * @example\n         * ```\n         *\n         *  var x = new Class();\n         *  x.id = 123;\n         *  console.log(x._primaryKey());\n         *  // -> '123'\n         * ```\n         */\n        Instance.prototype._primaryKey = function () {\n            var key = '_' + this._model.key;\n            console.assert(key in this);\n            return this[key];\n        };\n        /**\n         * Get the fields that have been changed since the object was last loaded/saved\n         *\n         * @returns Names of the fields that have changed\n         * @private\n         * @example\n         * ```\n         *\n         *  var x = new Class();\n         *  x.foo = 'bar';\n         *  console.log(x.changes());\n         *  // -> ['foo']\n         * ```\n         */\n        Instance.prototype._changes = function () {\n            var changes = [];\n            var propIdx = 0;\n            for (var col in this._model.columns) {\n                var propMask = (1 << propIdx++);\n                if (this._changeMask & propMask) {\n                    changes.push(col);\n                }\n            }\n            return changes;\n        };\n        /**\n         * Set state to be have no changes\n         * @private\n         */\n        Instance.prototype._clearChanges = function () {\n            this._changeMask = 0;\n            for (var col in this._model.columns) {\n                if (col in this && typeof this[col] !== 'undefined' && typeof this[col]['clearChanges'] === 'function') {\n                    this[col].clearChanges();\n                }\n            }\n        };\n        return Instance;\n    })();\n    Updraft.Instance = Instance;\n})(Updraft || (Updraft = {}));\n/// <reference path=\"./ClassTemplate\" />\nvar Updraft;\n(function (Updraft) {\n    /**\n     * Column types.  Note that these are just column affinities, and technically any value type can be stored in any column type.\n     * see {@link https://www.sqlite.org/datatype3.html}\n     */\n    (function (ColumnType) {\n        ColumnType[ColumnType[\"int\"] = 0] = \"int\";\n        ColumnType[ColumnType[\"real\"] = 1] = \"real\";\n        ColumnType[ColumnType[\"bool\"] = 2] = \"bool\";\n        ColumnType[ColumnType[\"text\"] = 3] = \"text\";\n        ColumnType[ColumnType[\"blob\"] = 4] = \"blob\";\n        ColumnType[ColumnType[\"enum\"] = 5] = \"enum\";\n        ColumnType[ColumnType[\"date\"] = 6] = \"date\";\n        ColumnType[ColumnType[\"datetime\"] = 7] = \"datetime\";\n        ColumnType[ColumnType[\"json\"] = 8] = \"json\";\n        ColumnType[ColumnType[\"ptr\"] = 9] = \"ptr\";\n        ColumnType[ColumnType[\"set\"] = 10] = \"set\";\n    })(Updraft.ColumnType || (Updraft.ColumnType = {}));\n    var ColumnType = Updraft.ColumnType;\n    /**\n     * Column in db.  Use static methods to create columns.\n     */\n    var Column = (function () {\n        function Column(type) {\n            this.type = type;\n        }\n        /**\n         * Column is the primary key.  Only one column can have this set.\n         */\n        Column.prototype.Key = function (value) {\n            if (value === void 0) { value = true; }\n            this.isKey = value;\n            return this;\n        };\n        /**\n         * Create an index for this column for faster queries.\n         */\n        Column.prototype.Index = function (value) {\n            if (value === void 0) { value = true; }\n            this.isIndex = value;\n            return this;\n        };\n        /**\n         * Set a default value for the column\n         */\n        // TODO\n        Column.prototype.Default = function (value) {\n            this.defaultValue = value;\n            return this;\n        };\n        /** create a column with 'INTEGER' affinity */\n        Column.Int = function () {\n            return new Column(0 /* int */);\n        };\n        /** create a column with 'REAL' affinity */\n        Column.Real = function () {\n            return new Column(1 /* real */);\n        };\n        /** create a column with 'BOOL' affinity */\n        Column.Bool = function () {\n            return new Column(2 /* bool */);\n        };\n        /** create a column with 'TEXT' affinity */\n        Column.Text = function () {\n            return new Column(3 /* text */);\n        };\n        /** create a column with 'TEXT' affinity */\n        Column.String = function () {\n            return new Column(3 /* text */);\n        };\n        /** create a column with 'BLOB' affinity */\n        Column.Blob = function () {\n            var c = new Column(4 /* blob */);\n            return c;\n        };\n        /** a javascript object with instance method 'toString' and class method 'get' (e.g. {@link https://github.com/adrai/enum}). */\n        Column.Enum = function (enum_) {\n            var c = new Column(5 /* enum */);\n            c.enum = enum_;\n            return c;\n        };\n        /** a javascript Date objct, stored in db as seconds since Unix epoch (time_t) [note: precision is seconds] */\n        Column.Date = function () {\n            return new Column(6 /* date */);\n        };\n        /** a javascript Date objct, stored in db as seconds since Unix epoch (time_t) [note: precision is seconds] */\n        Column.DateTime = function () {\n            return new Column(7 /* datetime */);\n        };\n        /** object will be serialized & restored as JSON text */\n        Column.JSON = function () {\n            return new Column(8 /* json */);\n        };\n        /** points to an object in another table.  Its affinity will automatically be that table's key's affinity */\n        Column.Ptr = function (ref) {\n            var c = new Column(9 /* ptr */);\n            c.ref = ref;\n            return c;\n        };\n        /** unordered collection */\n        Column.Set = function (ref /*| ColumnType*/) {\n            var c = new Column(10 /* set */);\n            c.ref = ref;\n            return c;\n        };\n        Column.sqlType = function (type) {\n            switch (type) {\n                case 0 /* int */:\n                    return 'INTEGER';\n                case 2 /* bool */:\n                    return 'BOOL';\n                case 1 /* real */:\n                    return 'REAL';\n                case 3 /* text */:\n                case 8 /* json */:\n                case 5 /* enum */:\n                    return 'TEXT';\n                case 4 /* blob */:\n                    return 'BLOB';\n                case 6 /* date */:\n                    return 'DATE';\n                case 7 /* datetime */:\n                    return 'DATETIME';\n                default:\n                    throw new Error(\"unsupported type\");\n            }\n        };\n        return Column;\n    })();\n    Updraft.Column = Column;\n})(Updraft || (Updraft = {}));\nvar Updraft;\n(function (Updraft) {\n    /**\n     * @private\n     */\n    function startsWith(str, val) {\n        return str.lastIndexOf(val, 0) === 0;\n    }\n    Updraft.startsWith = startsWith;\n    /**\n     * @private\n     */\n    function clone(obj) {\n        var copy;\n        // Handle the 3 simple types, and null or undefined\n        if (null === obj || \"object\" !== typeof obj) {\n            return obj;\n        }\n        // Handle Array\n        if (obj instanceof Array) {\n            copy = [];\n            for (var i = 0, len = obj.length; i < len; i++) {\n                copy[i] = clone(obj[i]);\n            }\n            return copy;\n        }\n        // Handle complicated (read: enum) objects\n        if (obj instanceof Object && obj.constructor.name !== \"Object\") {\n            return obj;\n        }\n        // Handle simple Objects\n        if (obj instanceof Object && obj.constructor.name === \"Object\") {\n            copy = {};\n            for (var attr in obj) {\n                if (obj.hasOwnProperty(attr)) {\n                    copy[attr] = clone(obj[attr]);\n                }\n            }\n            return copy;\n        }\n        throw new Error(\"Unable to copy obj! Its type isn't supported.\");\n    }\n    Updraft.clone = clone;\n    /**\n     * @private\n     */\n    function keyOf(obj) {\n        if (obj instanceof Updraft.Instance) {\n            return obj._primaryKey();\n        }\n        if (typeof (obj) === 'object' && typeof (obj.toString) === 'function') {\n            return obj.toString();\n        }\n        return obj;\n    }\n    Updraft.keyOf = keyOf;\n    /**\n     * In non-typescript environments, use this function to derive a class from {@link Instance}\n     * @example\n     * ```\n     *\n     *   function Task() { Updraft.Instance.apply(this, arguments); }\n     *   var Task = Updraft.createClass({\n     *     tableName: 'tasks',\n     *     columns: {\n     *       name: Updraft.Column.Text().Key(),\n     *       description: Updraft.Column.Text(),\n     *       done: Updraft.Column.Bool()\n     *     }\n     *   });\n     * ```\n     */\n    function createClass(proto, descriptor) {\n        console.assert(typeof proto === 'function');\n        console.assert(typeof descriptor === 'object');\n        proto.prototype = Object.create(Updraft.Instance.prototype);\n        proto.prototype.constructor = proto;\n        for (var key in descriptor) {\n            var value = descriptor[key];\n            if (typeof value === 'function') {\n                proto.prototype[key] = value;\n            }\n            else {\n                proto[key] = descriptor[key];\n            }\n        }\n        return proto;\n    }\n    Updraft.createClass = createClass;\n})(Updraft || (Updraft = {}));\n/// <reference path=\"./websql.d.ts\" />\nvar Updraft;\n(function (Updraft) {\n    /**\n     * State that a value can be in\n     * @private\n     * @enum\n     */\n    var State;\n    (function (State) {\n        State[State[\"saved\"] = 1 << 1] = \"saved\";\n        State[State[\"added\"] = 1 << 2] = \"added\";\n        State[State[\"removed\"] = 1 << 3] = \"removed\";\n    })(State || (State = {}));\n    var Set = (function () {\n        /**\n         * @param dirtyFcn - function to call when set's state changes\n         */\n        function Set(dirtyFcn) {\n            this._dirtyFcn = dirtyFcn;\n            this._states = {};\n        }\n        /**\n         * load values from a database; initialize values\n         * @private\n         * @param results - database row\n         */\n        Set.prototype.initFromDb = function (results) {\n            for (var i = 0; i < results.rows.length; i++) {\n                var row = results.rows.item(i);\n                console.assert(Object.keys(row).length === 1);\n                var item = row[Object.keys(row)[0]];\n                this._states[item] = State.saved;\n            }\n        };\n        /**\n         * Set all values from an array.  <tt>Add</tt>s all values, and <tt>remove</tt>s any existing set values that are\n         * not in <tt>arr</tt>\n         * @param objects - array of values to assign.  If values are {@link Instance}s, assign their <tt>_primaryKey()</tt>s instead\n         */\n        Set.prototype.assign = function (objects) {\n            this.clear();\n            this.add.apply(this, objects);\n        };\n        /**\n         * Removes all objects from set\n         */\n        Set.prototype.clear = function () {\n            for (var val in this._states) {\n                this._states[val] = State.removed;\n            }\n        };\n        /**\n         * Adds value(s) to set\n         * @param objects - array of values to assign.  If values are {@link Instance}s, assign their <tt>_primaryKey()</tt>s instead\n         */\n        Set.prototype.add = function () {\n            var objects = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                objects[_i - 0] = arguments[_i];\n            }\n            var dirty = false;\n            var self = this;\n            objects.map(Updraft.keyOf).forEach(function (arg) {\n                console.assert(typeof (arg) !== 'object');\n                if (self._states[arg] !== State.saved) {\n                    self._states[arg] = State.added;\n                    dirty = true;\n                }\n            });\n            if (dirty) {\n                this._dirtyFcn();\n            }\n        };\n        /**\n         * Alias for {@link add}\n         * @param objects - values to add\n         */\n        Set.prototype.push = function () {\n            var objects = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                objects[_i - 0] = arguments[_i];\n            }\n            return this.add.apply(this, objects);\n        };\n        /**\n         * Removes value(s) from set\n         * @param objects - values to remove\n         */\n        Set.prototype.remove = function () {\n            var objects = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                objects[_i - 0] = arguments[_i];\n            }\n            var dirty = false;\n            var self = this;\n            objects.map(Updraft.keyOf).forEach(function (arg) {\n                self._states[arg] = State.removed;\n                dirty = true;\n            });\n            if (dirty) {\n                this._dirtyFcn();\n            }\n        };\n        /**\n         * Gets values from set which match the given <tt>stateMask</tt>\n         * @param stateMask - states of objects to return\n         * @return values that match <tt>stateMask</tt>\n         * @private\n         */\n        Set.prototype.which = function (stateMask) {\n            var self = this;\n            return Object.keys(this._states).filter(function (element, index, array) {\n                return (self._states[element] & stateMask) ? true : false;\n            });\n        };\n        /**\n         * Gets valid (added or saved) values of the set\n         */\n        Set.prototype.values = function () {\n            return this.which(State.saved | State.added);\n        };\n        /**\n         * Gets the values that have been added to the set since it was last saved\n         */\n        Set.prototype.getAdded = function () {\n            return this.which(State.added);\n        };\n        /**\n         * Gets the values that have been removed from the set since it was last saved\n         */\n        Set.prototype.getRemoved = function () {\n            return this.which(State.removed);\n        };\n        /**\n         * Marks the values in the set as saved.  Any objects marked 'remove' will be\n         * expunged from the set.\n         */\n        Set.prototype.clearChanges = function () {\n            var newValues = {};\n            for (var val in this._states) {\n                if (this._states[val] !== State.removed) {\n                    newValues[val] = State.saved;\n                }\n            }\n            this._states = newValues;\n        };\n        return Set;\n    })();\n    Updraft.Set = Set;\n})(Updraft || (Updraft = {}));\n/// <reference path=\"./column.ts\" />\n/// <reference path=\"./util.ts\" />\n/// <reference path=\"./store.ts\" />\n/// <reference path=\"./set.ts\" />\n/// <reference path=\"./query.ts\" />\nvar Updraft;\n(function (Updraft) {\n    /**\n     * Add a get/set property to the class\n     *\n     * @param model - class template\n     * @param proto - function prototype\n     * @param col - the column/field to set the property on\n     * @param propMask - the bits to set on <tt>_changes</tt>\n     * @private\n     */\n    function addClassProperty(model, proto, col, propMask) {\n        var prop = '_' + col;\n        switch (model.columns[col].type) {\n            default:\n                Object.defineProperty(proto, col, {\n                    configurable: true,\n                    get: function () {\n                        return this[prop];\n                    },\n                    set: function (val) {\n                        if (this[prop] !== val) {\n                            this[prop] = val;\n                            this._changeMask |= propMask;\n                        }\n                    }\n                });\n                break;\n            case 9 /* ptr */:\n                Object.defineProperty(proto, col, {\n                    configurable: true,\n                    get: function () {\n                        var ref = this._model.columns[col].ref;\n                        console.assert(ref.get != null);\n                        var ret = {\n                            ref: ref,\n                            own: this,\n                            get: function () {\n                                return this.ref.get(this.own[prop]);\n                            }\n                        };\n                        ret[ref.key] = this[prop];\n                        return ret;\n                    },\n                    set: function (val) {\n                        // allow client to do object.field = otherobject; we'll transform it to object.field = otherobject._primaryKey()\n                        val = Updraft.keyOf(val);\n                        if (this[prop] !== val) {\n                            this[prop] = val;\n                            this._changeMask |= propMask;\n                        }\n                    }\n                });\n                break;\n            case 10 /* set */:\n                Object.defineProperty(proto, col, {\n                    configurable: true,\n                    get: function () {\n                        if (!(prop in this)) {\n                            var o = this;\n                            this[prop] = new Updraft.Set(function () {\n                                o._changeMask |= propMask;\n                            });\n                        }\n                        return this[prop];\n                    },\n                    set: function (val) {\n                        if (!(prop in this)) {\n                            var o = this;\n                            this[prop] = new Updraft.Set(function () {\n                                o._changeMask |= propMask;\n                            });\n                        }\n                        this[prop].assign(val);\n                        this._changeMask |= propMask;\n                    }\n                });\n                break;\n        }\n    }\n    /**\n     * Add properties to a provided {@link Instance} subclass that can be created, saved and retrieved from the db\n     * @private\n     */\n    function MakeClassTemplate(templ, store) {\n        console.assert(store != null);\n        console.assert(templ != null);\n        console.assert(templ.tableName != null);\n        console.assert(templ.tableName[0] !== '_');\n        console.assert(templ.columns != null);\n        console.assert(Object.keys(templ.columns).length < 64);\n        console.assert(!('changes' in templ.columns));\n        console.assert(!('template' in templ.columns));\n        console.assert(!templ.renamedColumns || Object.keys(templ.renamedColumns).every(function (old) {\n            return !(old in templ.columns);\n        }));\n        // instance properties\n        var proto = templ.prototype;\n        Object.defineProperty(proto, '_model', { configurable: true, enumerable: true, value: templ });\n        Object.defineProperty(proto, '_store', { configurable: true, enumerable: true, value: store });\n        // class static methods/properties\n        templ.get = function (id) {\n            return this.all.where(this.key, '=', id).get().then(function (results) {\n                console.assert(results.length < 2);\n                if (results.length === 0) {\n                    return null;\n                }\n                else {\n                    return results[0];\n                }\n            });\n        };\n        Object.defineProperty(templ, 'all', {\n            configurable: true,\n            get: function () {\n                return new Updraft.Query(this, store);\n            }\n        });\n        templ.indices = templ.indices || [];\n        var key = null;\n        var keyType = null;\n        var propIdx = 0;\n        for (var col in templ.columns) {\n            if (templ.columns[col].isKey) {\n                key = col;\n                keyType = templ.columns[col].type;\n            }\n            if (templ.columns[col].isIndex) {\n                templ.indices.push([col]);\n            }\n            var propMask = (1 << propIdx++);\n            addClassProperty(templ, proto, col, propMask);\n            if (propIdx >= 63) {\n                throw new Error(\"class has too many columns- max 63\");\n            }\n        }\n        console.assert(key != null);\n        templ.key = key;\n        templ.keyType = keyType;\n    }\n    Updraft.MakeClassTemplate = MakeClassTemplate;\n    /**\n     * construct object from a database result row\n     *\n     * @return Instance with fields initialized according to row, with _isInDb=true and no changes set\n     * @private\n     */\n    function constructFromDb(model, row) {\n        var o = new model();\n        console.assert(o instanceof Updraft.Instance);\n        for (var col in row) {\n            var val = row[col];\n            var _col = '_' + col;\n            switch (model.columns[col].type) {\n                case 8 /* json */:\n                    o[_col] = JSON.parse(val);\n                    break;\n                case 6 /* date */:\n                case 7 /* datetime */:\n                    o[_col] = new Date(val * 1000);\n                    break;\n                case 5 /* enum */:\n                    var enumClass = o._model.columns[col].enum;\n                    console.assert(enumClass != null);\n                    if (typeof enumClass === 'object' && typeof enumClass.get == 'function') {\n                        o[_col] = enumClass.get(val);\n                    }\n                    else {\n                        console.assert(val in enumClass);\n                        o[_col] = enumClass[val];\n                    }\n                    break;\n                case 10 /* set */:\n                    o[_col].push(val);\n                    break;\n                default:\n                    o[_col] = val;\n                    break;\n            }\n        }\n        o._isInDb = true;\n        console.assert(o._changeMask === 0);\n        return o;\n    }\n    Updraft.constructFromDb = constructFromDb;\n})(Updraft || (Updraft = {}));\n/// <reference path=\"../typings/tsd.d.ts\" />\n/// <reference path=\"./Column.ts\" />\n/// <reference path=\"./util.ts\" />\n/// <reference path=\"./model.ts\" />\n/// <reference path=\"./websql.d.ts\" />\nvar __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar Updraft;\n(function (Updraft) {\n    /**\n     * The parameters used to open a database\n     *\n     * @property name - the name of the database to open\n     */\n    var StoreOptions = (function () {\n        function StoreOptions() {\n        }\n        return StoreOptions;\n    })();\n    Updraft.StoreOptions = StoreOptions;\n    /**\n     * Database schema.  The outer keys will be the tables in the database.  The values will consist of an\n     * object whose keys will be the table's rows and values will be the row's type.  It will also have an\n     * '_indices' object with all the indices found.\n     * Note: tables or indices beginning with underscore or 'sqlite' will be ignored\n     *\n     * @private\n     * @example\n     * ```\n     *\n     *    var schema = {\n     *      'todos': {\n     *        _indices: {\n     *          'index_todos__name': 'CREATE INDEX ...',\n     *        },\n     *        _triggers: {\n     *          'trigger_todos__task': 'CREATE TRIGGER ...',\n     *        },\n     *        'id': 'INTEGER PRIMARY KEY',\n     *        'name': 'TEXT',\n     *      },\n     *      'tasks': {\n     *        'id': 'INTEGER PRIMARY KEY',\n     *        'description': 'TEXT',\n     *      }\n     *    };\n     * ```\n     */\n    var Schema = (function () {\n        function Schema() {\n        }\n        return Schema;\n    })();\n    Updraft.Schema = Schema;\n    /**\n     * @private\n     */\n    var SchemaTable = (function () {\n        function SchemaTable() {\n        }\n        return SchemaTable;\n    })();\n    Updraft.SchemaTable = SchemaTable;\n    /**\n     * Internal class used in key/value storage\n     * @private\n     */\n    var KeyValue = (function (_super) {\n        __extends(KeyValue, _super);\n        function KeyValue(props) {\n            _super.call(this, props);\n        }\n        KeyValue.get = function (id) {\n            return null;\n        };\n        KeyValue.tableName = 'updraft_kv';\n        KeyValue.columns = {\n            key: Updraft.Column.String().Key(),\n            value: Updraft.Column.String(),\n        };\n        return KeyValue;\n    })(Updraft.Instance);\n    /**\n     * @private\n     */\n    function anyFcn(tx, results) {\n    }\n    /**\n     * Interface for creating classes & database interaction\n     */\n    var Store = (function () {\n        function Store() {\n            var self = this;\n            this.logSql = false;\n            self.tables = [];\n            self.kv = {};\n            this.addClass(KeyValue);\n        }\n        /**\n         * create a new type whose instances can be stored in a database\n         * @param templ\n         */\n        Store.prototype.addClass = function (templ) {\n            Updraft.MakeClassTemplate(templ, this);\n            this.tables.push(templ);\n        };\n        /**\n         * set a key/value pair\n         *\n         * @param key\n         * @param value - value will be stored as JSON text, so value can be any object that will\n         *        survive serialization\n         * @return a promise that will resolve once the value is saved.  Key/values are cached\n         *         on the <tt>Store</tt>, so you can use the value immediately and don't need to wait for\n         *         the promise to resolve.\n         */\n        Store.prototype.set = function (key, value) {\n            this.kv[key] = value;\n            var pair = new KeyValue({ key: key, value: JSON.stringify(value) });\n            return this.save(pair);\n        };\n        /**\n         * gets a key/value pair.  Values are cached on the <tt>Store</tt> so they are immediately available\n         *\n         * @param key\n         * @return value\n         */\n        Store.prototype.get = function (key) {\n            return this.kv[key];\n        };\n        /**\n         * read the key/value pairs from the database, caching them on the <tt>Store</tt>\n         * @private\n         */\n        Store.prototype.loadKeyValues = function () {\n            var self = this;\n            return KeyValue.all.get().then(function (vals) {\n                for (var i = 0; i < vals.length; i++) {\n                    var val = vals[i];\n                    self.kv[val.key] = JSON.parse(val.value);\n                }\n            });\n        };\n        /**\n         * Delete all tables in database.  For development purposes; you probably don't want to ship with this.\n         *\n         * @param opts\n         * @return a promise that resolves when all tables are deleted\n         * @see {@link open}\n         * @example\n         * ```\n         *\n         *    store.purge({name: 'my cool db'}).then(function() {\n         *      // everything is gone\n         *    });\n         * ```\n         */\n        Store.prototype.purge = function (opts) {\n            console.assert(!this.db);\n            this.db = window.openDatabase(opts.name, '1.0', 'updraft created database', 5 * 1024 * 1024);\n            console.assert(this.db != null);\n            var self = this;\n            console.assert(this instanceof Store);\n            return self.readSchema().then(function (schema) {\n                return new Promise(function (fulfill, reject) {\n                    self.db.transaction(function (tx) {\n                        var p = Promise.resolve();\n                        Object.keys(schema).forEach(function (table) {\n                            p = p.then(function () { return self.exec(tx, 'DROP TABLE ' + table); });\n                        });\n                        return p.then(function () {\n                            self.db = null;\n                        }).then(fulfill, reject);\n                    });\n                });\n            });\n        };\n        /**\n         * open the database\n         *\n         * @param opts\n         * @return a promise that resolves with no parameters when the database is created and ready\n         * @example\n         * ```\n         *\n         *    store.open({name: 'my cool db'}).then(function() {\n         *      // start loading & saving objects\n         *    });\n         * ```\n         */\n        Store.prototype.open = function (opts) {\n            this.db = window.openDatabase(opts.name, '1.0', 'updraft created database', 5 * 1024 * 1024);\n            console.assert(this.db != null);\n            // add tables for 'set' columns\n            var setTables = [];\n            for (var i = 0; i < this.tables.length; i++) {\n                var table = this.tables[i];\n                for (var col in table.columns) {\n                    if (table.columns[col].type === 10 /* set */) {\n                        var ref = table.columns[col].ref;\n                        console.assert(ref != null);\n                        var setTable = {\n                            tableName: table.tableName + '_' + col,\n                            recreate: table.recreate,\n                            temp: table.temp,\n                            key: '',\n                            keyType: table.keyType,\n                            columns: {},\n                            indices: [[table.key], [col]],\n                            get: function (id) {\n                                throw new Error(\"not callable\");\n                            }\n                        };\n                        setTable.columns[table.key] = new Updraft.Column(table.keyType), setTable.columns[col] = new Updraft.Column(ref.keyType), table.columns[col].setTable = setTable;\n                        setTables.push(setTable);\n                    }\n                }\n            }\n            this.tables = this.tables.concat(setTables);\n            var self = this;\n            console.assert(this instanceof Store);\n            return self.readSchema().then(self.syncTables.bind(self)).then(self.loadKeyValues.bind(self));\n        };\n        /**\n         * close the database\n         */\n        Store.prototype.close = function () {\n            this.db = null;\n            this.constructor();\n        };\n        /**\n         * exec a sql statement within a given transaction\n         *\n         * @param tx - a transaction created by <tt>db.transaction</tt> or <tt>db.readTransaction</tt>\n         * @param stmt - sql statement to execute\n         * @param args - array of strings to substitute into <tt>stmt</tt>\n         * @param callback - callback with parameters (transaction, [SQLResultSet]{@link http://www.w3.org/TR/webdatabase/#sqlresultset})\n         * @return a promise that resolves with (transaction, return value of the callback)\n         * @private\n         */\n        Store.prototype.exec = function (tx, stmt, args, callback) {\n            if (callback === void 0) { callback = anyFcn; }\n            if (this.logSql) {\n                console.log(stmt, args);\n            }\n            var self = this;\n            return new Promise(function (fulfill, reject) {\n                try {\n                    tx.executeSql(stmt, args, function (tx, results) {\n                        var ret = callback ? callback(tx, results) : null;\n                        return Promise.resolve(ret).then(fulfill, reject);\n                    }, function (tx, error) {\n                        self.reportError(error);\n                        reject(error);\n                        return false;\n                    });\n                }\n                catch (reason) {\n                    console.log('Failed to exec \"' + stmt + '\":' + reason);\n                    throw reason;\n                }\n            });\n        };\n        /**\n         * exec a sql statement within a new read transaction\n         *\n         * @param stmt - sql statement to execute\n         * @param args - array of strings to substitute into <tt>stmt</tt>\n         * @param callback - callback with parameters (transaction, [SQLResultSet]{@link http://www.w3.org/TR/webdatabase/#sqlresultset})\n         * @return a promise that resolves with (transaction, return value of the callback)\n         * @private\n         */\n        Store.prototype.execRead = function (stmt, args, callback) {\n            var self = this;\n            console.assert(self.db != null);\n            return new Promise(function (fulfill, reject) {\n                self.db.readTransaction(function (rtx) {\n                    return self.exec(rtx, stmt, args, callback).then(fulfill, reject);\n                });\n            });\n        };\n        Store.prototype.reportError = function (error) {\n            switch (error.code) {\n                case error.SYNTAX_ERR:\n                    console.log(\"Syntax error: \" + error.message);\n                    break;\n                default:\n                    console.log(error);\n            }\n        };\n        /**\n         * get the existing database's schema in object form\n         *\n         * @return a promise that resolves with the {@link Schema}\n         */\n        Store.prototype.readSchema = function () {\n            function tableFromSql(sql) {\n                var table = { _indices: {}, _triggers: {} };\n                var matches = sql.match(/\\((.*)\\)/);\n                if (matches) {\n                    var fields = matches[1].split(',');\n                    for (var i = 0; i < fields.length; i++) {\n                        var ignore = /^\\s*(primary|foreign)\\s+key/i; // ignore standalone 'PRIMARY KEY xxx'\n                        if (fields[i].match(ignore)) {\n                            continue;\n                        }\n                        var quotedName = /\"(.+)\"\\s+(.*)/;\n                        var unquotedName = /(\\w+)\\s+(.*)/;\n                        var parts = fields[i].match(quotedName);\n                        if (!parts) {\n                            parts = fields[i].match(unquotedName);\n                        }\n                        if (parts) {\n                            table[parts[1]] = parts[2];\n                        }\n                    }\n                }\n                return table;\n            }\n            return this.execRead('SELECT name, tbl_name, type, sql FROM sqlite_master', [], function (tx, results) {\n                /*jshint camelcase:false*/\n                var schema = {};\n                for (var i = 0; i < results.rows.length; i++) {\n                    var row = results.rows.item(i);\n                    if (row.name[0] != '_' && !Updraft.startsWith(row.name, 'sqlite')) {\n                        switch (row.type) {\n                            case 'table':\n                                schema[row.name] = tableFromSql(row.sql);\n                                break;\n                            case 'index':\n                                schema[row.tbl_name]._indices = schema[row.tbl_name]._indices || {};\n                                schema[row.tbl_name]._indices[row.name] = row.sql;\n                                break;\n                            case 'trigger':\n                                schema[row.tbl_name]._triggers = schema[row.tbl_name]._triggers || {};\n                                schema[row.tbl_name]._triggers[row.name] = row.sql;\n                                break;\n                        }\n                    }\n                }\n                return schema;\n            });\n        };\n        /**\n         * Check whether the tables in the current database match up with the ClassFactories.\n         * They will be created or modified as needed.\n         *\n         * @param schema\n         * @return A promise that resolves with no parameters once all tables are up-to-date.\n         * @private\n         */\n        Store.prototype.syncTables = function (schema) {\n            var self = this;\n            console.assert(self.db != null);\n            return new Promise(function (fulfill, reject) {\n                self.db.transaction(function (tx) {\n                    return Promise.all(self.tables.map(function (f) {\n                        return self.syncTable(tx, schema, f);\n                    })).then(fulfill, reject);\n                });\n            });\n        };\n        /**\n         * Check whether an individual table in the current database matches up with its corresponding ClassTemplate.\n         * It will be created or modified as needed.\n         *\n         * @param tx - a writeable transaction\n         * @param schema\n         * @param f\n         * @return A promise that resolves with no parameters once the table is up-to-date.\n         * @private\n         */\n        Store.prototype.syncTable = function (tx, schema, f) {\n            var self = this;\n            // execute CREATE TABLE statement\n            function createTable(name) {\n                var cols = [];\n                for (var col in f.columns) {\n                    var attrs = f.columns[col];\n                    var decl;\n                    switch (attrs.type) {\n                        case 9 /* ptr */:\n                            console.assert(attrs.ref != null);\n                            console.assert(attrs.ref.columns != null);\n                            console.assert(attrs.ref.tableName != null);\n                            console.assert(attrs.ref.key != null);\n                            var foreignType = attrs.ref.columns[attrs.ref.key].type;\n                            decl = col + ' ' + Updraft.Column.sqlType(foreignType);\n                            cols.push(decl);\n                            break;\n                        case 10 /* set */:\n                            break;\n                        default:\n                            decl = col + ' ' + Updraft.Column.sqlType(attrs.type);\n                            if (f.key === col) {\n                                decl += ' PRIMARY KEY';\n                            }\n                            cols.push(decl);\n                    }\n                }\n                return self.exec(tx, 'CREATE ' + (f.temp ? 'TEMP ' : '') + 'TABLE ' + name + ' (' + cols.join(', ') + ')');\n            }\n            function dropTable(name) {\n                return self.exec(tx, 'DROP TABLE ' + name);\n            }\n            function createIndices(force) {\n                if (force === void 0) { force = false; }\n                var p = Promise.resolve();\n                var toRemove = (f.tableName in schema) ? Updraft.clone(schema[f.tableName]._indices) : {};\n                f.indices.forEach(function (index) {\n                    var name = 'index_' + f.tableName + '__' + index.join('_');\n                    var sql = 'CREATE INDEX ' + name + ' ON ' + f.tableName + ' (' + index.join(', ') + ')';\n                    delete toRemove[name];\n                    var create = true;\n                    var drop = false;\n                    if (schema[f.tableName] && schema[f.tableName]._indices && schema[f.tableName]._indices[name]) {\n                        if (schema[f.tableName]._indices[name] === sql) {\n                            create = false;\n                        }\n                        else {\n                            drop = true;\n                        }\n                    }\n                    if (drop) {\n                        p = p.then(function () { return self.exec(tx, 'DROP INDEX ' + name); });\n                    }\n                    if (create || force) {\n                        p = p.then(function () { return self.exec(tx, sql); });\n                    }\n                });\n                // delete orphaned indices\n                Object.keys(toRemove).forEach(function (name) {\n                    p = p.then(function () { return self.exec(tx, 'DROP INDEX ' + name); });\n                });\n                return p;\n            }\n            // check if table already exists\n            if (f.tableName in schema) {\n                if (f.recreate) {\n                    return Promise.resolve().then(function () { return dropTable(f.tableName); }).then(function () { return createTable(f.tableName); }).then(function () { return createIndices(true); });\n                }\n                else {\n                    //console.log(\"table \" + f.tableName + \" exists; checking columns\");\n                    var columns = Updraft.clone(schema[f.tableName]);\n                    delete columns._indices;\n                    delete columns._triggers;\n                    var key;\n                    var addedColumns = [];\n                    var addedForeignKey = false;\n                    for (key in f.columns) {\n                        if (!(key in columns)) {\n                            addedColumns.push(key);\n                            if (f.columns[key].ref) {\n                                addedForeignKey = true;\n                            }\n                        }\n                    }\n                    var renamedColumns = Updraft.clone(f.renamedColumns) || {};\n                    for (key in Object.keys(renamedColumns)) {\n                        if (!(key in columns)) {\n                            delete renamedColumns[key];\n                        }\n                    }\n                    var deletedColumns = Object.keys(columns).filter(function (col) {\n                        return !(col in f.columns);\n                    });\n                    if (addedForeignKey || Object.keys(renamedColumns).length > 0 || deletedColumns.length > 0) {\n                        // must recreate table and migrate data\n                        var copyData = function (oldName, newName) {\n                            var oldTableColumns = Object.keys(columns).filter(function (col) {\n                                return (col in f.columns) || (col in renamedColumns);\n                            });\n                            var newTableColumns = oldTableColumns.map(function (col) {\n                                return (col in renamedColumns) ? renamedColumns[col] : col;\n                            });\n                            if (oldTableColumns.length && newTableColumns.length) {\n                                var stmt = \"INSERT INTO \" + newName + \" (\" + newTableColumns.join(\", \") + \") \";\n                                stmt += \"SELECT \" + oldTableColumns.join(\", \") + \" FROM \" + oldName + \";\";\n                                return self.exec(tx, stmt);\n                            }\n                        };\n                        var renameTable = function (oldName, newName) {\n                            return self.exec(tx, 'ALTER TABLE ' + oldName + ' RENAME TO ' + newName);\n                        };\n                        var newTableName = 'new_' + f.tableName;\n                        console.assert(!(newTableName in schema));\n                        return Promise.resolve().then(function () { return createTable(newTableName); }).then(function () { return copyData(f.tableName, newTableName); }).then(function () { return dropTable(f.tableName); }).then(function () { return renameTable(newTableName, f.tableName); }).then(function () { return createIndices(true); });\n                    }\n                    else if (addedColumns.length > 0) {\n                        // alter table, add columns\n                        var p = Promise.resolve();\n                        addedColumns.map(function (columnName) {\n                            var attrs = f.columns[columnName];\n                            var columnDecl = columnName + ' ' + Updraft.Column.sqlType(attrs.type);\n                            p = p.then(function () { return self.exec(tx, 'ALTER TABLE ' + f.tableName + ' ADD COLUMN ' + columnDecl); });\n                        });\n                        return p.then(function () { return createIndices(); });\n                    }\n                    else {\n                        // no table modification is required\n                        return createIndices();\n                    }\n                }\n            }\n            else {\n                //console.log('creating table: ' + f.tableName);\n                return Promise.resolve().then(function () { return createTable(f.tableName); }).then(function () { return createIndices(true); });\n            }\n        };\n        /**\n         * Save all objects to database.  Atomic operation- all objects will be saved within the same transaction\n         * or nothing will be written.  Objects can be heterogeneous.\n         *\n         * @param objects - objects to save\n         */\n        Store.prototype.save = function () {\n            var objects = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                objects[_i - 0] = arguments[_i];\n            }\n            objects.map(function (o) {\n                console.assert(('_' + o._model.key) in o, \"object must have a key\");\n            });\n            var self = this;\n            return new Promise(function (resolve, reject) {\n                self.db.transaction(function (tx) {\n                    function value(o, col) {\n                        var val = o['_' + col];\n                        switch (o._model.columns[col].type) {\n                            case 6 /* date */:\n                            case 7 /* datetime */:\n                                if (typeof val !== 'undefined') {\n                                    console.assert(val instanceof Date);\n                                    val = Math.floor(val.getTime() / 1000);\n                                }\n                                break;\n                            case 8 /* json */:\n                                val = JSON.stringify(val);\n                                break;\n                            case 5 /* enum */:\n                                console.assert(o._model.columns[col].enum != null);\n                                val = val.toString();\n                                break;\n                            default:\n                                console.assert(typeof val !== 'object');\n                                break;\n                        }\n                        return val;\n                    }\n                    function insertSets(o, force) {\n                        var changes = o._changes();\n                        var f = o._model;\n                        var promises = [];\n                        Object.keys(f.columns).filter(function (col) {\n                            return (f.columns[col].type === 10 /* set */) && (force || changes.indexOf(col) > -1);\n                        }).forEach(function (col) {\n                            var ref = f.columns[col].ref;\n                            var setTable = f.columns[col].setTable;\n                            console.assert(ref != null);\n                            console.assert(setTable != null);\n                            var set = o['_' + col];\n                            if (set) {\n                                var key = o._primaryKey();\n                                var deletions = set.getRemoved();\n                                var additions = set.getAdded();\n                                deletions.forEach(function (del) {\n                                    promises.push(self.exec(tx, 'DELETE FROM ' + setTable.tableName + ' WHERE ' + f.key + '=? AND ' + col + '=?', [key, del]));\n                                });\n                                additions.forEach(function (add) {\n                                    promises.push(self.exec(tx, 'INSERT INTO ' + setTable.tableName + ' (' + f.key + ', ' + col + ') VALUES (?, ?)', [key, add]));\n                                });\n                            }\n                        });\n                        return Promise.all(promises).then(function () { return true; });\n                    }\n                    function insert(o, callback) {\n                        if (callback === void 0) { callback = null; }\n                        var f = o._model;\n                        var isNotSet = function (col) {\n                            return f.columns[col].type !== 10 /* set */;\n                        };\n                        var cols = Object.keys(f.columns).filter(isNotSet);\n                        var columns = cols.join(', ');\n                        var values = cols.map(function () {\n                            return '?';\n                        }).join(', ');\n                        var args = cols.map(function (col) {\n                            return value(o, col);\n                        });\n                        return self.exec(tx, 'INSERT OR IGNORE INTO ' + f.tableName + ' (' + columns + ') VALUES (' + values + ')', args, function (tx, results) {\n                            var changes = results.rowsAffected !== 0;\n                            return callback ? callback(changes) : changes;\n                        });\n                    }\n                    function update(o, callback) {\n                        if (callback === void 0) { callback = null; }\n                        var f = o._model;\n                        var cols = o._changes();\n                        var isNotSet = function (col) {\n                            return f.columns[col].type !== 10 /* set */;\n                        };\n                        var isNotKey = function (col) {\n                            return col !== f.key;\n                        };\n                        var assignments = cols.filter(isNotSet).filter(isNotKey).map(function (col) {\n                            return col + '=?';\n                        }).join(', ');\n                        var values = cols.filter(isNotSet).filter(isNotKey).map(function (col) {\n                            return value(o, col);\n                        });\n                        values.push(o['_' + f.key]); // for WHERE clause\n                        return self.exec(tx, 'UPDATE OR IGNORE ' + f.tableName + ' SET ' + assignments + ' WHERE ' + f.key + '=?', values, function (tx, results) {\n                            var changes = results.rowsAffected !== 0;\n                            return callback ? callback(changes) : changes;\n                        });\n                    }\n                    var upsert = function (o) {\n                        var p;\n                        if (o._isInDb) {\n                            p = update(o, function (changed) {\n                                return changed ? insertSets(o, false) : insert(o);\n                            });\n                        }\n                        else {\n                            p = insert(o, function (changed) {\n                                return changed ? insertSets(o, true) : update(o);\n                            });\n                        }\n                        return p.then(function (changed) {\n                            console.assert(changed);\n                            if (changed) {\n                                o._clearChanges();\n                                o._isInDb = true;\n                            }\n                        });\n                    };\n                    return Promise.all(objects.map(upsert)).then(resolve, reject);\n                });\n            });\n        };\n        return Store;\n    })();\n    Updraft.Store = Store;\n})(Updraft || (Updraft = {}));\n/// <reference path=\"../typings/tsd.d.ts\" />\n/// <reference path=\"./column.ts\" />\n/// <reference path=\"./store.ts\" />\nvar Updraft;\n(function (Updraft) {\n    /**\n     * Do not construct objects of type Query directly- instead, use {@link ClassTemplate}.all\n     * @constructor\n     */\n    var Query = (function () {\n        function Query(model, store) {\n            console.assert(model != null);\n            console.assert(store != null);\n            this._model = model;\n            this._store = store;\n            this._justCount = false;\n            this._tables = [model.tableName];\n            this._columns = [];\n            this._conditions = [];\n            this._order = undefined;\n            this._limit = undefined;\n            this._offset = undefined;\n            this._asc = true;\n            this._nocase = false;\n            for (var col in model.columns) {\n                if (model.columns[col].type !== 10 /* set */) {\n                    this._columns.push(model.tableName + '.' + col);\n                }\n            }\n        }\n        Query.prototype.all = function () {\n            return this.get();\n        };\n        Query.prototype.addCondition = function (conj, col, op, val) {\n            var fields = col.split(/\\./);\n            var field;\n            var f = this._model;\n            val = Updraft.keyOf(val);\n            for (var i = 0; i < fields.length - 1; i++) {\n                field = fields[i];\n                console.assert(field in f.columns);\n                var ref = f.columns[field].ref;\n                console.assert(ref != null);\n                if (this._tables.indexOf(ref.tableName) === -1) {\n                    this._tables.push(ref.tableName);\n                    this._conditions.push({\n                        conj: 'AND',\n                        col: f.tableName + '.' + field,\n                        op: '=',\n                        val: ref.tableName + '.' + ref.key\n                    });\n                }\n                f = ref;\n            }\n            field = fields[fields.length - 1];\n            switch (op) {\n                case 'contains':\n                    console.assert(f.columns[field].type === 10 /* set */);\n                    var setTable = f.columns[field].setTable;\n                    console.assert(setTable != null);\n                    if (this._tables.indexOf(setTable.tableName) === -1) {\n                        this._tables.push(setTable.tableName);\n                        this._conditions.push({\n                            conj: 'AND',\n                            col: f.tableName + '.' + f.key,\n                            op: '=',\n                            val: setTable.tableName + '.' + f.key\n                        });\n                    }\n                    this._conditions.push({\n                        conj: conj,\n                        col: setTable.tableName + '.' + field,\n                        op: '=',\n                        val: '?',\n                        arg: val\n                    });\n                    break;\n                default:\n                    console.assert(f.columns[field].type !== 10 /* set */);\n                    this._conditions.push({\n                        conj: conj,\n                        col: f.tableName + '.' + field,\n                        op: op,\n                        val: '?',\n                        arg: val\n                    });\n                    break;\n            }\n            return this;\n        };\n        /**\n         * Adds an 'AND' condition to the query\n         *\n         * @param col - column field to match on\n         * @param op - SQLite binary [operator]{@link https://www.sqlite.org/lang_expr.html}\n         * @param val - value to match against `col`\n         * @see {@link or}\n         * @example\n         * ```\n         *\n         *  return Class.all.where('col2', '>', 10).and('col2', '<', 30).get();\n         *  // -> SELECT ... WHERE col2 > 10 AND col2 < 30\n         * ```\n         */\n        Query.prototype.and = function (col, op, val) {\n            return this.addCondition('AND', col, op, val);\n        };\n        /**\n         * alias for {@link and}\n         *\n         * @example\n         * ```\n         *\n         *  return Class.all.where('col2', '>', 10).get();\n         * ```\n         */\n        Query.prototype.where = function () {\n            return this.and.apply(this, arguments);\n        };\n        /**\n         * Adds an 'OR' condition to the query\n         *\n         * @param col - column field to match on\n         * @param op - SQLite binary [operator]{@link https://www.sqlite.org/lang_expr.html}\n         * @param val - value to match against `col`\n         * @see {@link and}\n         * @example\n         * ```\n         *\n         *  return Class.all.where('col2', '=', 10).or('col2', '=', 30).get();\n         *  // -> SELECT ... WHERE col2 = 10 OR col2 = 30\n         * ```\n         */\n        Query.prototype.or = function (col, op, val) {\n            return this.addCondition('OR', col, op, val);\n        };\n        /**\n         * Sort the results by specified field\n         *\n         * @param col - column to sort by\n         * @param asc - sort ascending (true, default) or descending (false)\n         * @see {@link nocase}\n         * @example\n         * ```\n         *\n         *  return Class.all.order('x').get();\n         *  // -> SELECT ... ORDER BY x\n         * ```\n         */\n        Query.prototype.order = function (col, asc) {\n            this._order = this._model.tableName + '.' + col;\n            if (typeof asc !== 'undefined') {\n                this._asc = asc;\n            }\n            return this;\n        };\n        /**\n         * Changes the match collation to be case-insensitive.  Only applies to result sorting, as 'LIKE' is\n         * always case-insensitive\n         *\n         * @see {@link order}\n         * @example\n         * ```\n         *\n         *  return Class.all.order('x').nocase().get();\n         *  // -> SELECT ... ORDER BY x COLLATE NOCASE\n         * ```\n         */\n        Query.prototype.nocase = function () {\n            this._nocase = true;\n            return this;\n        };\n        /**\n         * Limits the result set to a certain number.  Useful in pagination\n         *\n         * @see {@link offset}\n         * @example\n         * ```\n         *\n         *  return Class.all.limit(5).get();\n         *  // -> SELECT ... FROM ... LIMIT 5\n         * ```\n         */\n        Query.prototype.limit = function (count) {\n            this._limit = count;\n            return this;\n        };\n        /**\n         * Skip a number of results.  Useful in pagination\n         *\n         * @see {@link limit}\n         * @example\n         * ```\n         *\n         *  return Class.all.limit(10).offset(50).get();\n         *  // -> SELECT ... FROM ... LIMIT 10 OFFSET 50\n         * ```\n         */\n        Query.prototype.offset = function (count) {\n            this._offset = count;\n            return this;\n        };\n        /**\n         * Executes the query, returning a promise resolving with the count of objects that match\n         *\n         * @see {@link get}\n         * @example\n         * ```\n         *\n         *  return Class.all.count()\n         *  .then(function(count) { console.log(count + \" objects\") });\n         *  // -> SELECT COUNT(*) FROM ...\n         * ```\n         */\n        Query.prototype.count = function () {\n            this._justCount = true;\n            return this.get();\n        };\n        /**\n         * Executes the query, returning a promise resolving with the array of objects that match any conditions\n         * set on the Query\n         *\n         * @see {@link count}\n         * @example\n         * ```\n         *\n         *  return Class.all.where('x', '>', 0).get();\n         *  // -> SELECT ... WHERE x > 0\n         * ```\n         */\n        Query.prototype.get = function () {\n            var countProp = 'COUNT(*)';\n            var stmt = 'SELECT ';\n            var model = this._model;\n            if (this._justCount) {\n                stmt += countProp;\n            }\n            else {\n                stmt += this._columns.join(', ');\n            }\n            stmt += ' FROM ' + this._tables.join(', ');\n            var args = [];\n            for (var i = 0; i < this._conditions.length; i++) {\n                var cond = this._conditions[i];\n                stmt += (i === 0) ? ' WHERE ' : (' ' + cond.conj + ' ');\n                stmt += cond.col + ' ' + cond.op + ' ' + cond.val;\n                if ('arg' in cond) {\n                    args.push(cond.arg);\n                }\n            }\n            if (this._order) {\n                stmt += ' ORDER BY ' + this._order;\n                stmt += (this._nocase ? ' COLLATE NOCASE' : '');\n                stmt += (this._asc ? ' ASC' : ' DESC');\n            }\n            console.assert(!this._offset || this._limit);\n            if (this._limit) {\n                stmt += ' LIMIT ' + this._limit;\n                if (this._offset) {\n                    stmt += ' OFFSET ' + this._offset;\n                }\n            }\n            var objects = [];\n            var query = this;\n            return this._store.execRead(stmt, args, function (tx, results) {\n                if (query._justCount) {\n                    return results.rows.item(0)[countProp];\n                }\n                for (var i = 0; i < results.rows.length; i++) {\n                    var o = Updraft.constructFromDb(model, results.rows.item(i));\n                    objects.push(o);\n                }\n                var setcols = Object.keys(model.columns).filter(function (col) {\n                    return (model.columns[col].type === 10 /* set */);\n                });\n                return Promise.all(objects.map(function (o) {\n                    return Promise.all(setcols.map(function (col) {\n                        var setTable = model.columns[col].setTable;\n                        console.assert(setTable != null);\n                        var key = o._primaryKey();\n                        var s = 'SELECT ' + col;\n                        s += ' FROM ' + setTable.tableName;\n                        s += ' WHERE ' + query._model.key + ' = ?';\n                        return query._store.exec(tx, s, [key], function (tx, results) {\n                            if (results.rows.length > 0) {\n                                o[col].initFromDb(results);\n                            }\n                        });\n                    }));\n                })).then(function () {\n                    return objects;\n                });\n            });\n        };\n        return Query;\n    })();\n    Updraft.Query = Query;\n})(Updraft || (Updraft = {}));\n/// <reference path=\"./Instance.ts\" />\n/// <reference path=\"./column.ts\" />\n/// <reference path=\"./Query.ts\" />\n/// <reference path=\"./store.ts\" />\n/// <reference path=\"./query.ts\" />\n\n//# sourceMappingURL=../updraft/dist/updraft.js.map"],"sourceRoot":"/source/"}